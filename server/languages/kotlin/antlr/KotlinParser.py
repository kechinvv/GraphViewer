# Generated from C:/Users/valer/PycharmProjects/GraphViewer/server/kotlin/antlr\KotlinParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,171,3451,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,1,0,3,0,348,8,0,1,0,5,0,351,
        8,0,10,0,12,0,354,9,0,1,0,5,0,357,8,0,10,0,12,0,360,9,0,1,0,1,0,
        1,0,5,0,365,8,0,10,0,12,0,368,9,0,1,0,1,0,1,1,3,1,373,8,1,1,1,5,
        1,376,8,1,10,1,12,1,379,9,1,1,1,5,1,382,8,1,10,1,12,1,385,9,1,1,
        1,1,1,1,1,1,1,1,1,5,1,392,8,1,10,1,12,1,395,9,1,1,1,1,1,1,2,1,2,
        4,2,401,8,2,11,2,12,2,402,1,3,1,3,1,3,5,3,408,8,3,10,3,12,3,411,
        9,3,1,3,1,3,5,3,415,8,3,10,3,12,3,418,9,3,1,3,1,3,4,3,422,8,3,11,
        3,12,3,423,1,3,1,3,1,3,3,3,429,8,3,1,3,5,3,432,8,3,10,3,12,3,435,
        9,3,1,4,1,4,1,4,3,4,440,8,4,3,4,442,8,4,1,5,5,5,445,8,5,10,5,12,
        5,448,9,5,1,6,1,6,1,6,1,6,1,6,3,6,455,8,6,1,6,3,6,458,8,6,1,7,1,
        7,1,7,1,8,1,8,3,8,465,8,8,1,9,3,9,468,8,9,1,9,1,9,5,9,472,8,9,10,
        9,12,9,475,9,9,1,9,1,9,5,9,479,8,9,10,9,12,9,482,9,9,1,9,3,9,485,
        8,9,1,9,5,9,488,8,9,10,9,12,9,491,9,9,1,9,1,9,5,9,495,8,9,10,9,12,
        9,498,9,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,3,10,507,8,10,1,11,3,
        11,510,8,11,1,11,1,11,1,11,5,11,515,8,11,10,11,12,11,518,9,11,3,
        11,520,8,11,1,11,3,11,523,8,11,1,11,5,11,526,8,11,10,11,12,11,529,
        9,11,1,11,1,11,5,11,533,8,11,10,11,12,11,536,9,11,1,11,3,11,539,
        8,11,1,11,5,11,542,8,11,10,11,12,11,545,9,11,1,11,3,11,548,8,11,
        1,11,5,11,551,8,11,10,11,12,11,554,9,11,1,11,1,11,5,11,558,8,11,
        10,11,12,11,561,9,11,1,11,3,11,564,8,11,1,11,5,11,567,8,11,10,11,
        12,11,570,9,11,1,11,3,11,573,8,11,1,11,5,11,576,8,11,10,11,12,11,
        579,9,11,1,11,1,11,5,11,583,8,11,10,11,12,11,586,9,11,1,11,3,11,
        589,8,11,1,12,3,12,592,8,12,1,12,1,12,5,12,596,8,12,10,12,12,12,
        599,9,12,3,12,601,8,12,1,12,1,12,1,13,1,13,5,13,607,8,13,10,13,12,
        13,610,9,13,1,13,1,13,5,13,614,8,13,10,13,12,13,617,9,13,1,13,1,
        13,1,14,1,14,5,14,623,8,14,10,14,12,14,626,9,14,1,14,1,14,5,14,630,
        8,14,10,14,12,14,633,9,14,1,14,1,14,5,14,637,8,14,10,14,12,14,640,
        9,14,1,14,5,14,643,8,14,10,14,12,14,646,9,14,1,14,5,14,649,8,14,
        10,14,12,14,652,9,14,1,14,3,14,655,8,14,3,14,657,8,14,1,14,5,14,
        660,8,14,10,14,12,14,663,9,14,1,14,1,14,1,15,3,15,668,8,15,1,15,
        3,15,671,8,15,1,15,5,15,674,8,15,10,15,12,15,677,9,15,1,15,1,15,
        1,15,5,15,682,8,15,10,15,12,15,685,9,15,1,15,1,15,5,15,689,8,15,
        10,15,12,15,692,9,15,1,15,1,15,5,15,696,8,15,10,15,12,15,699,9,15,
        1,15,3,15,702,8,15,1,16,1,16,5,16,706,8,16,10,16,12,16,709,9,16,
        1,16,1,16,5,16,713,8,16,10,16,12,16,716,9,16,1,16,5,16,719,8,16,
        10,16,12,16,722,9,16,1,17,1,17,1,17,1,17,3,17,728,8,17,1,18,1,18,
        1,18,1,19,5,19,734,8,19,10,19,12,19,737,9,19,1,19,5,19,740,8,19,
        10,19,12,19,743,9,19,1,19,1,19,1,20,1,20,3,20,749,8,20,1,20,5,20,
        752,8,20,10,20,12,20,755,9,20,1,20,1,20,5,20,759,8,20,10,20,12,20,
        762,9,20,1,20,1,20,1,21,1,21,5,21,768,8,21,10,21,12,21,771,9,21,
        1,21,1,21,5,21,775,8,21,10,21,12,21,778,9,21,1,21,1,21,5,21,782,
        8,21,10,21,12,21,785,9,21,1,21,5,21,788,8,21,10,21,12,21,791,9,21,
        1,21,5,21,794,8,21,10,21,12,21,797,9,21,1,21,3,21,800,8,21,1,21,
        5,21,803,8,21,10,21,12,21,806,9,21,1,21,1,21,1,22,3,22,811,8,22,
        1,22,5,22,814,8,22,10,22,12,22,817,9,22,1,22,1,22,5,22,821,8,22,
        10,22,12,22,824,9,22,1,22,1,22,5,22,828,8,22,10,22,12,22,831,9,22,
        1,22,3,22,834,8,22,1,23,1,23,5,23,838,8,23,10,23,12,23,841,9,23,
        1,23,1,23,5,23,845,8,23,10,23,12,23,848,9,23,1,23,1,23,5,23,852,
        8,23,10,23,12,23,855,9,23,1,23,5,23,858,8,23,10,23,12,23,861,9,23,
        1,24,5,24,864,8,24,10,24,12,24,867,9,24,1,24,1,24,5,24,871,8,24,
        10,24,12,24,874,9,24,1,24,1,24,5,24,878,8,24,10,24,12,24,881,9,24,
        1,24,1,24,1,25,1,25,3,25,887,8,25,5,25,889,8,25,10,25,12,25,892,
        9,25,1,26,1,26,1,26,1,26,3,26,898,8,26,1,27,1,27,5,27,902,8,27,10,
        27,12,27,905,9,27,1,27,1,27,1,28,3,28,910,8,28,1,28,1,28,5,28,914,
        8,28,10,28,12,28,917,9,28,1,28,1,28,5,28,921,8,28,10,28,12,28,924,
        9,28,1,28,3,28,927,8,28,1,28,5,28,930,8,28,10,28,12,28,933,9,28,
        1,28,1,28,5,28,937,8,28,10,28,12,28,940,9,28,1,28,3,28,943,8,28,
        1,28,5,28,946,8,28,10,28,12,28,949,9,28,1,28,3,28,952,8,28,1,29,
        1,29,5,29,956,8,29,10,29,12,29,959,9,29,1,29,1,29,5,29,963,8,29,
        10,29,12,29,966,9,29,1,29,1,29,5,29,970,8,29,10,29,12,29,973,9,29,
        1,29,5,29,976,8,29,10,29,12,29,979,9,29,1,29,5,29,982,8,29,10,29,
        12,29,985,9,29,1,29,3,29,988,8,29,3,29,990,8,29,1,29,5,29,993,8,
        29,10,29,12,29,996,9,29,1,29,1,29,1,30,3,30,1001,8,30,1,30,1,30,
        5,30,1005,8,30,10,30,12,30,1008,9,30,1,30,1,30,5,30,1012,8,30,10,
        30,12,30,1015,9,30,1,30,3,30,1018,8,30,1,31,3,31,1021,8,31,1,31,
        1,31,5,31,1025,8,31,10,31,12,31,1028,9,31,1,31,3,31,1031,8,31,1,
        31,5,31,1034,8,31,10,31,12,31,1037,9,31,1,31,1,31,5,31,1041,8,31,
        10,31,12,31,1044,9,31,1,31,1,31,3,31,1048,8,31,1,31,5,31,1051,8,
        31,10,31,12,31,1054,9,31,1,31,1,31,5,31,1058,8,31,10,31,12,31,1061,
        9,31,1,31,1,31,5,31,1065,8,31,10,31,12,31,1068,9,31,1,31,1,31,5,
        31,1072,8,31,10,31,12,31,1075,9,31,1,31,3,31,1078,8,31,1,31,5,31,
        1081,8,31,10,31,12,31,1084,9,31,1,31,3,31,1087,8,31,1,31,5,31,1090,
        8,31,10,31,12,31,1093,9,31,1,31,3,31,1096,8,31,1,32,1,32,1,32,5,
        32,1101,8,32,10,32,12,32,1104,9,32,1,32,3,32,1107,8,32,1,33,5,33,
        1110,8,33,10,33,12,33,1113,9,33,1,33,5,33,1116,8,33,10,33,12,33,
        1119,9,33,1,33,1,33,5,33,1123,8,33,10,33,12,33,1126,9,33,1,33,1,
        33,5,33,1130,8,33,10,33,12,33,1133,9,33,1,33,3,33,1136,8,33,1,34,
        1,34,5,34,1140,8,34,10,34,12,34,1143,9,34,1,34,1,34,5,34,1147,8,
        34,10,34,12,34,1150,9,34,1,34,1,34,5,34,1154,8,34,10,34,12,34,1157,
        9,34,1,34,5,34,1160,8,34,10,34,12,34,1163,9,34,1,34,5,34,1166,8,
        34,10,34,12,34,1169,9,34,1,34,3,34,1172,8,34,1,34,5,34,1175,8,34,
        10,34,12,34,1178,9,34,1,34,1,34,1,35,3,35,1183,8,35,1,35,1,35,5,
        35,1187,8,35,10,35,12,35,1190,9,35,1,35,3,35,1193,8,35,1,35,5,35,
        1196,8,35,10,35,12,35,1199,9,35,1,35,1,35,5,35,1203,8,35,10,35,12,
        35,1206,9,35,1,35,1,35,3,35,1210,8,35,1,35,5,35,1213,8,35,10,35,
        12,35,1216,9,35,1,35,1,35,3,35,1220,8,35,1,35,5,35,1223,8,35,10,
        35,12,35,1226,9,35,1,35,3,35,1229,8,35,1,35,5,35,1232,8,35,10,35,
        12,35,1235,9,35,1,35,1,35,5,35,1239,8,35,10,35,12,35,1242,9,35,1,
        35,1,35,3,35,1246,8,35,3,35,1248,8,35,1,35,4,35,1251,8,35,11,35,
        12,35,1252,1,35,3,35,1256,8,35,1,35,5,35,1259,8,35,10,35,12,35,1262,
        9,35,1,35,3,35,1265,8,35,1,35,5,35,1268,8,35,10,35,12,35,1271,9,
        35,1,35,3,35,1274,8,35,1,35,3,35,1277,8,35,1,35,3,35,1280,8,35,1,
        35,5,35,1283,8,35,10,35,12,35,1286,9,35,1,35,3,35,1289,8,35,1,35,
        3,35,1292,8,35,3,35,1294,8,35,1,36,1,36,5,36,1298,8,36,10,36,12,
        36,1301,9,36,1,36,1,36,1,37,3,37,1306,8,37,1,37,1,37,5,37,1310,8,
        37,10,37,12,37,1313,9,37,1,37,1,37,5,37,1317,8,37,10,37,12,37,1320,
        9,37,1,37,1,37,5,37,1324,8,37,10,37,12,37,1327,9,37,1,37,1,37,5,
        37,1331,8,37,10,37,12,37,1334,9,37,1,37,3,37,1337,8,37,1,37,5,37,
        1340,8,37,10,37,12,37,1343,9,37,1,37,3,37,1346,8,37,1,38,3,38,1349,
        8,38,1,38,1,38,5,38,1353,8,38,10,38,12,38,1356,9,38,1,38,1,38,5,
        38,1360,8,38,10,38,12,38,1363,9,38,1,38,1,38,5,38,1367,8,38,10,38,
        12,38,1370,9,38,1,38,3,38,1373,8,38,1,38,5,38,1376,8,38,10,38,12,
        38,1379,9,38,1,38,1,38,5,38,1383,8,38,10,38,12,38,1386,9,38,1,38,
        1,38,5,38,1390,8,38,10,38,12,38,1393,9,38,1,38,3,38,1396,8,38,1,
        38,5,38,1399,8,38,10,38,12,38,1402,9,38,1,38,1,38,3,38,1406,8,38,
        1,39,1,39,5,39,1410,8,39,10,39,12,39,1413,9,39,1,39,1,39,5,39,1417,
        8,39,10,39,12,39,1420,9,39,1,39,1,39,5,39,1424,8,39,10,39,12,39,
        1427,9,39,1,39,5,39,1430,8,39,10,39,12,39,1433,9,39,1,39,5,39,1436,
        8,39,10,39,12,39,1439,9,39,1,39,3,39,1442,8,39,3,39,1444,8,39,1,
        39,5,39,1447,8,39,10,39,12,39,1450,9,39,1,39,1,39,1,40,3,40,1455,
        8,40,1,40,1,40,5,40,1459,8,40,10,40,12,40,1462,9,40,1,40,1,40,5,
        40,1466,8,40,10,40,12,40,1469,9,40,1,40,3,40,1472,8,40,1,41,1,41,
        5,41,1476,8,41,10,41,12,41,1479,9,41,1,41,1,41,5,41,1483,8,41,10,
        41,12,41,1486,9,41,1,41,3,41,1489,8,41,1,42,1,42,5,42,1493,8,42,
        10,42,12,42,1496,9,42,1,42,1,42,5,42,1500,8,42,10,42,12,42,1503,
        9,42,1,42,1,42,1,43,3,43,1508,8,43,1,43,1,43,5,43,1512,8,43,10,43,
        12,43,1515,9,43,1,43,1,43,5,43,1519,8,43,10,43,12,43,1522,9,43,1,
        43,1,43,5,43,1526,8,43,10,43,12,43,1529,9,43,1,43,3,43,1532,8,43,
        1,43,5,43,1535,8,43,10,43,12,43,1538,9,43,1,43,3,43,1541,8,43,1,
        44,3,44,1544,8,44,1,44,1,44,5,44,1548,8,44,10,44,12,44,1551,9,44,
        1,44,1,44,5,44,1555,8,44,10,44,12,44,1558,9,44,1,44,1,44,5,44,1562,
        8,44,10,44,12,44,1565,9,44,1,44,3,44,1568,8,44,1,44,5,44,1571,8,
        44,10,44,12,44,1574,9,44,1,44,3,44,1577,8,44,1,45,1,45,5,45,1581,
        8,45,10,45,12,45,1584,9,45,1,45,1,45,1,46,1,46,5,46,1590,8,46,10,
        46,12,46,1593,9,46,1,46,3,46,1596,8,46,1,46,5,46,1599,8,46,10,46,
        12,46,1602,9,46,1,46,1,46,5,46,1606,8,46,10,46,12,46,1609,9,46,1,
        46,3,46,1612,8,46,1,46,5,46,1615,8,46,10,46,12,46,1618,9,46,1,46,
        1,46,1,47,1,47,5,47,1624,8,47,10,47,12,47,1627,9,47,1,47,1,47,5,
        47,1631,8,47,10,47,12,47,1634,9,47,1,47,5,47,1637,8,47,10,47,12,
        47,1640,9,47,1,47,5,47,1643,8,47,10,47,12,47,1646,9,47,1,47,3,47,
        1649,8,47,1,48,1,48,5,48,1653,8,48,10,48,12,48,1656,9,48,3,48,1658,
        8,48,1,48,1,48,5,48,1662,8,48,10,48,12,48,1665,9,48,1,48,3,48,1668,
        8,48,1,48,5,48,1671,8,48,10,48,12,48,1674,9,48,1,48,3,48,1677,8,
        48,1,49,3,49,1680,8,49,1,49,1,49,1,49,1,49,3,49,1686,8,49,1,50,1,
        50,3,50,1690,8,50,1,51,1,51,3,51,1694,8,51,1,51,5,51,1697,8,51,10,
        51,12,51,1700,9,51,1,51,4,51,1703,8,51,11,51,12,51,1704,1,52,1,52,
        1,53,1,53,5,53,1711,8,53,10,53,12,53,1714,9,53,1,53,1,53,5,53,1718,
        8,53,10,53,12,53,1721,9,53,1,53,5,53,1724,8,53,10,53,12,53,1727,
        9,53,1,54,1,54,5,54,1731,8,54,10,54,12,54,1734,9,54,1,54,3,54,1737,
        8,54,1,55,3,55,1740,8,55,1,55,1,55,3,55,1744,8,55,1,56,4,56,1747,
        8,56,11,56,12,56,1748,1,57,1,57,5,57,1753,8,57,10,57,12,57,1756,
        9,57,1,57,3,57,1759,8,57,1,58,1,58,5,58,1763,8,58,10,58,12,58,1766,
        9,58,1,58,1,58,5,58,1770,8,58,10,58,12,58,1773,9,58,3,58,1775,8,
        58,1,58,1,58,5,58,1779,8,58,10,58,12,58,1782,9,58,1,58,1,58,5,58,
        1786,8,58,10,58,12,58,1789,9,58,1,58,1,58,1,59,1,59,5,59,1795,8,
        59,10,59,12,59,1798,9,59,1,59,1,59,3,59,1802,8,59,1,59,5,59,1805,
        8,59,10,59,12,59,1808,9,59,1,59,1,59,5,59,1812,8,59,10,59,12,59,
        1815,9,59,1,59,1,59,3,59,1819,8,59,5,59,1821,8,59,10,59,12,59,1824,
        9,59,1,59,5,59,1827,8,59,10,59,12,59,1830,9,59,1,59,3,59,1833,8,
        59,1,59,5,59,1836,8,59,10,59,12,59,1839,9,59,1,59,1,59,1,60,1,60,
        5,60,1845,8,60,10,60,12,60,1848,9,60,1,60,1,60,5,60,1852,8,60,10,
        60,12,60,1855,9,60,1,60,1,60,1,61,3,61,1860,8,61,1,61,1,61,1,61,
        3,61,1865,8,61,1,62,1,62,5,62,1869,8,62,10,62,12,62,1872,9,62,1,
        62,1,62,3,62,1876,8,62,1,62,5,62,1879,8,62,10,62,12,62,1882,9,62,
        1,62,1,62,1,63,1,63,1,63,1,63,5,63,1890,8,63,10,63,12,63,1893,9,
        63,3,63,1895,8,63,1,63,3,63,1898,8,63,1,64,1,64,5,64,1902,8,64,10,
        64,12,64,1905,9,64,1,64,1,64,1,64,1,64,3,64,1911,8,64,1,65,1,65,
        1,65,5,65,1916,8,65,10,65,12,65,1919,9,65,1,66,1,66,3,66,1923,8,
        66,1,67,1,67,5,67,1927,8,67,10,67,12,67,1930,9,67,1,67,1,67,5,67,
        1934,8,67,10,67,12,67,1937,9,67,1,67,1,67,1,68,1,68,1,68,3,68,1944,
        8,68,1,69,1,69,5,69,1948,8,69,10,69,12,69,1951,9,69,1,69,1,69,5,
        69,1955,8,69,10,69,12,69,1958,9,69,1,69,1,69,3,69,1962,8,69,1,69,
        1,69,1,69,1,69,5,69,1968,8,69,10,69,12,69,1971,9,69,1,69,3,69,1974,
        8,69,1,70,1,70,5,70,1978,8,70,10,70,12,70,1981,9,70,1,70,1,70,1,
        70,1,70,5,70,1987,8,70,10,70,12,70,1990,9,70,1,70,1,70,3,70,1994,
        8,70,1,71,1,71,5,71,1998,8,71,10,71,12,71,2001,9,71,1,71,3,71,2004,
        8,71,1,71,5,71,2007,8,71,10,71,12,71,2010,9,71,1,71,1,71,5,71,2014,
        8,71,10,71,12,71,2017,9,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,
        72,1,72,1,72,3,72,2029,8,72,1,72,5,72,2032,8,72,10,72,12,72,2035,
        9,72,1,72,1,72,1,73,1,73,5,73,2041,8,73,10,73,12,73,2044,9,73,1,
        73,3,73,2047,8,73,1,74,4,74,2050,8,74,11,74,12,74,2051,1,75,1,75,
        1,76,1,76,5,76,2058,8,76,10,76,12,76,2061,9,76,1,76,1,76,5,76,2065,
        8,76,10,76,12,76,2068,9,76,1,76,5,76,2071,8,76,10,76,12,76,2074,
        9,76,1,77,1,77,5,77,2078,8,77,10,77,12,77,2081,9,77,1,77,1,77,5,
        77,2085,8,77,10,77,12,77,2088,9,77,1,77,5,77,2091,8,77,10,77,12,
        77,2094,9,77,1,78,1,78,1,78,5,78,2099,8,78,10,78,12,78,2102,9,78,
        1,78,1,78,5,78,2106,8,78,10,78,12,78,2109,9,78,1,79,1,79,1,79,5,
        79,2114,8,79,10,79,12,79,2117,9,79,1,79,1,79,5,79,2121,8,79,10,79,
        12,79,2124,9,79,1,80,1,80,5,80,2128,8,80,10,80,12,80,2131,9,80,1,
        81,1,81,1,81,5,81,2136,8,81,10,81,12,81,2139,9,81,1,81,1,81,1,81,
        1,81,5,81,2145,8,81,10,81,12,81,2148,9,81,1,81,1,81,5,81,2152,8,
        81,10,81,12,81,2155,9,81,1,82,1,82,5,82,2159,8,82,10,82,12,82,2162,
        9,82,1,82,1,82,5,82,2166,8,82,10,82,12,82,2169,9,82,1,82,1,82,5,
        82,2173,8,82,10,82,12,82,2176,9,82,1,83,1,83,1,83,1,84,1,84,1,84,
        5,84,2184,8,84,10,84,12,84,2187,9,84,1,84,1,84,5,84,2191,8,84,10,
        84,12,84,2194,9,84,1,85,1,85,1,85,5,85,2199,8,85,10,85,12,85,2202,
        9,85,1,85,5,85,2205,8,85,10,85,12,85,2208,9,85,1,86,1,86,1,86,5,
        86,2213,8,86,10,86,12,86,2216,9,86,1,86,1,86,5,86,2220,8,86,10,86,
        12,86,2223,9,86,1,87,1,87,1,87,5,87,2228,8,87,10,87,12,87,2231,9,
        87,1,87,1,87,5,87,2235,8,87,10,87,12,87,2238,9,87,1,88,1,88,5,88,
        2242,8,88,10,88,12,88,2245,9,88,1,88,1,88,5,88,2249,8,88,10,88,12,
        88,2252,9,88,1,88,1,88,5,88,2256,8,88,10,88,12,88,2259,9,88,1,89,
        5,89,2262,8,89,10,89,12,89,2265,9,89,1,89,1,89,1,90,1,90,1,90,1,
        90,5,90,2273,8,90,10,90,12,90,2276,9,90,3,90,2278,8,90,1,91,1,91,
        5,91,2282,8,91,10,91,12,91,2285,9,91,1,92,1,92,1,92,1,92,1,92,3,
        92,2292,8,92,1,93,1,93,1,93,1,93,1,93,3,93,2299,8,93,1,94,1,94,5,
        94,2303,8,94,10,94,12,94,2306,9,94,1,94,1,94,5,94,2310,8,94,10,94,
        12,94,2313,9,94,1,94,1,94,1,95,1,95,3,95,2319,8,95,1,96,1,96,5,96,
        2323,8,96,10,96,12,96,2326,9,96,1,96,1,96,5,96,2330,8,96,10,96,12,
        96,2333,9,96,1,96,1,96,1,97,1,97,1,97,3,97,2340,8,97,1,98,1,98,5,
        98,2344,8,98,10,98,12,98,2347,9,98,1,98,1,98,5,98,2351,8,98,10,98,
        12,98,2354,9,98,1,98,1,98,5,98,2358,8,98,10,98,12,98,2361,9,98,1,
        98,5,98,2364,8,98,10,98,12,98,2367,9,98,1,98,5,98,2370,8,98,10,98,
        12,98,2373,9,98,1,98,3,98,2376,8,98,1,98,5,98,2379,8,98,10,98,12,
        98,2382,9,98,1,98,1,98,1,99,1,99,5,99,2388,8,99,10,99,12,99,2391,
        9,99,1,99,1,99,1,99,3,99,2396,8,99,1,100,3,100,2399,8,100,1,100,
        3,100,2402,8,100,1,100,1,100,3,100,2406,8,100,1,101,5,101,2409,8,
        101,10,101,12,101,2412,9,101,1,101,3,101,2415,8,101,1,101,5,101,
        2418,8,101,10,101,12,101,2421,9,101,1,101,1,101,1,102,1,102,5,102,
        2427,8,102,10,102,12,102,2430,9,102,1,102,1,102,5,102,2434,8,102,
        10,102,12,102,2437,9,102,1,102,1,102,5,102,2441,8,102,10,102,12,
        102,2444,9,102,1,102,5,102,2447,8,102,10,102,12,102,2450,9,102,1,
        102,5,102,2453,8,102,10,102,12,102,2456,9,102,1,102,3,102,2459,8,
        102,1,102,5,102,2462,8,102,10,102,12,102,2465,9,102,1,102,1,102,
        1,103,1,103,5,103,2471,8,103,10,103,12,103,2474,9,103,1,103,1,103,
        5,103,2478,8,103,10,103,12,103,2481,9,103,1,103,1,103,5,103,2485,
        8,103,10,103,12,103,2488,9,103,1,103,5,103,2491,8,103,10,103,12,
        103,2494,9,103,1,103,5,103,2497,8,103,10,103,12,103,2500,9,103,1,
        103,3,103,2503,8,103,1,103,5,103,2506,8,103,10,103,12,103,2509,9,
        103,3,103,2511,8,103,1,103,1,103,1,104,3,104,2516,8,104,1,104,5,
        104,2519,8,104,10,104,12,104,2522,9,104,1,104,1,104,5,104,2526,8,
        104,10,104,12,104,2529,9,104,1,104,1,104,5,104,2533,8,104,10,104,
        12,104,2536,9,104,3,104,2538,8,104,1,104,3,104,2541,8,104,1,104,
        5,104,2544,8,104,10,104,12,104,2547,9,104,1,104,1,104,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,3,105,2565,8,105,1,106,1,106,5,106,2569,8,106,10,106,12,106,
        2572,9,106,1,106,1,106,5,106,2576,8,106,10,106,12,106,2579,9,106,
        1,106,1,106,1,107,1,107,5,107,2585,8,107,10,107,12,107,2588,9,107,
        1,107,1,107,5,107,2592,8,107,10,107,12,107,2595,9,107,1,107,1,107,
        5,107,2599,8,107,10,107,12,107,2602,9,107,1,107,5,107,2605,8,107,
        10,107,12,107,2608,9,107,1,107,5,107,2611,8,107,10,107,12,107,2614,
        9,107,1,107,3,107,2617,8,107,1,107,5,107,2620,8,107,10,107,12,107,
        2623,9,107,3,107,2625,8,107,1,107,1,107,1,108,1,108,1,109,1,109,
        3,109,2633,8,109,1,110,1,110,1,110,5,110,2638,8,110,10,110,12,110,
        2641,9,110,1,110,1,110,1,111,1,111,1,111,1,111,5,111,2649,8,111,
        10,111,12,111,2652,9,111,1,111,1,111,1,112,1,112,1,113,1,113,5,113,
        2660,8,113,10,113,12,113,2663,9,113,1,113,1,113,5,113,2667,8,113,
        10,113,12,113,2670,9,113,1,113,1,113,1,114,1,114,1,115,1,115,5,115,
        2678,8,115,10,115,12,115,2681,9,115,1,115,1,115,5,115,2685,8,115,
        10,115,12,115,2688,9,115,1,115,1,115,1,116,1,116,5,116,2694,8,116,
        10,116,12,116,2697,9,116,1,116,3,116,2700,8,116,1,116,5,116,2703,
        8,116,10,116,12,116,2706,9,116,1,116,1,116,5,116,2710,8,116,10,116,
        12,116,2713,9,116,3,116,2715,8,116,1,116,1,116,5,116,2719,8,116,
        10,116,12,116,2722,9,116,1,116,1,116,1,117,1,117,5,117,2728,8,117,
        10,117,12,117,2731,9,117,1,117,1,117,5,117,2735,8,117,10,117,12,
        117,2738,9,117,1,117,5,117,2741,8,117,10,117,12,117,2744,9,117,1,
        117,5,117,2747,8,117,10,117,12,117,2750,9,117,1,117,3,117,2753,8,
        117,1,118,1,118,1,118,5,118,2758,8,118,10,118,12,118,2761,9,118,
        1,118,1,118,5,118,2765,8,118,10,118,12,118,2768,9,118,1,118,3,118,
        2771,8,118,3,118,2773,8,118,1,119,1,119,5,119,2777,8,119,10,119,
        12,119,2780,9,119,1,119,1,119,5,119,2784,8,119,10,119,12,119,2787,
        9,119,1,119,1,119,3,119,2791,8,119,1,119,5,119,2794,8,119,10,119,
        12,119,2797,9,119,1,119,1,119,5,119,2801,8,119,10,119,12,119,2804,
        9,119,1,119,1,119,5,119,2808,8,119,10,119,12,119,2811,9,119,1,119,
        3,119,2814,8,119,1,119,5,119,2817,8,119,10,119,12,119,2820,9,119,
        1,119,3,119,2823,8,119,1,119,5,119,2826,8,119,10,119,12,119,2829,
        9,119,1,119,3,119,2832,8,119,1,120,1,120,3,120,2836,8,120,1,121,
        1,121,5,121,2840,8,121,10,121,12,121,2843,9,121,1,121,1,121,5,121,
        2847,8,121,10,121,12,121,2850,9,121,1,121,1,121,5,121,2854,8,121,
        10,121,12,121,2857,9,121,3,121,2859,8,121,1,121,5,121,2862,8,121,
        10,121,12,121,2865,9,121,1,121,3,121,2868,8,121,1,122,1,122,1,123,
        1,123,1,123,5,123,2875,8,123,10,123,12,123,2878,9,123,1,123,1,123,
        5,123,2882,8,123,10,123,12,123,2885,9,123,1,123,1,123,3,123,2889,
        8,123,1,123,1,123,3,123,2893,8,123,1,123,3,123,2896,8,123,1,124,
        1,124,5,124,2900,8,124,10,124,12,124,2903,9,124,1,124,1,124,5,124,
        2907,8,124,10,124,12,124,2910,9,124,1,124,1,124,5,124,2914,8,124,
        10,124,12,124,2917,9,124,1,124,1,124,5,124,2921,8,124,10,124,12,
        124,2924,9,124,1,124,1,124,3,124,2928,8,124,1,124,5,124,2931,8,124,
        10,124,12,124,2934,9,124,1,124,3,124,2937,8,124,1,124,5,124,2940,
        8,124,10,124,12,124,2943,9,124,1,124,1,124,5,124,2947,8,124,10,124,
        12,124,2950,9,124,1,124,1,124,3,124,2954,8,124,1,124,3,124,2957,
        8,124,1,125,1,125,5,125,2961,8,125,10,125,12,125,2964,9,125,1,125,
        5,125,2967,8,125,10,125,12,125,2970,9,125,1,125,1,125,5,125,2974,
        8,125,10,125,12,125,2977,9,125,1,125,1,125,5,125,2981,8,125,10,125,
        12,125,2984,9,125,1,125,1,125,5,125,2988,8,125,10,125,12,125,2991,
        9,125,3,125,2993,8,125,1,125,1,125,1,125,1,126,1,126,5,126,3000,
        8,126,10,126,12,126,3003,9,126,1,126,3,126,3006,8,126,1,126,5,126,
        3009,8,126,10,126,12,126,3012,9,126,1,126,1,126,5,126,3016,8,126,
        10,126,12,126,3019,9,126,1,126,1,126,5,126,3023,8,126,10,126,12,
        126,3026,9,126,5,126,3028,8,126,10,126,12,126,3031,9,126,1,126,5,
        126,3034,8,126,10,126,12,126,3037,9,126,1,126,1,126,1,127,1,127,
        5,127,3043,8,127,10,127,12,127,3046,9,127,1,127,1,127,5,127,3050,
        8,127,10,127,12,127,3053,9,127,1,127,5,127,3056,8,127,10,127,12,
        127,3059,9,127,1,127,5,127,3062,8,127,10,127,12,127,3065,9,127,1,
        127,3,127,3068,8,127,1,127,5,127,3071,8,127,10,127,12,127,3074,9,
        127,1,127,1,127,5,127,3078,8,127,10,127,12,127,3081,9,127,1,127,
        1,127,3,127,3085,8,127,1,127,1,127,5,127,3089,8,127,10,127,12,127,
        3092,9,127,1,127,1,127,5,127,3096,8,127,10,127,12,127,3099,9,127,
        1,127,1,127,3,127,3103,8,127,3,127,3105,8,127,1,128,1,128,1,128,
        3,128,3110,8,128,1,129,1,129,5,129,3114,8,129,10,129,12,129,3117,
        9,129,1,129,1,129,1,130,1,130,5,130,3123,8,130,10,130,12,130,3126,
        9,130,1,130,1,130,1,131,1,131,5,131,3132,8,131,10,131,12,131,3135,
        9,131,1,131,1,131,5,131,3139,8,131,10,131,12,131,3142,9,131,1,131,
        4,131,3145,8,131,11,131,12,131,3146,1,131,5,131,3150,8,131,10,131,
        12,131,3153,9,131,1,131,3,131,3156,8,131,1,131,5,131,3159,8,131,
        10,131,12,131,3162,9,131,1,131,3,131,3165,8,131,1,132,1,132,5,132,
        3169,8,132,10,132,12,132,3172,9,132,1,132,1,132,5,132,3176,8,132,
        10,132,12,132,3179,9,132,1,132,1,132,1,132,1,132,5,132,3185,8,132,
        10,132,12,132,3188,9,132,1,132,3,132,3191,8,132,1,132,1,132,5,132,
        3195,8,132,10,132,12,132,3198,9,132,1,132,1,132,1,133,1,133,5,133,
        3204,8,133,10,133,12,133,3207,9,133,1,133,1,133,1,134,1,134,5,134,
        3213,8,134,10,134,12,134,3216,9,134,1,134,1,134,1,134,3,134,3221,
        8,134,1,134,1,134,1,134,1,134,3,134,3227,8,134,1,135,3,135,3230,
        8,135,1,135,1,135,5,135,3234,8,135,10,135,12,135,3237,9,135,1,135,
        1,135,3,135,3241,8,135,1,136,1,136,1,137,1,137,1,138,1,138,1,139,
        1,139,1,140,1,140,1,141,1,141,1,142,1,142,1,143,1,143,1,144,1,144,
        1,144,1,144,1,144,3,144,3264,8,144,1,145,1,145,1,145,1,145,3,145,
        3270,8,145,1,146,1,146,1,147,5,147,3275,8,147,10,147,12,147,3278,
        9,147,1,147,1,147,5,147,3282,8,147,10,147,12,147,3285,9,147,1,147,
        1,147,3,147,3289,8,147,1,148,1,148,1,148,1,149,1,149,4,149,3296,
        8,149,11,149,12,149,3297,1,150,1,150,4,150,3302,8,150,11,150,12,
        150,3303,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,3,151,3314,
        8,151,1,151,5,151,3317,8,151,10,151,12,151,3320,9,151,1,152,4,152,
        3323,8,152,11,152,12,152,3324,1,153,1,153,1,153,5,153,3330,8,153,
        10,153,12,153,3333,9,153,3,153,3335,8,153,1,154,1,154,1,155,1,155,
        1,156,1,156,1,157,1,157,1,158,4,158,3346,8,158,11,158,12,158,3347,
        1,159,1,159,5,159,3352,8,159,10,159,12,159,3355,9,159,1,159,1,159,
        5,159,3359,8,159,10,159,12,159,3362,9,159,1,159,3,159,3365,8,159,
        1,160,1,160,1,161,1,161,1,162,1,162,1,163,1,163,1,164,1,164,1,165,
        1,165,1,166,1,166,3,166,3381,8,166,1,166,5,166,3384,8,166,10,166,
        12,166,3387,9,166,1,167,1,167,5,167,3391,8,167,10,167,12,167,3394,
        9,167,1,167,1,167,3,167,3398,8,167,1,167,1,167,1,168,1,168,5,168,
        3404,8,168,10,168,12,168,3407,9,168,1,168,1,168,3,168,3411,8,168,
        1,168,1,168,4,168,3415,8,168,11,168,12,168,3416,1,168,1,168,1,169,
        1,169,1,169,5,169,3424,8,169,10,169,12,169,3427,9,169,1,169,1,169,
        1,170,1,170,3,170,3433,8,170,1,171,1,171,1,172,1,172,5,172,3439,
        8,172,10,172,12,172,3442,9,172,1,172,1,172,5,172,3446,8,172,10,172,
        12,172,3449,9,172,1,172,0,0,173,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
        70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
        110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
        142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
        174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,
        206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,
        238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,
        270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,
        302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,
        334,336,338,340,342,344,0,30,2,0,40,40,42,42,1,0,76,77,1,0,83,84,
        1,0,44,45,1,0,40,41,2,0,5,5,27,27,2,0,135,135,138,145,1,0,159,161,
        1,0,164,166,2,0,59,59,83,83,2,0,56,56,97,97,1,0,29,33,2,0,50,51,
        53,54,1,0,46,49,2,0,102,102,104,104,2,0,101,101,103,103,1,0,18,19,
        1,0,15,17,2,0,52,52,100,100,1,0,24,25,1,0,111,116,2,0,123,123,128,
        128,1,0,107,110,2,0,102,102,105,105,1,0,117,122,1,0,124,126,1,0,
        129,131,1,0,133,134,1,0,62,69,7,0,61,69,71,71,79,82,86,86,91,92,
        105,134,146,146,3862,0,347,1,0,0,0,2,372,1,0,0,0,4,398,1,0,0,0,6,
        404,1,0,0,0,8,441,1,0,0,0,10,446,1,0,0,0,12,449,1,0,0,0,14,459,1,
        0,0,0,16,462,1,0,0,0,18,467,1,0,0,0,20,506,1,0,0,0,22,509,1,0,0,
        0,24,600,1,0,0,0,26,604,1,0,0,0,28,620,1,0,0,0,30,667,1,0,0,0,32,
        703,1,0,0,0,34,727,1,0,0,0,36,729,1,0,0,0,38,735,1,0,0,0,40,748,
        1,0,0,0,42,765,1,0,0,0,44,810,1,0,0,0,46,835,1,0,0,0,48,865,1,0,
        0,0,50,890,1,0,0,0,52,897,1,0,0,0,54,899,1,0,0,0,56,909,1,0,0,0,
        58,953,1,0,0,0,60,1000,1,0,0,0,62,1020,1,0,0,0,64,1106,1,0,0,0,66,
        1111,1,0,0,0,68,1137,1,0,0,0,70,1182,1,0,0,0,72,1295,1,0,0,0,74,
        1305,1,0,0,0,76,1348,1,0,0,0,78,1407,1,0,0,0,80,1454,1,0,0,0,82,
        1473,1,0,0,0,84,1490,1,0,0,0,86,1507,1,0,0,0,88,1543,1,0,0,0,90,
        1578,1,0,0,0,92,1587,1,0,0,0,94,1621,1,0,0,0,96,1657,1,0,0,0,98,
        1679,1,0,0,0,100,1689,1,0,0,0,102,1693,1,0,0,0,104,1706,1,0,0,0,
        106,1708,1,0,0,0,108,1728,1,0,0,0,110,1743,1,0,0,0,112,1746,1,0,
        0,0,114,1758,1,0,0,0,116,1774,1,0,0,0,118,1792,1,0,0,0,120,1842,
        1,0,0,0,122,1859,1,0,0,0,124,1866,1,0,0,0,126,1894,1,0,0,0,128,1903,
        1,0,0,0,130,1912,1,0,0,0,132,1922,1,0,0,0,134,1924,1,0,0,0,136,1943,
        1,0,0,0,138,1945,1,0,0,0,140,1975,1,0,0,0,142,1995,1,0,0,0,144,2028,
        1,0,0,0,146,2046,1,0,0,0,148,2049,1,0,0,0,150,2053,1,0,0,0,152,2055,
        1,0,0,0,154,2075,1,0,0,0,156,2095,1,0,0,0,158,2110,1,0,0,0,160,2125,
        1,0,0,0,162,2132,1,0,0,0,164,2156,1,0,0,0,166,2177,1,0,0,0,168,2180,
        1,0,0,0,170,2195,1,0,0,0,172,2209,1,0,0,0,174,2224,1,0,0,0,176,2239,
        1,0,0,0,178,2263,1,0,0,0,180,2277,1,0,0,0,182,2279,1,0,0,0,184,2291,
        1,0,0,0,186,2298,1,0,0,0,188,2300,1,0,0,0,190,2318,1,0,0,0,192,2320,
        1,0,0,0,194,2339,1,0,0,0,196,2341,1,0,0,0,198,2385,1,0,0,0,200,2398,
        1,0,0,0,202,2410,1,0,0,0,204,2424,1,0,0,0,206,2468,1,0,0,0,208,2515,
        1,0,0,0,210,2564,1,0,0,0,212,2566,1,0,0,0,214,2582,1,0,0,0,216,2628,
        1,0,0,0,218,2632,1,0,0,0,220,2634,1,0,0,0,222,2644,1,0,0,0,224,2655,
        1,0,0,0,226,2657,1,0,0,0,228,2673,1,0,0,0,230,2675,1,0,0,0,232,2691,
        1,0,0,0,234,2725,1,0,0,0,236,2772,1,0,0,0,238,2774,1,0,0,0,240,2835,
        1,0,0,0,242,2837,1,0,0,0,244,2869,1,0,0,0,246,2895,1,0,0,0,248,2897,
        1,0,0,0,250,2958,1,0,0,0,252,2997,1,0,0,0,254,3104,1,0,0,0,256,3109,
        1,0,0,0,258,3111,1,0,0,0,260,3120,1,0,0,0,262,3129,1,0,0,0,264,3166,
        1,0,0,0,266,3201,1,0,0,0,268,3226,1,0,0,0,270,3229,1,0,0,0,272,3242,
        1,0,0,0,274,3244,1,0,0,0,276,3246,1,0,0,0,278,3248,1,0,0,0,280,3250,
        1,0,0,0,282,3252,1,0,0,0,284,3254,1,0,0,0,286,3256,1,0,0,0,288,3263,
        1,0,0,0,290,3269,1,0,0,0,292,3271,1,0,0,0,294,3288,1,0,0,0,296,3290,
        1,0,0,0,298,3295,1,0,0,0,300,3301,1,0,0,0,302,3313,1,0,0,0,304,3322,
        1,0,0,0,306,3334,1,0,0,0,308,3336,1,0,0,0,310,3338,1,0,0,0,312,3340,
        1,0,0,0,314,3342,1,0,0,0,316,3345,1,0,0,0,318,3364,1,0,0,0,320,3366,
        1,0,0,0,322,3368,1,0,0,0,324,3370,1,0,0,0,326,3372,1,0,0,0,328,3374,
        1,0,0,0,330,3376,1,0,0,0,332,3380,1,0,0,0,334,3397,1,0,0,0,336,3410,
        1,0,0,0,338,3420,1,0,0,0,340,3432,1,0,0,0,342,3434,1,0,0,0,344,3436,
        1,0,0,0,346,348,3,4,2,0,347,346,1,0,0,0,347,348,1,0,0,0,348,352,
        1,0,0,0,349,351,5,5,0,0,350,349,1,0,0,0,351,354,1,0,0,0,352,350,
        1,0,0,0,352,353,1,0,0,0,353,358,1,0,0,0,354,352,1,0,0,0,355,357,
        3,6,3,0,356,355,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,
        1,0,0,0,359,361,1,0,0,0,360,358,1,0,0,0,361,362,3,8,4,0,362,366,
        3,10,5,0,363,365,3,16,8,0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,
        1,0,0,0,366,367,1,0,0,0,367,369,1,0,0,0,368,366,1,0,0,0,369,370,
        5,0,0,1,370,1,1,0,0,0,371,373,3,4,2,0,372,371,1,0,0,0,372,373,1,
        0,0,0,373,377,1,0,0,0,374,376,5,5,0,0,375,374,1,0,0,0,376,379,1,
        0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,383,1,0,0,0,379,377,1,
        0,0,0,380,382,3,6,3,0,381,380,1,0,0,0,382,385,1,0,0,0,383,381,1,
        0,0,0,383,384,1,0,0,0,384,386,1,0,0,0,385,383,1,0,0,0,386,387,3,
        8,4,0,387,393,3,10,5,0,388,389,3,128,64,0,389,390,3,146,73,0,390,
        392,1,0,0,0,391,388,1,0,0,0,392,395,1,0,0,0,393,391,1,0,0,0,393,
        394,1,0,0,0,394,396,1,0,0,0,395,393,1,0,0,0,396,397,5,0,0,1,397,
        3,1,0,0,0,398,400,5,1,0,0,399,401,5,5,0,0,400,399,1,0,0,0,401,402,
        1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,5,1,0,0,0,404,405,7,
        0,0,0,405,409,5,61,0,0,406,408,5,5,0,0,407,406,1,0,0,0,408,411,1,
        0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,412,1,0,0,0,411,409,1,
        0,0,0,412,416,5,26,0,0,413,415,5,5,0,0,414,413,1,0,0,0,415,418,1,
        0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,428,1,0,0,0,418,416,1,
        0,0,0,419,421,5,11,0,0,420,422,3,340,170,0,421,420,1,0,0,0,422,423,
        1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,426,
        5,12,0,0,426,429,1,0,0,0,427,429,3,340,170,0,428,419,1,0,0,0,428,
        427,1,0,0,0,429,433,1,0,0,0,430,432,5,5,0,0,431,430,1,0,0,0,432,
        435,1,0,0,0,433,431,1,0,0,0,433,434,1,0,0,0,434,7,1,0,0,0,435,433,
        1,0,0,0,436,437,5,70,0,0,437,439,3,344,172,0,438,440,3,146,73,0,
        439,438,1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,0,441,436,1,0,0,0,
        441,442,1,0,0,0,442,9,1,0,0,0,443,445,3,12,6,0,444,443,1,0,0,0,445,
        448,1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,11,1,0,0,0,448,446,
        1,0,0,0,449,450,5,71,0,0,450,454,3,344,172,0,451,452,5,7,0,0,452,
        455,5,15,0,0,453,455,3,14,7,0,454,451,1,0,0,0,454,453,1,0,0,0,454,
        455,1,0,0,0,455,457,1,0,0,0,456,458,3,146,73,0,457,456,1,0,0,0,457,
        458,1,0,0,0,458,13,1,0,0,0,459,460,5,100,0,0,460,461,3,342,171,0,
        461,15,1,0,0,0,462,464,3,20,10,0,463,465,3,148,74,0,464,463,1,0,
        0,0,464,465,1,0,0,0,465,17,1,0,0,0,466,468,3,298,149,0,467,466,1,
        0,0,0,467,468,1,0,0,0,468,469,1,0,0,0,469,473,5,78,0,0,470,472,5,
        5,0,0,471,470,1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,473,474,1,
        0,0,0,474,476,1,0,0,0,475,473,1,0,0,0,476,484,3,342,171,0,477,479,
        5,5,0,0,478,477,1,0,0,0,479,482,1,0,0,0,480,478,1,0,0,0,480,481,
        1,0,0,0,481,483,1,0,0,0,482,480,1,0,0,0,483,485,3,42,21,0,484,480,
        1,0,0,0,484,485,1,0,0,0,485,489,1,0,0,0,486,488,5,5,0,0,487,486,
        1,0,0,0,488,491,1,0,0,0,489,487,1,0,0,0,489,490,1,0,0,0,490,492,
        1,0,0,0,491,489,1,0,0,0,492,496,5,28,0,0,493,495,5,5,0,0,494,493,
        1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,0,496,497,1,0,0,0,497,499,
        1,0,0,0,498,496,1,0,0,0,499,500,3,98,49,0,500,19,1,0,0,0,501,507,
        3,22,11,0,502,507,3,86,43,0,503,507,3,62,31,0,504,507,3,70,35,0,
        505,507,3,18,9,0,506,501,1,0,0,0,506,502,1,0,0,0,506,503,1,0,0,0,
        506,504,1,0,0,0,506,505,1,0,0,0,507,21,1,0,0,0,508,510,3,298,149,
        0,509,508,1,0,0,0,509,510,1,0,0,0,510,522,1,0,0,0,511,523,5,72,0,
        0,512,516,5,74,0,0,513,515,5,5,0,0,514,513,1,0,0,0,515,518,1,0,0,
        0,516,514,1,0,0,0,516,517,1,0,0,0,517,520,1,0,0,0,518,516,1,0,0,
        0,519,512,1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,0,521,523,5,73,0,
        0,522,511,1,0,0,0,522,519,1,0,0,0,523,527,1,0,0,0,524,526,5,5,0,
        0,525,524,1,0,0,0,526,529,1,0,0,0,527,525,1,0,0,0,527,528,1,0,0,
        0,528,530,1,0,0,0,529,527,1,0,0,0,530,538,3,342,171,0,531,533,5,
        5,0,0,532,531,1,0,0,0,533,536,1,0,0,0,534,532,1,0,0,0,534,535,1,
        0,0,0,535,537,1,0,0,0,536,534,1,0,0,0,537,539,3,42,21,0,538,534,
        1,0,0,0,538,539,1,0,0,0,539,547,1,0,0,0,540,542,5,5,0,0,541,540,
        1,0,0,0,542,545,1,0,0,0,543,541,1,0,0,0,543,544,1,0,0,0,544,546,
        1,0,0,0,545,543,1,0,0,0,546,548,3,24,12,0,547,543,1,0,0,0,547,548,
        1,0,0,0,548,563,1,0,0,0,549,551,5,5,0,0,550,549,1,0,0,0,551,554,
        1,0,0,0,552,550,1,0,0,0,552,553,1,0,0,0,553,555,1,0,0,0,554,552,
        1,0,0,0,555,559,5,26,0,0,556,558,5,5,0,0,557,556,1,0,0,0,558,561,
        1,0,0,0,559,557,1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,561,559,
        1,0,0,0,562,564,3,32,16,0,563,552,1,0,0,0,563,564,1,0,0,0,564,572,
        1,0,0,0,565,567,5,5,0,0,566,565,1,0,0,0,567,570,1,0,0,0,568,566,
        1,0,0,0,568,569,1,0,0,0,569,571,1,0,0,0,570,568,1,0,0,0,571,573,
        3,46,23,0,572,568,1,0,0,0,572,573,1,0,0,0,573,588,1,0,0,0,574,576,
        5,5,0,0,575,574,1,0,0,0,576,579,1,0,0,0,577,575,1,0,0,0,577,578,
        1,0,0,0,578,580,1,0,0,0,579,577,1,0,0,0,580,589,3,26,13,0,581,583,
        5,5,0,0,582,581,1,0,0,0,583,586,1,0,0,0,584,582,1,0,0,0,584,585,
        1,0,0,0,585,587,1,0,0,0,586,584,1,0,0,0,587,589,3,92,46,0,588,577,
        1,0,0,0,588,584,1,0,0,0,588,589,1,0,0,0,589,23,1,0,0,0,590,592,3,
        298,149,0,591,590,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,597,
        5,79,0,0,594,596,5,5,0,0,595,594,1,0,0,0,596,599,1,0,0,0,597,595,
        1,0,0,0,597,598,1,0,0,0,598,601,1,0,0,0,599,597,1,0,0,0,600,591,
        1,0,0,0,600,601,1,0,0,0,601,602,1,0,0,0,602,603,3,28,14,0,603,25,
        1,0,0,0,604,608,5,13,0,0,605,607,5,5,0,0,606,605,1,0,0,0,607,610,
        1,0,0,0,608,606,1,0,0,0,608,609,1,0,0,0,609,611,1,0,0,0,610,608,
        1,0,0,0,611,615,3,50,25,0,612,614,5,5,0,0,613,612,1,0,0,0,614,617,
        1,0,0,0,615,613,1,0,0,0,615,616,1,0,0,0,616,618,1,0,0,0,617,615,
        1,0,0,0,618,619,5,14,0,0,619,27,1,0,0,0,620,624,5,9,0,0,621,623,
        5,5,0,0,622,621,1,0,0,0,623,626,1,0,0,0,624,622,1,0,0,0,624,625,
        1,0,0,0,625,656,1,0,0,0,626,624,1,0,0,0,627,644,3,30,15,0,628,630,
        5,5,0,0,629,628,1,0,0,0,630,633,1,0,0,0,631,629,1,0,0,0,631,632,
        1,0,0,0,632,634,1,0,0,0,633,631,1,0,0,0,634,638,5,8,0,0,635,637,
        5,5,0,0,636,635,1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,638,639,
        1,0,0,0,639,641,1,0,0,0,640,638,1,0,0,0,641,643,3,30,15,0,642,631,
        1,0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,644,645,1,0,0,0,645,654,
        1,0,0,0,646,644,1,0,0,0,647,649,5,5,0,0,648,647,1,0,0,0,649,652,
        1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,653,1,0,0,0,652,650,
        1,0,0,0,653,655,5,8,0,0,654,650,1,0,0,0,654,655,1,0,0,0,655,657,
        1,0,0,0,656,627,1,0,0,0,656,657,1,0,0,0,657,661,1,0,0,0,658,660,
        5,5,0,0,659,658,1,0,0,0,660,663,1,0,0,0,661,659,1,0,0,0,661,662,
        1,0,0,0,662,664,1,0,0,0,663,661,1,0,0,0,664,665,5,10,0,0,665,29,
        1,0,0,0,666,668,3,298,149,0,667,666,1,0,0,0,667,668,1,0,0,0,668,
        670,1,0,0,0,669,671,7,1,0,0,670,669,1,0,0,0,670,671,1,0,0,0,671,
        675,1,0,0,0,672,674,5,5,0,0,673,672,1,0,0,0,674,677,1,0,0,0,675,
        673,1,0,0,0,675,676,1,0,0,0,676,678,1,0,0,0,677,675,1,0,0,0,678,
        679,3,342,171,0,679,683,5,26,0,0,680,682,5,5,0,0,681,680,1,0,0,0,
        682,685,1,0,0,0,683,681,1,0,0,0,683,684,1,0,0,0,684,686,1,0,0,0,
        685,683,1,0,0,0,686,701,3,98,49,0,687,689,5,5,0,0,688,687,1,0,0,
        0,689,692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,693,1,0,0,
        0,692,690,1,0,0,0,693,697,5,28,0,0,694,696,5,5,0,0,695,694,1,0,0,
        0,696,699,1,0,0,0,697,695,1,0,0,0,697,698,1,0,0,0,698,700,1,0,0,
        0,699,697,1,0,0,0,700,702,3,150,75,0,701,690,1,0,0,0,701,702,1,0,
        0,0,702,31,1,0,0,0,703,720,3,38,19,0,704,706,5,5,0,0,705,704,1,0,
        0,0,706,709,1,0,0,0,707,705,1,0,0,0,707,708,1,0,0,0,708,710,1,0,
        0,0,709,707,1,0,0,0,710,714,5,8,0,0,711,713,5,5,0,0,712,711,1,0,
        0,0,713,716,1,0,0,0,714,712,1,0,0,0,714,715,1,0,0,0,715,717,1,0,
        0,0,716,714,1,0,0,0,717,719,3,38,19,0,718,707,1,0,0,0,719,722,1,
        0,0,0,720,718,1,0,0,0,720,721,1,0,0,0,721,33,1,0,0,0,722,720,1,0,
        0,0,723,728,3,36,18,0,724,728,3,40,20,0,725,728,3,106,53,0,726,728,
        3,116,58,0,727,723,1,0,0,0,727,724,1,0,0,0,727,725,1,0,0,0,727,726,
        1,0,0,0,728,35,1,0,0,0,729,730,3,106,53,0,730,731,3,206,103,0,731,
        37,1,0,0,0,732,734,3,332,166,0,733,732,1,0,0,0,734,737,1,0,0,0,735,
        733,1,0,0,0,735,736,1,0,0,0,736,741,1,0,0,0,737,735,1,0,0,0,738,
        740,5,5,0,0,739,738,1,0,0,0,740,743,1,0,0,0,741,739,1,0,0,0,741,
        742,1,0,0,0,742,744,1,0,0,0,743,741,1,0,0,0,744,745,3,34,17,0,745,
        39,1,0,0,0,746,749,3,106,53,0,747,749,3,116,58,0,748,746,1,0,0,0,
        748,747,1,0,0,0,749,753,1,0,0,0,750,752,5,5,0,0,751,750,1,0,0,0,
        752,755,1,0,0,0,753,751,1,0,0,0,753,754,1,0,0,0,754,756,1,0,0,0,
        755,753,1,0,0,0,756,760,5,80,0,0,757,759,5,5,0,0,758,757,1,0,0,0,
        759,762,1,0,0,0,760,758,1,0,0,0,760,761,1,0,0,0,761,763,1,0,0,0,
        762,760,1,0,0,0,763,764,3,150,75,0,764,41,1,0,0,0,765,769,5,46,0,
        0,766,768,5,5,0,0,767,766,1,0,0,0,768,771,1,0,0,0,769,767,1,0,0,
        0,769,770,1,0,0,0,770,772,1,0,0,0,771,769,1,0,0,0,772,789,3,44,22,
        0,773,775,5,5,0,0,774,773,1,0,0,0,775,778,1,0,0,0,776,774,1,0,0,
        0,776,777,1,0,0,0,777,779,1,0,0,0,778,776,1,0,0,0,779,783,5,8,0,
        0,780,782,5,5,0,0,781,780,1,0,0,0,782,785,1,0,0,0,783,781,1,0,0,
        0,783,784,1,0,0,0,784,786,1,0,0,0,785,783,1,0,0,0,786,788,3,44,22,
        0,787,776,1,0,0,0,788,791,1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,
        0,790,799,1,0,0,0,791,789,1,0,0,0,792,794,5,5,0,0,793,792,1,0,0,
        0,794,797,1,0,0,0,795,793,1,0,0,0,795,796,1,0,0,0,796,798,1,0,0,
        0,797,795,1,0,0,0,798,800,5,8,0,0,799,795,1,0,0,0,799,800,1,0,0,
        0,800,804,1,0,0,0,801,803,5,5,0,0,802,801,1,0,0,0,803,806,1,0,0,
        0,804,802,1,0,0,0,804,805,1,0,0,0,805,807,1,0,0,0,806,804,1,0,0,
        0,807,808,5,47,0,0,808,43,1,0,0,0,809,811,3,316,158,0,810,809,1,
        0,0,0,810,811,1,0,0,0,811,815,1,0,0,0,812,814,5,5,0,0,813,812,1,
        0,0,0,814,817,1,0,0,0,815,813,1,0,0,0,815,816,1,0,0,0,816,818,1,
        0,0,0,817,815,1,0,0,0,818,833,3,342,171,0,819,821,5,5,0,0,820,819,
        1,0,0,0,821,824,1,0,0,0,822,820,1,0,0,0,822,823,1,0,0,0,823,825,
        1,0,0,0,824,822,1,0,0,0,825,829,5,26,0,0,826,828,5,5,0,0,827,826,
        1,0,0,0,828,831,1,0,0,0,829,827,1,0,0,0,829,830,1,0,0,0,830,832,
        1,0,0,0,831,829,1,0,0,0,832,834,3,98,49,0,833,822,1,0,0,0,833,834,
        1,0,0,0,834,45,1,0,0,0,835,839,5,86,0,0,836,838,5,5,0,0,837,836,
        1,0,0,0,838,841,1,0,0,0,839,837,1,0,0,0,839,840,1,0,0,0,840,842,
        1,0,0,0,841,839,1,0,0,0,842,859,3,48,24,0,843,845,5,5,0,0,844,843,
        1,0,0,0,845,848,1,0,0,0,846,844,1,0,0,0,846,847,1,0,0,0,847,849,
        1,0,0,0,848,846,1,0,0,0,849,853,5,8,0,0,850,852,5,5,0,0,851,850,
        1,0,0,0,852,855,1,0,0,0,853,851,1,0,0,0,853,854,1,0,0,0,854,856,
        1,0,0,0,855,853,1,0,0,0,856,858,3,48,24,0,857,846,1,0,0,0,858,861,
        1,0,0,0,859,857,1,0,0,0,859,860,1,0,0,0,860,47,1,0,0,0,861,859,1,
        0,0,0,862,864,3,332,166,0,863,862,1,0,0,0,864,867,1,0,0,0,865,863,
        1,0,0,0,865,866,1,0,0,0,866,868,1,0,0,0,867,865,1,0,0,0,868,872,
        3,342,171,0,869,871,5,5,0,0,870,869,1,0,0,0,871,874,1,0,0,0,872,
        870,1,0,0,0,872,873,1,0,0,0,873,875,1,0,0,0,874,872,1,0,0,0,875,
        879,5,26,0,0,876,878,5,5,0,0,877,876,1,0,0,0,878,881,1,0,0,0,879,
        877,1,0,0,0,879,880,1,0,0,0,880,882,1,0,0,0,881,879,1,0,0,0,882,
        883,3,98,49,0,883,49,1,0,0,0,884,886,3,52,26,0,885,887,3,148,74,
        0,886,885,1,0,0,0,886,887,1,0,0,0,887,889,1,0,0,0,888,884,1,0,0,
        0,889,892,1,0,0,0,890,888,1,0,0,0,890,891,1,0,0,0,891,51,1,0,0,0,
        892,890,1,0,0,0,893,898,3,20,10,0,894,898,3,56,28,0,895,898,3,54,
        27,0,896,898,3,88,44,0,897,893,1,0,0,0,897,894,1,0,0,0,897,895,1,
        0,0,0,897,896,1,0,0,0,898,53,1,0,0,0,899,903,5,82,0,0,900,902,5,
        5,0,0,901,900,1,0,0,0,902,905,1,0,0,0,903,901,1,0,0,0,903,904,1,
        0,0,0,904,906,1,0,0,0,905,903,1,0,0,0,906,907,3,134,67,0,907,55,
        1,0,0,0,908,910,3,298,149,0,909,908,1,0,0,0,909,910,1,0,0,0,910,
        911,1,0,0,0,911,915,5,81,0,0,912,914,5,5,0,0,913,912,1,0,0,0,914,
        917,1,0,0,0,915,913,1,0,0,0,915,916,1,0,0,0,916,918,1,0,0,0,917,
        915,1,0,0,0,918,926,5,75,0,0,919,921,5,5,0,0,920,919,1,0,0,0,921,
        924,1,0,0,0,922,920,1,0,0,0,922,923,1,0,0,0,923,925,1,0,0,0,924,
        922,1,0,0,0,925,927,3,342,171,0,926,922,1,0,0,0,926,927,1,0,0,0,
        927,942,1,0,0,0,928,930,5,5,0,0,929,928,1,0,0,0,930,933,1,0,0,0,
        931,929,1,0,0,0,931,932,1,0,0,0,932,934,1,0,0,0,933,931,1,0,0,0,
        934,938,5,26,0,0,935,937,5,5,0,0,936,935,1,0,0,0,937,940,1,0,0,0,
        938,936,1,0,0,0,938,939,1,0,0,0,939,941,1,0,0,0,940,938,1,0,0,0,
        941,943,3,32,16,0,942,931,1,0,0,0,942,943,1,0,0,0,943,951,1,0,0,
        0,944,946,5,5,0,0,945,944,1,0,0,0,946,949,1,0,0,0,947,945,1,0,0,
        0,947,948,1,0,0,0,948,950,1,0,0,0,949,947,1,0,0,0,950,952,3,26,13,
        0,951,947,1,0,0,0,951,952,1,0,0,0,952,57,1,0,0,0,953,957,5,9,0,0,
        954,956,5,5,0,0,955,954,1,0,0,0,956,959,1,0,0,0,957,955,1,0,0,0,
        957,958,1,0,0,0,958,989,1,0,0,0,959,957,1,0,0,0,960,977,3,60,30,
        0,961,963,5,5,0,0,962,961,1,0,0,0,963,966,1,0,0,0,964,962,1,0,0,
        0,964,965,1,0,0,0,965,967,1,0,0,0,966,964,1,0,0,0,967,971,5,8,0,
        0,968,970,5,5,0,0,969,968,1,0,0,0,970,973,1,0,0,0,971,969,1,0,0,
        0,971,972,1,0,0,0,972,974,1,0,0,0,973,971,1,0,0,0,974,976,3,60,30,
        0,975,964,1,0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,977,978,1,0,0,
        0,978,987,1,0,0,0,979,977,1,0,0,0,980,982,5,5,0,0,981,980,1,0,0,
        0,982,985,1,0,0,0,983,981,1,0,0,0,983,984,1,0,0,0,984,986,1,0,0,
        0,985,983,1,0,0,0,986,988,5,8,0,0,987,983,1,0,0,0,987,988,1,0,0,
        0,988,990,1,0,0,0,989,960,1,0,0,0,989,990,1,0,0,0,990,994,1,0,0,
        0,991,993,5,5,0,0,992,991,1,0,0,0,993,996,1,0,0,0,994,992,1,0,0,
        0,994,995,1,0,0,0,995,997,1,0,0,0,996,994,1,0,0,0,997,998,5,10,0,
        0,998,59,1,0,0,0,999,1001,3,300,150,0,1000,999,1,0,0,0,1000,1001,
        1,0,0,0,1001,1002,1,0,0,0,1002,1017,3,84,42,0,1003,1005,5,5,0,0,
        1004,1003,1,0,0,0,1005,1008,1,0,0,0,1006,1004,1,0,0,0,1006,1007,
        1,0,0,0,1007,1009,1,0,0,0,1008,1006,1,0,0,0,1009,1013,5,28,0,0,1010,
        1012,5,5,0,0,1011,1010,1,0,0,0,1012,1015,1,0,0,0,1013,1011,1,0,0,
        0,1013,1014,1,0,0,0,1014,1016,1,0,0,0,1015,1013,1,0,0,0,1016,1018,
        3,150,75,0,1017,1006,1,0,0,0,1017,1018,1,0,0,0,1018,61,1,0,0,0,1019,
        1021,3,298,149,0,1020,1019,1,0,0,0,1020,1021,1,0,0,0,1021,1022,1,
        0,0,0,1022,1030,5,74,0,0,1023,1025,5,5,0,0,1024,1023,1,0,0,0,1025,
        1028,1,0,0,0,1026,1024,1,0,0,0,1026,1027,1,0,0,0,1027,1029,1,0,0,
        0,1028,1026,1,0,0,0,1029,1031,3,42,21,0,1030,1026,1,0,0,0,1030,1031,
        1,0,0,0,1031,1047,1,0,0,0,1032,1034,5,5,0,0,1033,1032,1,0,0,0,1034,
        1037,1,0,0,0,1035,1033,1,0,0,0,1035,1036,1,0,0,0,1036,1038,1,0,0,
        0,1037,1035,1,0,0,0,1038,1042,3,122,61,0,1039,1041,5,5,0,0,1040,
        1039,1,0,0,0,1041,1044,1,0,0,0,1042,1040,1,0,0,0,1042,1043,1,0,0,
        0,1043,1045,1,0,0,0,1044,1042,1,0,0,0,1045,1046,5,7,0,0,1046,1048,
        1,0,0,0,1047,1035,1,0,0,0,1047,1048,1,0,0,0,1048,1052,1,0,0,0,1049,
        1051,5,5,0,0,1050,1049,1,0,0,0,1051,1054,1,0,0,0,1052,1050,1,0,0,
        0,1052,1053,1,0,0,0,1053,1055,1,0,0,0,1054,1052,1,0,0,0,1055,1059,
        3,342,171,0,1056,1058,5,5,0,0,1057,1056,1,0,0,0,1058,1061,1,0,0,
        0,1059,1057,1,0,0,0,1059,1060,1,0,0,0,1060,1062,1,0,0,0,1061,1059,
        1,0,0,0,1062,1077,3,58,29,0,1063,1065,5,5,0,0,1064,1063,1,0,0,0,
        1065,1068,1,0,0,0,1066,1064,1,0,0,0,1066,1067,1,0,0,0,1067,1069,
        1,0,0,0,1068,1066,1,0,0,0,1069,1073,5,26,0,0,1070,1072,5,5,0,0,1071,
        1070,1,0,0,0,1072,1075,1,0,0,0,1073,1071,1,0,0,0,1073,1074,1,0,0,
        0,1074,1076,1,0,0,0,1075,1073,1,0,0,0,1076,1078,3,98,49,0,1077,1066,
        1,0,0,0,1077,1078,1,0,0,0,1078,1086,1,0,0,0,1079,1081,5,5,0,0,1080,
        1079,1,0,0,0,1081,1084,1,0,0,0,1082,1080,1,0,0,0,1082,1083,1,0,0,
        0,1083,1085,1,0,0,0,1084,1082,1,0,0,0,1085,1087,3,46,23,0,1086,1082,
        1,0,0,0,1086,1087,1,0,0,0,1087,1095,1,0,0,0,1088,1090,5,5,0,0,1089,
        1088,1,0,0,0,1090,1093,1,0,0,0,1091,1089,1,0,0,0,1091,1092,1,0,0,
        0,1092,1094,1,0,0,0,1093,1091,1,0,0,0,1094,1096,3,64,32,0,1095,1091,
        1,0,0,0,1095,1096,1,0,0,0,1096,63,1,0,0,0,1097,1107,3,134,67,0,1098,
        1102,5,28,0,0,1099,1101,5,5,0,0,1100,1099,1,0,0,0,1101,1104,1,0,
        0,0,1102,1100,1,0,0,0,1102,1103,1,0,0,0,1103,1105,1,0,0,0,1104,1102,
        1,0,0,0,1105,1107,3,150,75,0,1106,1097,1,0,0,0,1106,1098,1,0,0,0,
        1107,65,1,0,0,0,1108,1110,3,332,166,0,1109,1108,1,0,0,0,1110,1113,
        1,0,0,0,1111,1109,1,0,0,0,1111,1112,1,0,0,0,1112,1117,1,0,0,0,1113,
        1111,1,0,0,0,1114,1116,5,5,0,0,1115,1114,1,0,0,0,1116,1119,1,0,0,
        0,1117,1115,1,0,0,0,1117,1118,1,0,0,0,1118,1120,1,0,0,0,1119,1117,
        1,0,0,0,1120,1135,3,342,171,0,1121,1123,5,5,0,0,1122,1121,1,0,0,
        0,1123,1126,1,0,0,0,1124,1122,1,0,0,0,1124,1125,1,0,0,0,1125,1127,
        1,0,0,0,1126,1124,1,0,0,0,1127,1131,5,26,0,0,1128,1130,5,5,0,0,1129,
        1128,1,0,0,0,1130,1133,1,0,0,0,1131,1129,1,0,0,0,1131,1132,1,0,0,
        0,1132,1134,1,0,0,0,1133,1131,1,0,0,0,1134,1136,3,98,49,0,1135,1124,
        1,0,0,0,1135,1136,1,0,0,0,1136,67,1,0,0,0,1137,1141,5,9,0,0,1138,
        1140,5,5,0,0,1139,1138,1,0,0,0,1140,1143,1,0,0,0,1141,1139,1,0,0,
        0,1141,1142,1,0,0,0,1142,1144,1,0,0,0,1143,1141,1,0,0,0,1144,1161,
        3,66,33,0,1145,1147,5,5,0,0,1146,1145,1,0,0,0,1147,1150,1,0,0,0,
        1148,1146,1,0,0,0,1148,1149,1,0,0,0,1149,1151,1,0,0,0,1150,1148,
        1,0,0,0,1151,1155,5,8,0,0,1152,1154,5,5,0,0,1153,1152,1,0,0,0,1154,
        1157,1,0,0,0,1155,1153,1,0,0,0,1155,1156,1,0,0,0,1156,1158,1,0,0,
        0,1157,1155,1,0,0,0,1158,1160,3,66,33,0,1159,1148,1,0,0,0,1160,1163,
        1,0,0,0,1161,1159,1,0,0,0,1161,1162,1,0,0,0,1162,1171,1,0,0,0,1163,
        1161,1,0,0,0,1164,1166,5,5,0,0,1165,1164,1,0,0,0,1166,1169,1,0,0,
        0,1167,1165,1,0,0,0,1167,1168,1,0,0,0,1168,1170,1,0,0,0,1169,1167,
        1,0,0,0,1170,1172,5,8,0,0,1171,1167,1,0,0,0,1171,1172,1,0,0,0,1172,
        1176,1,0,0,0,1173,1175,5,5,0,0,1174,1173,1,0,0,0,1175,1178,1,0,0,
        0,1176,1174,1,0,0,0,1176,1177,1,0,0,0,1177,1179,1,0,0,0,1178,1176,
        1,0,0,0,1179,1180,5,10,0,0,1180,69,1,0,0,0,1181,1183,3,298,149,0,
        1182,1181,1,0,0,0,1182,1183,1,0,0,0,1183,1184,1,0,0,0,1184,1192,
        7,1,0,0,1185,1187,5,5,0,0,1186,1185,1,0,0,0,1187,1190,1,0,0,0,1188,
        1186,1,0,0,0,1188,1189,1,0,0,0,1189,1191,1,0,0,0,1190,1188,1,0,0,
        0,1191,1193,3,42,21,0,1192,1188,1,0,0,0,1192,1193,1,0,0,0,1193,1209,
        1,0,0,0,1194,1196,5,5,0,0,1195,1194,1,0,0,0,1196,1199,1,0,0,0,1197,
        1195,1,0,0,0,1197,1198,1,0,0,0,1198,1200,1,0,0,0,1199,1197,1,0,0,
        0,1200,1204,3,122,61,0,1201,1203,5,5,0,0,1202,1201,1,0,0,0,1203,
        1206,1,0,0,0,1204,1202,1,0,0,0,1204,1205,1,0,0,0,1205,1207,1,0,0,
        0,1206,1204,1,0,0,0,1207,1208,5,7,0,0,1208,1210,1,0,0,0,1209,1197,
        1,0,0,0,1209,1210,1,0,0,0,1210,1214,1,0,0,0,1211,1213,5,5,0,0,1212,
        1211,1,0,0,0,1213,1216,1,0,0,0,1214,1212,1,0,0,0,1214,1215,1,0,0,
        0,1215,1219,1,0,0,0,1216,1214,1,0,0,0,1217,1220,3,68,34,0,1218,1220,
        3,66,33,0,1219,1217,1,0,0,0,1219,1218,1,0,0,0,1220,1228,1,0,0,0,
        1221,1223,5,5,0,0,1222,1221,1,0,0,0,1223,1226,1,0,0,0,1224,1222,
        1,0,0,0,1224,1225,1,0,0,0,1225,1227,1,0,0,0,1226,1224,1,0,0,0,1227,
        1229,3,46,23,0,1228,1224,1,0,0,0,1228,1229,1,0,0,0,1229,1247,1,0,
        0,0,1230,1232,5,5,0,0,1231,1230,1,0,0,0,1232,1235,1,0,0,0,1233,1231,
        1,0,0,0,1233,1234,1,0,0,0,1234,1245,1,0,0,0,1235,1233,1,0,0,0,1236,
        1240,5,28,0,0,1237,1239,5,5,0,0,1238,1237,1,0,0,0,1239,1242,1,0,
        0,0,1240,1238,1,0,0,0,1240,1241,1,0,0,0,1241,1243,1,0,0,0,1242,1240,
        1,0,0,0,1243,1246,3,150,75,0,1244,1246,3,72,36,0,1245,1236,1,0,0,
        0,1245,1244,1,0,0,0,1246,1248,1,0,0,0,1247,1233,1,0,0,0,1247,1248,
        1,0,0,0,1248,1255,1,0,0,0,1249,1251,5,5,0,0,1250,1249,1,0,0,0,1251,
        1252,1,0,0,0,1252,1250,1,0,0,0,1252,1253,1,0,0,0,1253,1254,1,0,0,
        0,1254,1256,5,27,0,0,1255,1250,1,0,0,0,1255,1256,1,0,0,0,1256,1260,
        1,0,0,0,1257,1259,5,5,0,0,1258,1257,1,0,0,0,1259,1262,1,0,0,0,1260,
        1258,1,0,0,0,1260,1261,1,0,0,0,1261,1293,1,0,0,0,1262,1260,1,0,0,
        0,1263,1265,3,74,37,0,1264,1263,1,0,0,0,1264,1265,1,0,0,0,1265,1276,
        1,0,0,0,1266,1268,5,5,0,0,1267,1266,1,0,0,0,1268,1271,1,0,0,0,1269,
        1267,1,0,0,0,1269,1270,1,0,0,0,1270,1273,1,0,0,0,1271,1269,1,0,0,
        0,1272,1274,3,146,73,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,
        1275,1,0,0,0,1275,1277,3,76,38,0,1276,1269,1,0,0,0,1276,1277,1,0,
        0,0,1277,1294,1,0,0,0,1278,1280,3,76,38,0,1279,1278,1,0,0,0,1279,
        1280,1,0,0,0,1280,1291,1,0,0,0,1281,1283,5,5,0,0,1282,1281,1,0,0,
        0,1283,1286,1,0,0,0,1284,1282,1,0,0,0,1284,1285,1,0,0,0,1285,1288,
        1,0,0,0,1286,1284,1,0,0,0,1287,1289,3,146,73,0,1288,1287,1,0,0,0,
        1288,1289,1,0,0,0,1289,1290,1,0,0,0,1290,1292,3,74,37,0,1291,1284,
        1,0,0,0,1291,1292,1,0,0,0,1292,1294,1,0,0,0,1293,1264,1,0,0,0,1293,
        1279,1,0,0,0,1294,71,1,0,0,0,1295,1299,5,80,0,0,1296,1298,5,5,0,
        0,1297,1296,1,0,0,0,1298,1301,1,0,0,0,1299,1297,1,0,0,0,1299,1300,
        1,0,0,0,1300,1302,1,0,0,0,1301,1299,1,0,0,0,1302,1303,3,150,75,0,
        1303,73,1,0,0,0,1304,1306,3,298,149,0,1305,1304,1,0,0,0,1305,1306,
        1,0,0,0,1306,1307,1,0,0,0,1307,1345,5,64,0,0,1308,1310,5,5,0,0,1309,
        1308,1,0,0,0,1310,1313,1,0,0,0,1311,1309,1,0,0,0,1311,1312,1,0,0,
        0,1312,1314,1,0,0,0,1313,1311,1,0,0,0,1314,1318,5,9,0,0,1315,1317,
        5,5,0,0,1316,1315,1,0,0,0,1317,1320,1,0,0,0,1318,1316,1,0,0,0,1318,
        1319,1,0,0,0,1319,1321,1,0,0,0,1320,1318,1,0,0,0,1321,1336,5,10,
        0,0,1322,1324,5,5,0,0,1323,1322,1,0,0,0,1324,1327,1,0,0,0,1325,1323,
        1,0,0,0,1325,1326,1,0,0,0,1326,1328,1,0,0,0,1327,1325,1,0,0,0,1328,
        1332,5,26,0,0,1329,1331,5,5,0,0,1330,1329,1,0,0,0,1331,1334,1,0,
        0,0,1332,1330,1,0,0,0,1332,1333,1,0,0,0,1333,1335,1,0,0,0,1334,1332,
        1,0,0,0,1335,1337,3,98,49,0,1336,1325,1,0,0,0,1336,1337,1,0,0,0,
        1337,1341,1,0,0,0,1338,1340,5,5,0,0,1339,1338,1,0,0,0,1340,1343,
        1,0,0,0,1341,1339,1,0,0,0,1341,1342,1,0,0,0,1342,1344,1,0,0,0,1343,
        1341,1,0,0,0,1344,1346,3,64,32,0,1345,1311,1,0,0,0,1345,1346,1,0,
        0,0,1346,75,1,0,0,0,1347,1349,3,298,149,0,1348,1347,1,0,0,0,1348,
        1349,1,0,0,0,1349,1350,1,0,0,0,1350,1405,5,65,0,0,1351,1353,5,5,
        0,0,1352,1351,1,0,0,0,1353,1356,1,0,0,0,1354,1352,1,0,0,0,1354,1355,
        1,0,0,0,1355,1357,1,0,0,0,1356,1354,1,0,0,0,1357,1361,5,9,0,0,1358,
        1360,5,5,0,0,1359,1358,1,0,0,0,1360,1363,1,0,0,0,1361,1359,1,0,0,
        0,1361,1362,1,0,0,0,1362,1364,1,0,0,0,1363,1361,1,0,0,0,1364,1372,
        3,80,40,0,1365,1367,5,5,0,0,1366,1365,1,0,0,0,1367,1370,1,0,0,0,
        1368,1366,1,0,0,0,1368,1369,1,0,0,0,1369,1371,1,0,0,0,1370,1368,
        1,0,0,0,1371,1373,5,8,0,0,1372,1368,1,0,0,0,1372,1373,1,0,0,0,1373,
        1377,1,0,0,0,1374,1376,5,5,0,0,1375,1374,1,0,0,0,1376,1379,1,0,0,
        0,1377,1375,1,0,0,0,1377,1378,1,0,0,0,1378,1380,1,0,0,0,1379,1377,
        1,0,0,0,1380,1395,5,10,0,0,1381,1383,5,5,0,0,1382,1381,1,0,0,0,1383,
        1386,1,0,0,0,1384,1382,1,0,0,0,1384,1385,1,0,0,0,1385,1387,1,0,0,
        0,1386,1384,1,0,0,0,1387,1391,5,26,0,0,1388,1390,5,5,0,0,1389,1388,
        1,0,0,0,1390,1393,1,0,0,0,1391,1389,1,0,0,0,1391,1392,1,0,0,0,1392,
        1394,1,0,0,0,1393,1391,1,0,0,0,1394,1396,3,98,49,0,1395,1384,1,0,
        0,0,1395,1396,1,0,0,0,1396,1400,1,0,0,0,1397,1399,5,5,0,0,1398,1397,
        1,0,0,0,1399,1402,1,0,0,0,1400,1398,1,0,0,0,1400,1401,1,0,0,0,1401,
        1403,1,0,0,0,1402,1400,1,0,0,0,1403,1404,3,64,32,0,1404,1406,1,0,
        0,0,1405,1354,1,0,0,0,1405,1406,1,0,0,0,1406,77,1,0,0,0,1407,1411,
        5,9,0,0,1408,1410,5,5,0,0,1409,1408,1,0,0,0,1410,1413,1,0,0,0,1411,
        1409,1,0,0,0,1411,1412,1,0,0,0,1412,1443,1,0,0,0,1413,1411,1,0,0,
        0,1414,1431,3,80,40,0,1415,1417,5,5,0,0,1416,1415,1,0,0,0,1417,1420,
        1,0,0,0,1418,1416,1,0,0,0,1418,1419,1,0,0,0,1419,1421,1,0,0,0,1420,
        1418,1,0,0,0,1421,1425,5,8,0,0,1422,1424,5,5,0,0,1423,1422,1,0,0,
        0,1424,1427,1,0,0,0,1425,1423,1,0,0,0,1425,1426,1,0,0,0,1426,1428,
        1,0,0,0,1427,1425,1,0,0,0,1428,1430,3,80,40,0,1429,1418,1,0,0,0,
        1430,1433,1,0,0,0,1431,1429,1,0,0,0,1431,1432,1,0,0,0,1432,1441,
        1,0,0,0,1433,1431,1,0,0,0,1434,1436,5,5,0,0,1435,1434,1,0,0,0,1436,
        1439,1,0,0,0,1437,1435,1,0,0,0,1437,1438,1,0,0,0,1438,1440,1,0,0,
        0,1439,1437,1,0,0,0,1440,1442,5,8,0,0,1441,1437,1,0,0,0,1441,1442,
        1,0,0,0,1442,1444,1,0,0,0,1443,1414,1,0,0,0,1443,1444,1,0,0,0,1444,
        1448,1,0,0,0,1445,1447,5,5,0,0,1446,1445,1,0,0,0,1447,1450,1,0,0,
        0,1448,1446,1,0,0,0,1448,1449,1,0,0,0,1449,1451,1,0,0,0,1450,1448,
        1,0,0,0,1451,1452,5,10,0,0,1452,79,1,0,0,0,1453,1455,3,300,150,0,
        1454,1453,1,0,0,0,1454,1455,1,0,0,0,1455,1456,1,0,0,0,1456,1471,
        3,82,41,0,1457,1459,5,5,0,0,1458,1457,1,0,0,0,1459,1462,1,0,0,0,
        1460,1458,1,0,0,0,1460,1461,1,0,0,0,1461,1463,1,0,0,0,1462,1460,
        1,0,0,0,1463,1467,5,28,0,0,1464,1466,5,5,0,0,1465,1464,1,0,0,0,1466,
        1469,1,0,0,0,1467,1465,1,0,0,0,1467,1468,1,0,0,0,1468,1470,1,0,0,
        0,1469,1467,1,0,0,0,1470,1472,3,150,75,0,1471,1460,1,0,0,0,1471,
        1472,1,0,0,0,1472,81,1,0,0,0,1473,1477,3,342,171,0,1474,1476,5,5,
        0,0,1475,1474,1,0,0,0,1476,1479,1,0,0,0,1477,1475,1,0,0,0,1477,1478,
        1,0,0,0,1478,1488,1,0,0,0,1479,1477,1,0,0,0,1480,1484,5,26,0,0,1481,
        1483,5,5,0,0,1482,1481,1,0,0,0,1483,1486,1,0,0,0,1484,1482,1,0,0,
        0,1484,1485,1,0,0,0,1485,1487,1,0,0,0,1486,1484,1,0,0,0,1487,1489,
        3,98,49,0,1488,1480,1,0,0,0,1488,1489,1,0,0,0,1489,83,1,0,0,0,1490,
        1494,3,342,171,0,1491,1493,5,5,0,0,1492,1491,1,0,0,0,1493,1496,1,
        0,0,0,1494,1492,1,0,0,0,1494,1495,1,0,0,0,1495,1497,1,0,0,0,1496,
        1494,1,0,0,0,1497,1501,5,26,0,0,1498,1500,5,5,0,0,1499,1498,1,0,
        0,0,1500,1503,1,0,0,0,1501,1499,1,0,0,0,1501,1502,1,0,0,0,1502,1504,
        1,0,0,0,1503,1501,1,0,0,0,1504,1505,3,98,49,0,1505,85,1,0,0,0,1506,
        1508,3,298,149,0,1507,1506,1,0,0,0,1507,1508,1,0,0,0,1508,1509,1,
        0,0,0,1509,1513,5,75,0,0,1510,1512,5,5,0,0,1511,1510,1,0,0,0,1512,
        1515,1,0,0,0,1513,1511,1,0,0,0,1513,1514,1,0,0,0,1514,1516,1,0,0,
        0,1515,1513,1,0,0,0,1516,1531,3,342,171,0,1517,1519,5,5,0,0,1518,
        1517,1,0,0,0,1519,1522,1,0,0,0,1520,1518,1,0,0,0,1520,1521,1,0,0,
        0,1521,1523,1,0,0,0,1522,1520,1,0,0,0,1523,1527,5,26,0,0,1524,1526,
        5,5,0,0,1525,1524,1,0,0,0,1526,1529,1,0,0,0,1527,1525,1,0,0,0,1527,
        1528,1,0,0,0,1528,1530,1,0,0,0,1529,1527,1,0,0,0,1530,1532,3,32,
        16,0,1531,1520,1,0,0,0,1531,1532,1,0,0,0,1532,1540,1,0,0,0,1533,
        1535,5,5,0,0,1534,1533,1,0,0,0,1535,1538,1,0,0,0,1536,1534,1,0,0,
        0,1536,1537,1,0,0,0,1537,1539,1,0,0,0,1538,1536,1,0,0,0,1539,1541,
        3,26,13,0,1540,1536,1,0,0,0,1540,1541,1,0,0,0,1541,87,1,0,0,0,1542,
        1544,3,298,149,0,1543,1542,1,0,0,0,1543,1544,1,0,0,0,1544,1545,1,
        0,0,0,1545,1549,5,79,0,0,1546,1548,5,5,0,0,1547,1546,1,0,0,0,1548,
        1551,1,0,0,0,1549,1547,1,0,0,0,1549,1550,1,0,0,0,1550,1552,1,0,0,
        0,1551,1549,1,0,0,0,1552,1567,3,58,29,0,1553,1555,5,5,0,0,1554,1553,
        1,0,0,0,1555,1558,1,0,0,0,1556,1554,1,0,0,0,1556,1557,1,0,0,0,1557,
        1559,1,0,0,0,1558,1556,1,0,0,0,1559,1563,5,26,0,0,1560,1562,5,5,
        0,0,1561,1560,1,0,0,0,1562,1565,1,0,0,0,1563,1561,1,0,0,0,1563,1564,
        1,0,0,0,1564,1566,1,0,0,0,1565,1563,1,0,0,0,1566,1568,3,90,45,0,
        1567,1556,1,0,0,0,1567,1568,1,0,0,0,1568,1572,1,0,0,0,1569,1571,
        5,5,0,0,1570,1569,1,0,0,0,1571,1574,1,0,0,0,1572,1570,1,0,0,0,1572,
        1573,1,0,0,0,1573,1576,1,0,0,0,1574,1572,1,0,0,0,1575,1577,3,134,
        67,0,1576,1575,1,0,0,0,1576,1577,1,0,0,0,1577,89,1,0,0,0,1578,1582,
        7,2,0,0,1579,1581,5,5,0,0,1580,1579,1,0,0,0,1581,1584,1,0,0,0,1582,
        1580,1,0,0,0,1582,1583,1,0,0,0,1583,1585,1,0,0,0,1584,1582,1,0,0,
        0,1585,1586,3,206,103,0,1586,91,1,0,0,0,1587,1591,5,13,0,0,1588,
        1590,5,5,0,0,1589,1588,1,0,0,0,1590,1593,1,0,0,0,1591,1589,1,0,0,
        0,1591,1592,1,0,0,0,1592,1595,1,0,0,0,1593,1591,1,0,0,0,1594,1596,
        3,94,47,0,1595,1594,1,0,0,0,1595,1596,1,0,0,0,1596,1611,1,0,0,0,
        1597,1599,5,5,0,0,1598,1597,1,0,0,0,1599,1602,1,0,0,0,1600,1598,
        1,0,0,0,1600,1601,1,0,0,0,1601,1603,1,0,0,0,1602,1600,1,0,0,0,1603,
        1607,5,27,0,0,1604,1606,5,5,0,0,1605,1604,1,0,0,0,1606,1609,1,0,
        0,0,1607,1605,1,0,0,0,1607,1608,1,0,0,0,1608,1610,1,0,0,0,1609,1607,
        1,0,0,0,1610,1612,3,50,25,0,1611,1600,1,0,0,0,1611,1612,1,0,0,0,
        1612,1616,1,0,0,0,1613,1615,5,5,0,0,1614,1613,1,0,0,0,1615,1618,
        1,0,0,0,1616,1614,1,0,0,0,1616,1617,1,0,0,0,1617,1619,1,0,0,0,1618,
        1616,1,0,0,0,1619,1620,5,14,0,0,1620,93,1,0,0,0,1621,1638,3,96,48,
        0,1622,1624,5,5,0,0,1623,1622,1,0,0,0,1624,1627,1,0,0,0,1625,1623,
        1,0,0,0,1625,1626,1,0,0,0,1626,1628,1,0,0,0,1627,1625,1,0,0,0,1628,
        1632,5,8,0,0,1629,1631,5,5,0,0,1630,1629,1,0,0,0,1631,1634,1,0,0,
        0,1632,1630,1,0,0,0,1632,1633,1,0,0,0,1633,1635,1,0,0,0,1634,1632,
        1,0,0,0,1635,1637,3,96,48,0,1636,1625,1,0,0,0,1637,1640,1,0,0,0,
        1638,1636,1,0,0,0,1638,1639,1,0,0,0,1639,1644,1,0,0,0,1640,1638,
        1,0,0,0,1641,1643,5,5,0,0,1642,1641,1,0,0,0,1643,1646,1,0,0,0,1644,
        1642,1,0,0,0,1644,1645,1,0,0,0,1645,1648,1,0,0,0,1646,1644,1,0,0,
        0,1647,1649,5,8,0,0,1648,1647,1,0,0,0,1648,1649,1,0,0,0,1649,95,
        1,0,0,0,1650,1654,3,298,149,0,1651,1653,5,5,0,0,1652,1651,1,0,0,
        0,1653,1656,1,0,0,0,1654,1652,1,0,0,0,1654,1655,1,0,0,0,1655,1658,
        1,0,0,0,1656,1654,1,0,0,0,1657,1650,1,0,0,0,1657,1658,1,0,0,0,1658,
        1659,1,0,0,0,1659,1667,3,342,171,0,1660,1662,5,5,0,0,1661,1660,1,
        0,0,0,1662,1665,1,0,0,0,1663,1661,1,0,0,0,1663,1664,1,0,0,0,1664,
        1666,1,0,0,0,1665,1663,1,0,0,0,1666,1668,3,206,103,0,1667,1663,1,
        0,0,0,1667,1668,1,0,0,0,1668,1676,1,0,0,0,1669,1671,5,5,0,0,1670,
        1669,1,0,0,0,1671,1674,1,0,0,0,1672,1670,1,0,0,0,1672,1673,1,0,0,
        0,1673,1675,1,0,0,0,1674,1672,1,0,0,0,1675,1677,3,26,13,0,1676,1672,
        1,0,0,0,1676,1677,1,0,0,0,1677,97,1,0,0,0,1678,1680,3,304,152,0,
        1679,1678,1,0,0,0,1679,1680,1,0,0,0,1680,1685,1,0,0,0,1681,1686,
        3,120,60,0,1682,1686,3,102,51,0,1683,1686,3,100,50,0,1684,1686,3,
        116,58,0,1685,1681,1,0,0,0,1685,1682,1,0,0,0,1685,1683,1,0,0,0,1685,
        1684,1,0,0,0,1686,99,1,0,0,0,1687,1690,3,106,53,0,1688,1690,5,106,
        0,0,1689,1687,1,0,0,0,1689,1688,1,0,0,0,1690,101,1,0,0,0,1691,1694,
        3,100,50,0,1692,1694,3,120,60,0,1693,1691,1,0,0,0,1693,1692,1,0,
        0,0,1694,1698,1,0,0,0,1695,1697,5,5,0,0,1696,1695,1,0,0,0,1697,1700,
        1,0,0,0,1698,1696,1,0,0,0,1698,1699,1,0,0,0,1699,1702,1,0,0,0,1700,
        1698,1,0,0,0,1701,1703,3,104,52,0,1702,1701,1,0,0,0,1703,1704,1,
        0,0,0,1704,1702,1,0,0,0,1704,1705,1,0,0,0,1705,103,1,0,0,0,1706,
        1707,7,3,0,0,1707,105,1,0,0,0,1708,1725,3,108,54,0,1709,1711,5,5,
        0,0,1710,1709,1,0,0,0,1711,1714,1,0,0,0,1712,1710,1,0,0,0,1712,1713,
        1,0,0,0,1713,1715,1,0,0,0,1714,1712,1,0,0,0,1715,1719,5,7,0,0,1716,
        1718,5,5,0,0,1717,1716,1,0,0,0,1718,1721,1,0,0,0,1719,1717,1,0,0,
        0,1719,1720,1,0,0,0,1720,1722,1,0,0,0,1721,1719,1,0,0,0,1722,1724,
        3,108,54,0,1723,1712,1,0,0,0,1724,1727,1,0,0,0,1725,1723,1,0,0,0,
        1725,1726,1,0,0,0,1726,107,1,0,0,0,1727,1725,1,0,0,0,1728,1736,3,
        342,171,0,1729,1731,5,5,0,0,1730,1729,1,0,0,0,1731,1734,1,0,0,0,
        1732,1730,1,0,0,0,1732,1733,1,0,0,0,1733,1735,1,0,0,0,1734,1732,
        1,0,0,0,1735,1737,3,204,102,0,1736,1732,1,0,0,0,1736,1737,1,0,0,
        0,1737,109,1,0,0,0,1738,1740,3,112,56,0,1739,1738,1,0,0,0,1739,1740,
        1,0,0,0,1740,1741,1,0,0,0,1741,1744,3,98,49,0,1742,1744,5,15,0,0,
        1743,1739,1,0,0,0,1743,1742,1,0,0,0,1744,111,1,0,0,0,1745,1747,3,
        114,57,0,1746,1745,1,0,0,0,1747,1748,1,0,0,0,1748,1746,1,0,0,0,1748,
        1749,1,0,0,0,1749,113,1,0,0,0,1750,1754,3,314,157,0,1751,1753,5,
        5,0,0,1752,1751,1,0,0,0,1753,1756,1,0,0,0,1754,1752,1,0,0,0,1754,
        1755,1,0,0,0,1755,1759,1,0,0,0,1756,1754,1,0,0,0,1757,1759,3,332,
        166,0,1758,1750,1,0,0,0,1758,1757,1,0,0,0,1759,115,1,0,0,0,1760,
        1764,3,122,61,0,1761,1763,5,5,0,0,1762,1761,1,0,0,0,1763,1766,1,
        0,0,0,1764,1762,1,0,0,0,1764,1765,1,0,0,0,1765,1767,1,0,0,0,1766,
        1764,1,0,0,0,1767,1771,5,7,0,0,1768,1770,5,5,0,0,1769,1768,1,0,0,
        0,1770,1773,1,0,0,0,1771,1769,1,0,0,0,1771,1772,1,0,0,0,1772,1775,
        1,0,0,0,1773,1771,1,0,0,0,1774,1760,1,0,0,0,1774,1775,1,0,0,0,1775,
        1776,1,0,0,0,1776,1780,3,118,59,0,1777,1779,5,5,0,0,1778,1777,1,
        0,0,0,1779,1782,1,0,0,0,1780,1778,1,0,0,0,1780,1781,1,0,0,0,1781,
        1783,1,0,0,0,1782,1780,1,0,0,0,1783,1787,5,34,0,0,1784,1786,5,5,
        0,0,1785,1784,1,0,0,0,1786,1789,1,0,0,0,1787,1785,1,0,0,0,1787,1788,
        1,0,0,0,1788,1790,1,0,0,0,1789,1787,1,0,0,0,1790,1791,3,98,49,0,
        1791,117,1,0,0,0,1792,1796,5,9,0,0,1793,1795,5,5,0,0,1794,1793,1,
        0,0,0,1795,1798,1,0,0,0,1796,1794,1,0,0,0,1796,1797,1,0,0,0,1797,
        1801,1,0,0,0,1798,1796,1,0,0,0,1799,1802,3,84,42,0,1800,1802,3,98,
        49,0,1801,1799,1,0,0,0,1801,1800,1,0,0,0,1801,1802,1,0,0,0,1802,
        1822,1,0,0,0,1803,1805,5,5,0,0,1804,1803,1,0,0,0,1805,1808,1,0,0,
        0,1806,1804,1,0,0,0,1806,1807,1,0,0,0,1807,1809,1,0,0,0,1808,1806,
        1,0,0,0,1809,1813,5,8,0,0,1810,1812,5,5,0,0,1811,1810,1,0,0,0,1812,
        1815,1,0,0,0,1813,1811,1,0,0,0,1813,1814,1,0,0,0,1814,1818,1,0,0,
        0,1815,1813,1,0,0,0,1816,1819,3,84,42,0,1817,1819,3,98,49,0,1818,
        1816,1,0,0,0,1818,1817,1,0,0,0,1819,1821,1,0,0,0,1820,1806,1,0,0,
        0,1821,1824,1,0,0,0,1822,1820,1,0,0,0,1822,1823,1,0,0,0,1823,1832,
        1,0,0,0,1824,1822,1,0,0,0,1825,1827,5,5,0,0,1826,1825,1,0,0,0,1827,
        1830,1,0,0,0,1828,1826,1,0,0,0,1828,1829,1,0,0,0,1829,1831,1,0,0,
        0,1830,1828,1,0,0,0,1831,1833,5,8,0,0,1832,1828,1,0,0,0,1832,1833,
        1,0,0,0,1833,1837,1,0,0,0,1834,1836,5,5,0,0,1835,1834,1,0,0,0,1836,
        1839,1,0,0,0,1837,1835,1,0,0,0,1837,1838,1,0,0,0,1838,1840,1,0,0,
        0,1839,1837,1,0,0,0,1840,1841,5,10,0,0,1841,119,1,0,0,0,1842,1846,
        5,9,0,0,1843,1845,5,5,0,0,1844,1843,1,0,0,0,1845,1848,1,0,0,0,1846,
        1844,1,0,0,0,1846,1847,1,0,0,0,1847,1849,1,0,0,0,1848,1846,1,0,0,
        0,1849,1853,3,98,49,0,1850,1852,5,5,0,0,1851,1850,1,0,0,0,1852,1855,
        1,0,0,0,1853,1851,1,0,0,0,1853,1854,1,0,0,0,1854,1856,1,0,0,0,1855,
        1853,1,0,0,0,1856,1857,5,10,0,0,1857,121,1,0,0,0,1858,1860,3,304,
        152,0,1859,1858,1,0,0,0,1859,1860,1,0,0,0,1860,1864,1,0,0,0,1861,
        1865,3,120,60,0,1862,1865,3,102,51,0,1863,1865,3,100,50,0,1864,1861,
        1,0,0,0,1864,1862,1,0,0,0,1864,1863,1,0,0,0,1865,123,1,0,0,0,1866,
        1870,5,9,0,0,1867,1869,5,5,0,0,1868,1867,1,0,0,0,1869,1872,1,0,0,
        0,1870,1868,1,0,0,0,1870,1871,1,0,0,0,1871,1875,1,0,0,0,1872,1870,
        1,0,0,0,1873,1876,3,106,53,0,1874,1876,3,124,62,0,1875,1873,1,0,
        0,0,1875,1874,1,0,0,0,1876,1880,1,0,0,0,1877,1879,5,5,0,0,1878,1877,
        1,0,0,0,1879,1882,1,0,0,0,1880,1878,1,0,0,0,1880,1881,1,0,0,0,1881,
        1883,1,0,0,0,1882,1880,1,0,0,0,1883,1884,5,10,0,0,1884,125,1,0,0,
        0,1885,1891,3,128,64,0,1886,1887,3,148,74,0,1887,1888,3,128,64,0,
        1888,1890,1,0,0,0,1889,1886,1,0,0,0,1890,1893,1,0,0,0,1891,1889,
        1,0,0,0,1891,1892,1,0,0,0,1892,1895,1,0,0,0,1893,1891,1,0,0,0,1894,
        1885,1,0,0,0,1894,1895,1,0,0,0,1895,1897,1,0,0,0,1896,1898,3,148,
        74,0,1897,1896,1,0,0,0,1897,1898,1,0,0,0,1898,127,1,0,0,0,1899,1902,
        3,130,65,0,1900,1902,3,332,166,0,1901,1899,1,0,0,0,1901,1900,1,0,
        0,0,1902,1905,1,0,0,0,1903,1901,1,0,0,0,1903,1904,1,0,0,0,1904,1910,
        1,0,0,0,1905,1903,1,0,0,0,1906,1911,3,20,10,0,1907,1911,3,144,72,
        0,1908,1911,3,136,68,0,1909,1911,3,150,75,0,1910,1906,1,0,0,0,1910,
        1907,1,0,0,0,1910,1908,1,0,0,0,1910,1909,1,0,0,0,1911,129,1,0,0,
        0,1912,1913,3,342,171,0,1913,1917,7,4,0,0,1914,1916,5,5,0,0,1915,
        1914,1,0,0,0,1916,1919,1,0,0,0,1917,1915,1,0,0,0,1917,1918,1,0,0,
        0,1918,131,1,0,0,0,1919,1917,1,0,0,0,1920,1923,3,134,67,0,1921,1923,
        3,128,64,0,1922,1920,1,0,0,0,1922,1921,1,0,0,0,1923,133,1,0,0,0,
        1924,1928,5,13,0,0,1925,1927,5,5,0,0,1926,1925,1,0,0,0,1927,1930,
        1,0,0,0,1928,1926,1,0,0,0,1928,1929,1,0,0,0,1929,1931,1,0,0,0,1930,
        1928,1,0,0,0,1931,1935,3,126,63,0,1932,1934,5,5,0,0,1933,1932,1,
        0,0,0,1934,1937,1,0,0,0,1935,1933,1,0,0,0,1935,1936,1,0,0,0,1936,
        1938,1,0,0,0,1937,1935,1,0,0,0,1938,1939,5,14,0,0,1939,135,1,0,0,
        0,1940,1944,3,138,69,0,1941,1944,3,140,70,0,1942,1944,3,142,71,0,
        1943,1940,1,0,0,0,1943,1941,1,0,0,0,1943,1942,1,0,0,0,1944,137,1,
        0,0,0,1945,1949,5,93,0,0,1946,1948,5,5,0,0,1947,1946,1,0,0,0,1948,
        1951,1,0,0,0,1949,1947,1,0,0,0,1949,1950,1,0,0,0,1950,1952,1,0,0,
        0,1951,1949,1,0,0,0,1952,1956,5,9,0,0,1953,1955,3,332,166,0,1954,
        1953,1,0,0,0,1955,1958,1,0,0,0,1956,1954,1,0,0,0,1956,1957,1,0,0,
        0,1957,1961,1,0,0,0,1958,1956,1,0,0,0,1959,1962,3,66,33,0,1960,1962,
        3,68,34,0,1961,1959,1,0,0,0,1961,1960,1,0,0,0,1962,1963,1,0,0,0,
        1963,1964,5,102,0,0,1964,1965,3,150,75,0,1965,1969,5,10,0,0,1966,
        1968,5,5,0,0,1967,1966,1,0,0,0,1968,1971,1,0,0,0,1969,1967,1,0,0,
        0,1969,1970,1,0,0,0,1970,1973,1,0,0,0,1971,1969,1,0,0,0,1972,1974,
        3,132,66,0,1973,1972,1,0,0,0,1973,1974,1,0,0,0,1974,139,1,0,0,0,
        1975,1979,5,95,0,0,1976,1978,5,5,0,0,1977,1976,1,0,0,0,1978,1981,
        1,0,0,0,1979,1977,1,0,0,0,1979,1980,1,0,0,0,1980,1982,1,0,0,0,1981,
        1979,1,0,0,0,1982,1983,5,9,0,0,1983,1984,3,150,75,0,1984,1988,5,
        10,0,0,1985,1987,5,5,0,0,1986,1985,1,0,0,0,1987,1990,1,0,0,0,1988,
        1986,1,0,0,0,1988,1989,1,0,0,0,1989,1993,1,0,0,0,1990,1988,1,0,0,
        0,1991,1994,3,132,66,0,1992,1994,5,27,0,0,1993,1991,1,0,0,0,1993,
        1992,1,0,0,0,1994,141,1,0,0,0,1995,1999,5,94,0,0,1996,1998,5,5,0,
        0,1997,1996,1,0,0,0,1998,2001,1,0,0,0,1999,1997,1,0,0,0,1999,2000,
        1,0,0,0,2000,2003,1,0,0,0,2001,1999,1,0,0,0,2002,2004,3,132,66,0,
        2003,2002,1,0,0,0,2003,2004,1,0,0,0,2004,2008,1,0,0,0,2005,2007,
        5,5,0,0,2006,2005,1,0,0,0,2007,2010,1,0,0,0,2008,2006,1,0,0,0,2008,
        2009,1,0,0,0,2009,2011,1,0,0,0,2010,2008,1,0,0,0,2011,2015,5,95,
        0,0,2012,2014,5,5,0,0,2013,2012,1,0,0,0,2014,2017,1,0,0,0,2015,2013,
        1,0,0,0,2015,2016,1,0,0,0,2016,2018,1,0,0,0,2017,2015,1,0,0,0,2018,
        2019,5,9,0,0,2019,2020,3,150,75,0,2020,2021,5,10,0,0,2021,143,1,
        0,0,0,2022,2023,3,186,93,0,2023,2024,5,28,0,0,2024,2029,1,0,0,0,
        2025,2026,3,190,95,0,2026,2027,3,272,136,0,2027,2029,1,0,0,0,2028,
        2022,1,0,0,0,2028,2025,1,0,0,0,2029,2033,1,0,0,0,2030,2032,5,5,0,
        0,2031,2030,1,0,0,0,2032,2035,1,0,0,0,2033,2031,1,0,0,0,2033,2034,
        1,0,0,0,2034,2036,1,0,0,0,2035,2033,1,0,0,0,2036,2037,3,150,75,0,
        2037,145,1,0,0,0,2038,2042,7,5,0,0,2039,2041,5,5,0,0,2040,2039,1,
        0,0,0,2041,2044,1,0,0,0,2042,2040,1,0,0,0,2042,2043,1,0,0,0,2043,
        2047,1,0,0,0,2044,2042,1,0,0,0,2045,2047,5,0,0,1,2046,2038,1,0,0,
        0,2046,2045,1,0,0,0,2047,147,1,0,0,0,2048,2050,7,5,0,0,2049,2048,
        1,0,0,0,2050,2051,1,0,0,0,2051,2049,1,0,0,0,2051,2052,1,0,0,0,2052,
        149,1,0,0,0,2053,2054,3,152,76,0,2054,151,1,0,0,0,2055,2072,3,154,
        77,0,2056,2058,5,5,0,0,2057,2056,1,0,0,0,2058,2061,1,0,0,0,2059,
        2057,1,0,0,0,2059,2060,1,0,0,0,2060,2062,1,0,0,0,2061,2059,1,0,0,
        0,2062,2066,5,23,0,0,2063,2065,5,5,0,0,2064,2063,1,0,0,0,2065,2068,
        1,0,0,0,2066,2064,1,0,0,0,2066,2067,1,0,0,0,2067,2069,1,0,0,0,2068,
        2066,1,0,0,0,2069,2071,3,154,77,0,2070,2059,1,0,0,0,2071,2074,1,
        0,0,0,2072,2070,1,0,0,0,2072,2073,1,0,0,0,2073,153,1,0,0,0,2074,
        2072,1,0,0,0,2075,2092,3,156,78,0,2076,2078,5,5,0,0,2077,2076,1,
        0,0,0,2078,2081,1,0,0,0,2079,2077,1,0,0,0,2079,2080,1,0,0,0,2080,
        2082,1,0,0,0,2081,2079,1,0,0,0,2082,2086,5,22,0,0,2083,2085,5,5,
        0,0,2084,2083,1,0,0,0,2085,2088,1,0,0,0,2086,2084,1,0,0,0,2086,2087,
        1,0,0,0,2087,2089,1,0,0,0,2088,2086,1,0,0,0,2089,2091,3,156,78,0,
        2090,2079,1,0,0,0,2091,2094,1,0,0,0,2092,2090,1,0,0,0,2092,2093,
        1,0,0,0,2093,155,1,0,0,0,2094,2092,1,0,0,0,2095,2107,3,158,79,0,
        2096,2100,3,274,137,0,2097,2099,5,5,0,0,2098,2097,1,0,0,0,2099,2102,
        1,0,0,0,2100,2098,1,0,0,0,2100,2101,1,0,0,0,2101,2103,1,0,0,0,2102,
        2100,1,0,0,0,2103,2104,3,158,79,0,2104,2106,1,0,0,0,2105,2096,1,
        0,0,0,2106,2109,1,0,0,0,2107,2105,1,0,0,0,2107,2108,1,0,0,0,2108,
        157,1,0,0,0,2109,2107,1,0,0,0,2110,2122,3,160,80,0,2111,2115,3,276,
        138,0,2112,2114,5,5,0,0,2113,2112,1,0,0,0,2114,2117,1,0,0,0,2115,
        2113,1,0,0,0,2115,2116,1,0,0,0,2116,2118,1,0,0,0,2117,2115,1,0,0,
        0,2118,2119,3,160,80,0,2119,2121,1,0,0,0,2120,2111,1,0,0,0,2121,
        2124,1,0,0,0,2122,2120,1,0,0,0,2122,2123,1,0,0,0,2123,159,1,0,0,
        0,2124,2122,1,0,0,0,2125,2129,3,162,81,0,2126,2128,3,200,100,0,2127,
        2126,1,0,0,0,2128,2131,1,0,0,0,2129,2127,1,0,0,0,2129,2130,1,0,0,
        0,2130,161,1,0,0,0,2131,2129,1,0,0,0,2132,2153,3,164,82,0,2133,2137,
        3,278,139,0,2134,2136,5,5,0,0,2135,2134,1,0,0,0,2136,2139,1,0,0,
        0,2137,2135,1,0,0,0,2137,2138,1,0,0,0,2138,2140,1,0,0,0,2139,2137,
        1,0,0,0,2140,2141,3,164,82,0,2141,2152,1,0,0,0,2142,2146,3,280,140,
        0,2143,2145,5,5,0,0,2144,2143,1,0,0,0,2145,2148,1,0,0,0,2146,2144,
        1,0,0,0,2146,2147,1,0,0,0,2147,2149,1,0,0,0,2148,2146,1,0,0,0,2149,
        2150,3,98,49,0,2150,2152,1,0,0,0,2151,2133,1,0,0,0,2151,2142,1,0,
        0,0,2152,2155,1,0,0,0,2153,2151,1,0,0,0,2153,2154,1,0,0,0,2154,163,
        1,0,0,0,2155,2153,1,0,0,0,2156,2174,3,168,84,0,2157,2159,5,5,0,0,
        2158,2157,1,0,0,0,2159,2162,1,0,0,0,2160,2158,1,0,0,0,2160,2161,
        1,0,0,0,2161,2163,1,0,0,0,2162,2160,1,0,0,0,2163,2167,3,166,83,0,
        2164,2166,5,5,0,0,2165,2164,1,0,0,0,2166,2169,1,0,0,0,2167,2165,
        1,0,0,0,2167,2168,1,0,0,0,2168,2170,1,0,0,0,2169,2167,1,0,0,0,2170,
        2171,3,168,84,0,2171,2173,1,0,0,0,2172,2160,1,0,0,0,2173,2176,1,
        0,0,0,2174,2172,1,0,0,0,2174,2175,1,0,0,0,2175,165,1,0,0,0,2176,
        2174,1,0,0,0,2177,2178,5,45,0,0,2178,2179,5,26,0,0,2179,167,1,0,
        0,0,2180,2192,3,170,85,0,2181,2185,3,342,171,0,2182,2184,5,5,0,0,
        2183,2182,1,0,0,0,2184,2187,1,0,0,0,2185,2183,1,0,0,0,2185,2186,
        1,0,0,0,2186,2188,1,0,0,0,2187,2185,1,0,0,0,2188,2189,3,170,85,0,
        2189,2191,1,0,0,0,2190,2181,1,0,0,0,2191,2194,1,0,0,0,2192,2190,
        1,0,0,0,2192,2193,1,0,0,0,2193,169,1,0,0,0,2194,2192,1,0,0,0,2195,
        2206,3,172,86,0,2196,2200,5,36,0,0,2197,2199,5,5,0,0,2198,2197,1,
        0,0,0,2199,2202,1,0,0,0,2200,2198,1,0,0,0,2200,2201,1,0,0,0,2201,
        2203,1,0,0,0,2202,2200,1,0,0,0,2203,2205,3,172,86,0,2204,2196,1,
        0,0,0,2205,2208,1,0,0,0,2206,2204,1,0,0,0,2206,2207,1,0,0,0,2207,
        171,1,0,0,0,2208,2206,1,0,0,0,2209,2221,3,174,87,0,2210,2214,3,282,
        141,0,2211,2213,5,5,0,0,2212,2211,1,0,0,0,2213,2216,1,0,0,0,2214,
        2212,1,0,0,0,2214,2215,1,0,0,0,2215,2217,1,0,0,0,2216,2214,1,0,0,
        0,2217,2218,3,174,87,0,2218,2220,1,0,0,0,2219,2210,1,0,0,0,2220,
        2223,1,0,0,0,2221,2219,1,0,0,0,2221,2222,1,0,0,0,2222,173,1,0,0,
        0,2223,2221,1,0,0,0,2224,2236,3,176,88,0,2225,2229,3,284,142,0,2226,
        2228,5,5,0,0,2227,2226,1,0,0,0,2228,2231,1,0,0,0,2229,2227,1,0,0,
        0,2229,2230,1,0,0,0,2230,2232,1,0,0,0,2231,2229,1,0,0,0,2232,2233,
        3,176,88,0,2233,2235,1,0,0,0,2234,2225,1,0,0,0,2235,2238,1,0,0,0,
        2236,2234,1,0,0,0,2236,2237,1,0,0,0,2237,175,1,0,0,0,2238,2236,1,
        0,0,0,2239,2257,3,178,89,0,2240,2242,5,5,0,0,2241,2240,1,0,0,0,2242,
        2245,1,0,0,0,2243,2241,1,0,0,0,2243,2244,1,0,0,0,2244,2246,1,0,0,
        0,2245,2243,1,0,0,0,2246,2250,3,286,143,0,2247,2249,5,5,0,0,2248,
        2247,1,0,0,0,2249,2252,1,0,0,0,2250,2248,1,0,0,0,2250,2251,1,0,0,
        0,2251,2253,1,0,0,0,2252,2250,1,0,0,0,2253,2254,3,98,49,0,2254,2256,
        1,0,0,0,2255,2243,1,0,0,0,2256,2259,1,0,0,0,2257,2255,1,0,0,0,2257,
        2258,1,0,0,0,2258,177,1,0,0,0,2259,2257,1,0,0,0,2260,2262,3,180,
        90,0,2261,2260,1,0,0,0,2262,2265,1,0,0,0,2263,2261,1,0,0,0,2263,
        2264,1,0,0,0,2264,2266,1,0,0,0,2265,2263,1,0,0,0,2266,2267,3,182,
        91,0,2267,179,1,0,0,0,2268,2278,3,332,166,0,2269,2278,3,130,65,0,
        2270,2274,3,288,144,0,2271,2273,5,5,0,0,2272,2271,1,0,0,0,2273,2276,
        1,0,0,0,2274,2272,1,0,0,0,2274,2275,1,0,0,0,2275,2278,1,0,0,0,2276,
        2274,1,0,0,0,2277,2268,1,0,0,0,2277,2269,1,0,0,0,2277,2270,1,0,0,
        0,2278,181,1,0,0,0,2279,2283,3,210,105,0,2280,2282,3,184,92,0,2281,
        2280,1,0,0,0,2282,2285,1,0,0,0,2283,2281,1,0,0,0,2283,2284,1,0,0,
        0,2284,183,1,0,0,0,2285,2283,1,0,0,0,2286,2292,3,290,145,0,2287,
        2292,3,204,102,0,2288,2292,3,200,100,0,2289,2292,3,196,98,0,2290,
        2292,3,198,99,0,2291,2286,1,0,0,0,2291,2287,1,0,0,0,2291,2288,1,
        0,0,0,2291,2289,1,0,0,0,2291,2290,1,0,0,0,2292,185,1,0,0,0,2293,
        2294,3,182,91,0,2294,2295,3,194,97,0,2295,2299,1,0,0,0,2296,2299,
        3,342,171,0,2297,2299,3,188,94,0,2298,2293,1,0,0,0,2298,2296,1,0,
        0,0,2298,2297,1,0,0,0,2299,187,1,0,0,0,2300,2304,5,9,0,0,2301,2303,
        5,5,0,0,2302,2301,1,0,0,0,2303,2306,1,0,0,0,2304,2302,1,0,0,0,2304,
        2305,1,0,0,0,2305,2307,1,0,0,0,2306,2304,1,0,0,0,2307,2311,3,186,
        93,0,2308,2310,5,5,0,0,2309,2308,1,0,0,0,2310,2313,1,0,0,0,2311,
        2309,1,0,0,0,2311,2312,1,0,0,0,2312,2314,1,0,0,0,2313,2311,1,0,0,
        0,2314,2315,5,10,0,0,2315,189,1,0,0,0,2316,2319,3,178,89,0,2317,
        2319,3,192,96,0,2318,2316,1,0,0,0,2318,2317,1,0,0,0,2319,191,1,0,
        0,0,2320,2324,5,9,0,0,2321,2323,5,5,0,0,2322,2321,1,0,0,0,2323,2326,
        1,0,0,0,2324,2322,1,0,0,0,2324,2325,1,0,0,0,2325,2327,1,0,0,0,2326,
        2324,1,0,0,0,2327,2331,3,190,95,0,2328,2330,5,5,0,0,2329,2328,1,
        0,0,0,2330,2333,1,0,0,0,2331,2329,1,0,0,0,2331,2332,1,0,0,0,2332,
        2334,1,0,0,0,2333,2331,1,0,0,0,2334,2335,5,10,0,0,2335,193,1,0,0,
        0,2336,2340,3,204,102,0,2337,2340,3,196,98,0,2338,2340,3,198,99,
        0,2339,2336,1,0,0,0,2339,2337,1,0,0,0,2339,2338,1,0,0,0,2340,195,
        1,0,0,0,2341,2345,5,11,0,0,2342,2344,5,5,0,0,2343,2342,1,0,0,0,2344,
        2347,1,0,0,0,2345,2343,1,0,0,0,2345,2346,1,0,0,0,2346,2348,1,0,0,
        0,2347,2345,1,0,0,0,2348,2365,3,150,75,0,2349,2351,5,5,0,0,2350,
        2349,1,0,0,0,2351,2354,1,0,0,0,2352,2350,1,0,0,0,2352,2353,1,0,0,
        0,2353,2355,1,0,0,0,2354,2352,1,0,0,0,2355,2359,5,8,0,0,2356,2358,
        5,5,0,0,2357,2356,1,0,0,0,2358,2361,1,0,0,0,2359,2357,1,0,0,0,2359,
        2360,1,0,0,0,2360,2362,1,0,0,0,2361,2359,1,0,0,0,2362,2364,3,150,
        75,0,2363,2352,1,0,0,0,2364,2367,1,0,0,0,2365,2363,1,0,0,0,2365,
        2366,1,0,0,0,2366,2375,1,0,0,0,2367,2365,1,0,0,0,2368,2370,5,5,0,
        0,2369,2368,1,0,0,0,2370,2373,1,0,0,0,2371,2369,1,0,0,0,2371,2372,
        1,0,0,0,2372,2374,1,0,0,0,2373,2371,1,0,0,0,2374,2376,5,8,0,0,2375,
        2371,1,0,0,0,2375,2376,1,0,0,0,2376,2380,1,0,0,0,2377,2379,5,5,0,
        0,2378,2377,1,0,0,0,2379,2382,1,0,0,0,2380,2378,1,0,0,0,2380,2381,
        1,0,0,0,2381,2383,1,0,0,0,2382,2380,1,0,0,0,2383,2384,5,12,0,0,2384,
        197,1,0,0,0,2385,2389,3,294,147,0,2386,2388,5,5,0,0,2387,2386,1,
        0,0,0,2388,2391,1,0,0,0,2389,2387,1,0,0,0,2389,2390,1,0,0,0,2390,
        2395,1,0,0,0,2391,2389,1,0,0,0,2392,2396,3,342,171,0,2393,2396,3,
        212,106,0,2394,2396,5,72,0,0,2395,2392,1,0,0,0,2395,2393,1,0,0,0,
        2395,2394,1,0,0,0,2396,199,1,0,0,0,2397,2399,3,204,102,0,2398,2397,
        1,0,0,0,2398,2399,1,0,0,0,2399,2405,1,0,0,0,2400,2402,3,206,103,
        0,2401,2400,1,0,0,0,2401,2402,1,0,0,0,2402,2403,1,0,0,0,2403,2406,
        3,202,101,0,2404,2406,3,206,103,0,2405,2401,1,0,0,0,2405,2404,1,
        0,0,0,2406,201,1,0,0,0,2407,2409,3,332,166,0,2408,2407,1,0,0,0,2409,
        2412,1,0,0,0,2410,2408,1,0,0,0,2410,2411,1,0,0,0,2411,2414,1,0,0,
        0,2412,2410,1,0,0,0,2413,2415,3,130,65,0,2414,2413,1,0,0,0,2414,
        2415,1,0,0,0,2415,2419,1,0,0,0,2416,2418,5,5,0,0,2417,2416,1,0,0,
        0,2418,2421,1,0,0,0,2419,2417,1,0,0,0,2419,2420,1,0,0,0,2420,2422,
        1,0,0,0,2421,2419,1,0,0,0,2422,2423,3,232,116,0,2423,203,1,0,0,0,
        2424,2428,5,46,0,0,2425,2427,5,5,0,0,2426,2425,1,0,0,0,2427,2430,
        1,0,0,0,2428,2426,1,0,0,0,2428,2429,1,0,0,0,2429,2431,1,0,0,0,2430,
        2428,1,0,0,0,2431,2448,3,110,55,0,2432,2434,5,5,0,0,2433,2432,1,
        0,0,0,2434,2437,1,0,0,0,2435,2433,1,0,0,0,2435,2436,1,0,0,0,2436,
        2438,1,0,0,0,2437,2435,1,0,0,0,2438,2442,5,8,0,0,2439,2441,5,5,0,
        0,2440,2439,1,0,0,0,2441,2444,1,0,0,0,2442,2440,1,0,0,0,2442,2443,
        1,0,0,0,2443,2445,1,0,0,0,2444,2442,1,0,0,0,2445,2447,3,110,55,0,
        2446,2435,1,0,0,0,2447,2450,1,0,0,0,2448,2446,1,0,0,0,2448,2449,
        1,0,0,0,2449,2458,1,0,0,0,2450,2448,1,0,0,0,2451,2453,5,5,0,0,2452,
        2451,1,0,0,0,2453,2456,1,0,0,0,2454,2452,1,0,0,0,2454,2455,1,0,0,
        0,2455,2457,1,0,0,0,2456,2454,1,0,0,0,2457,2459,5,8,0,0,2458,2454,
        1,0,0,0,2458,2459,1,0,0,0,2459,2463,1,0,0,0,2460,2462,5,5,0,0,2461,
        2460,1,0,0,0,2462,2465,1,0,0,0,2463,2461,1,0,0,0,2463,2464,1,0,0,
        0,2464,2466,1,0,0,0,2465,2463,1,0,0,0,2466,2467,5,47,0,0,2467,205,
        1,0,0,0,2468,2472,5,9,0,0,2469,2471,5,5,0,0,2470,2469,1,0,0,0,2471,
        2474,1,0,0,0,2472,2470,1,0,0,0,2472,2473,1,0,0,0,2473,2510,1,0,0,
        0,2474,2472,1,0,0,0,2475,2492,3,208,104,0,2476,2478,5,5,0,0,2477,
        2476,1,0,0,0,2478,2481,1,0,0,0,2479,2477,1,0,0,0,2479,2480,1,0,0,
        0,2480,2482,1,0,0,0,2481,2479,1,0,0,0,2482,2486,5,8,0,0,2483,2485,
        5,5,0,0,2484,2483,1,0,0,0,2485,2488,1,0,0,0,2486,2484,1,0,0,0,2486,
        2487,1,0,0,0,2487,2489,1,0,0,0,2488,2486,1,0,0,0,2489,2491,3,208,
        104,0,2490,2479,1,0,0,0,2491,2494,1,0,0,0,2492,2490,1,0,0,0,2492,
        2493,1,0,0,0,2493,2502,1,0,0,0,2494,2492,1,0,0,0,2495,2497,5,5,0,
        0,2496,2495,1,0,0,0,2497,2500,1,0,0,0,2498,2496,1,0,0,0,2498,2499,
        1,0,0,0,2499,2501,1,0,0,0,2500,2498,1,0,0,0,2501,2503,5,8,0,0,2502,
        2498,1,0,0,0,2502,2503,1,0,0,0,2503,2507,1,0,0,0,2504,2506,5,5,0,
        0,2505,2504,1,0,0,0,2506,2509,1,0,0,0,2507,2505,1,0,0,0,2507,2508,
        1,0,0,0,2508,2511,1,0,0,0,2509,2507,1,0,0,0,2510,2475,1,0,0,0,2510,
        2511,1,0,0,0,2511,2512,1,0,0,0,2512,2513,5,10,0,0,2513,207,1,0,0,
        0,2514,2516,3,332,166,0,2515,2514,1,0,0,0,2515,2516,1,0,0,0,2516,
        2520,1,0,0,0,2517,2519,5,5,0,0,2518,2517,1,0,0,0,2519,2522,1,0,0,
        0,2520,2518,1,0,0,0,2520,2521,1,0,0,0,2521,2537,1,0,0,0,2522,2520,
        1,0,0,0,2523,2527,3,342,171,0,2524,2526,5,5,0,0,2525,2524,1,0,0,
        0,2526,2529,1,0,0,0,2527,2525,1,0,0,0,2527,2528,1,0,0,0,2528,2530,
        1,0,0,0,2529,2527,1,0,0,0,2530,2534,5,28,0,0,2531,2533,5,5,0,0,2532,
        2531,1,0,0,0,2533,2536,1,0,0,0,2534,2532,1,0,0,0,2534,2535,1,0,0,
        0,2535,2538,1,0,0,0,2536,2534,1,0,0,0,2537,2523,1,0,0,0,2537,2538,
        1,0,0,0,2538,2540,1,0,0,0,2539,2541,5,15,0,0,2540,2539,1,0,0,0,2540,
        2541,1,0,0,0,2541,2545,1,0,0,0,2542,2544,5,5,0,0,2543,2542,1,0,0,
        0,2544,2547,1,0,0,0,2545,2543,1,0,0,0,2545,2546,1,0,0,0,2546,2548,
        1,0,0,0,2547,2545,1,0,0,0,2548,2549,3,150,75,0,2549,209,1,0,0,0,
        2550,2565,3,212,106,0,2551,2565,3,342,171,0,2552,2565,3,216,108,
        0,2553,2565,3,218,109,0,2554,2565,3,270,135,0,2555,2565,3,240,120,
        0,2556,2565,3,242,121,0,2557,2565,3,214,107,0,2558,2565,3,244,122,
        0,2559,2565,3,246,123,0,2560,2565,3,248,124,0,2561,2565,3,252,126,
        0,2562,2565,3,262,131,0,2563,2565,3,268,134,0,2564,2550,1,0,0,0,
        2564,2551,1,0,0,0,2564,2552,1,0,0,0,2564,2553,1,0,0,0,2564,2554,
        1,0,0,0,2564,2555,1,0,0,0,2564,2556,1,0,0,0,2564,2557,1,0,0,0,2564,
        2558,1,0,0,0,2564,2559,1,0,0,0,2564,2560,1,0,0,0,2564,2561,1,0,0,
        0,2564,2562,1,0,0,0,2564,2563,1,0,0,0,2565,211,1,0,0,0,2566,2570,
        5,9,0,0,2567,2569,5,5,0,0,2568,2567,1,0,0,0,2569,2572,1,0,0,0,2570,
        2568,1,0,0,0,2570,2571,1,0,0,0,2571,2573,1,0,0,0,2572,2570,1,0,0,
        0,2573,2577,3,150,75,0,2574,2576,5,5,0,0,2575,2574,1,0,0,0,2576,
        2579,1,0,0,0,2577,2575,1,0,0,0,2577,2578,1,0,0,0,2578,2580,1,0,0,
        0,2579,2577,1,0,0,0,2580,2581,5,10,0,0,2581,213,1,0,0,0,2582,2586,
        5,11,0,0,2583,2585,5,5,0,0,2584,2583,1,0,0,0,2585,2588,1,0,0,0,2586,
        2584,1,0,0,0,2586,2587,1,0,0,0,2587,2624,1,0,0,0,2588,2586,1,0,0,
        0,2589,2606,3,150,75,0,2590,2592,5,5,0,0,2591,2590,1,0,0,0,2592,
        2595,1,0,0,0,2593,2591,1,0,0,0,2593,2594,1,0,0,0,2594,2596,1,0,0,
        0,2595,2593,1,0,0,0,2596,2600,5,8,0,0,2597,2599,5,5,0,0,2598,2597,
        1,0,0,0,2599,2602,1,0,0,0,2600,2598,1,0,0,0,2600,2601,1,0,0,0,2601,
        2603,1,0,0,0,2602,2600,1,0,0,0,2603,2605,3,150,75,0,2604,2593,1,
        0,0,0,2605,2608,1,0,0,0,2606,2604,1,0,0,0,2606,2607,1,0,0,0,2607,
        2616,1,0,0,0,2608,2606,1,0,0,0,2609,2611,5,5,0,0,2610,2609,1,0,0,
        0,2611,2614,1,0,0,0,2612,2610,1,0,0,0,2612,2613,1,0,0,0,2613,2615,
        1,0,0,0,2614,2612,1,0,0,0,2615,2617,5,8,0,0,2616,2612,1,0,0,0,2616,
        2617,1,0,0,0,2617,2621,1,0,0,0,2618,2620,5,5,0,0,2619,2618,1,0,0,
        0,2620,2623,1,0,0,0,2621,2619,1,0,0,0,2621,2622,1,0,0,0,2622,2625,
        1,0,0,0,2623,2621,1,0,0,0,2624,2589,1,0,0,0,2624,2625,1,0,0,0,2625,
        2626,1,0,0,0,2626,2627,5,12,0,0,2627,215,1,0,0,0,2628,2629,7,6,0,
        0,2629,217,1,0,0,0,2630,2633,3,220,110,0,2631,2633,3,222,111,0,2632,
        2630,1,0,0,0,2632,2631,1,0,0,0,2633,219,1,0,0,0,2634,2639,5,149,
        0,0,2635,2638,3,224,112,0,2636,2638,3,226,113,0,2637,2635,1,0,0,
        0,2637,2636,1,0,0,0,2638,2641,1,0,0,0,2639,2637,1,0,0,0,2639,2640,
        1,0,0,0,2640,2642,1,0,0,0,2641,2639,1,0,0,0,2642,2643,5,158,0,0,
        2643,221,1,0,0,0,2644,2650,5,150,0,0,2645,2649,3,228,114,0,2646,
        2649,3,230,115,0,2647,2649,5,164,0,0,2648,2645,1,0,0,0,2648,2646,
        1,0,0,0,2648,2647,1,0,0,0,2649,2652,1,0,0,0,2650,2648,1,0,0,0,2650,
        2651,1,0,0,0,2651,2653,1,0,0,0,2652,2650,1,0,0,0,2653,2654,5,163,
        0,0,2654,223,1,0,0,0,2655,2656,7,7,0,0,2656,225,1,0,0,0,2657,2661,
        5,162,0,0,2658,2660,5,5,0,0,2659,2658,1,0,0,0,2660,2663,1,0,0,0,
        2661,2659,1,0,0,0,2661,2662,1,0,0,0,2662,2664,1,0,0,0,2663,2661,
        1,0,0,0,2664,2668,3,150,75,0,2665,2667,5,5,0,0,2666,2665,1,0,0,0,
        2667,2670,1,0,0,0,2668,2666,1,0,0,0,2668,2669,1,0,0,0,2669,2671,
        1,0,0,0,2670,2668,1,0,0,0,2671,2672,5,14,0,0,2672,227,1,0,0,0,2673,
        2674,7,8,0,0,2674,229,1,0,0,0,2675,2679,5,167,0,0,2676,2678,5,5,
        0,0,2677,2676,1,0,0,0,2678,2681,1,0,0,0,2679,2677,1,0,0,0,2679,2680,
        1,0,0,0,2680,2682,1,0,0,0,2681,2679,1,0,0,0,2682,2686,3,150,75,0,
        2683,2685,5,5,0,0,2684,2683,1,0,0,0,2685,2688,1,0,0,0,2686,2684,
        1,0,0,0,2686,2687,1,0,0,0,2687,2689,1,0,0,0,2688,2686,1,0,0,0,2689,
        2690,5,14,0,0,2690,231,1,0,0,0,2691,2695,5,13,0,0,2692,2694,5,5,
        0,0,2693,2692,1,0,0,0,2694,2697,1,0,0,0,2695,2693,1,0,0,0,2695,2696,
        1,0,0,0,2696,2714,1,0,0,0,2697,2695,1,0,0,0,2698,2700,3,234,117,
        0,2699,2698,1,0,0,0,2699,2700,1,0,0,0,2700,2704,1,0,0,0,2701,2703,
        5,5,0,0,2702,2701,1,0,0,0,2703,2706,1,0,0,0,2704,2702,1,0,0,0,2704,
        2705,1,0,0,0,2705,2707,1,0,0,0,2706,2704,1,0,0,0,2707,2711,5,34,
        0,0,2708,2710,5,5,0,0,2709,2708,1,0,0,0,2710,2713,1,0,0,0,2711,2709,
        1,0,0,0,2711,2712,1,0,0,0,2712,2715,1,0,0,0,2713,2711,1,0,0,0,2714,
        2699,1,0,0,0,2714,2715,1,0,0,0,2715,2716,1,0,0,0,2716,2720,3,126,
        63,0,2717,2719,5,5,0,0,2718,2717,1,0,0,0,2719,2722,1,0,0,0,2720,
        2718,1,0,0,0,2720,2721,1,0,0,0,2721,2723,1,0,0,0,2722,2720,1,0,0,
        0,2723,2724,5,14,0,0,2724,233,1,0,0,0,2725,2742,3,236,118,0,2726,
        2728,5,5,0,0,2727,2726,1,0,0,0,2728,2731,1,0,0,0,2729,2727,1,0,0,
        0,2729,2730,1,0,0,0,2730,2732,1,0,0,0,2731,2729,1,0,0,0,2732,2736,
        5,8,0,0,2733,2735,5,5,0,0,2734,2733,1,0,0,0,2735,2738,1,0,0,0,2736,
        2734,1,0,0,0,2736,2737,1,0,0,0,2737,2739,1,0,0,0,2738,2736,1,0,0,
        0,2739,2741,3,236,118,0,2740,2729,1,0,0,0,2741,2744,1,0,0,0,2742,
        2740,1,0,0,0,2742,2743,1,0,0,0,2743,2752,1,0,0,0,2744,2742,1,0,0,
        0,2745,2747,5,5,0,0,2746,2745,1,0,0,0,2747,2750,1,0,0,0,2748,2746,
        1,0,0,0,2748,2749,1,0,0,0,2749,2751,1,0,0,0,2750,2748,1,0,0,0,2751,
        2753,5,8,0,0,2752,2748,1,0,0,0,2752,2753,1,0,0,0,2753,235,1,0,0,
        0,2754,2773,3,66,33,0,2755,2770,3,68,34,0,2756,2758,5,5,0,0,2757,
        2756,1,0,0,0,2758,2761,1,0,0,0,2759,2757,1,0,0,0,2759,2760,1,0,0,
        0,2760,2762,1,0,0,0,2761,2759,1,0,0,0,2762,2766,5,26,0,0,2763,2765,
        5,5,0,0,2764,2763,1,0,0,0,2765,2768,1,0,0,0,2766,2764,1,0,0,0,2766,
        2767,1,0,0,0,2767,2769,1,0,0,0,2768,2766,1,0,0,0,2769,2771,3,98,
        49,0,2770,2759,1,0,0,0,2770,2771,1,0,0,0,2771,2773,1,0,0,0,2772,
        2754,1,0,0,0,2772,2755,1,0,0,0,2773,237,1,0,0,0,2774,2790,5,74,0,
        0,2775,2777,5,5,0,0,2776,2775,1,0,0,0,2777,2780,1,0,0,0,2778,2776,
        1,0,0,0,2778,2779,1,0,0,0,2779,2781,1,0,0,0,2780,2778,1,0,0,0,2781,
        2785,3,98,49,0,2782,2784,5,5,0,0,2783,2782,1,0,0,0,2784,2787,1,0,
        0,0,2785,2783,1,0,0,0,2785,2786,1,0,0,0,2786,2788,1,0,0,0,2787,2785,
        1,0,0,0,2788,2789,5,7,0,0,2789,2791,1,0,0,0,2790,2778,1,0,0,0,2790,
        2791,1,0,0,0,2791,2795,1,0,0,0,2792,2794,5,5,0,0,2793,2792,1,0,0,
        0,2794,2797,1,0,0,0,2795,2793,1,0,0,0,2795,2796,1,0,0,0,2796,2798,
        1,0,0,0,2797,2795,1,0,0,0,2798,2813,3,78,39,0,2799,2801,5,5,0,0,
        2800,2799,1,0,0,0,2801,2804,1,0,0,0,2802,2800,1,0,0,0,2802,2803,
        1,0,0,0,2803,2805,1,0,0,0,2804,2802,1,0,0,0,2805,2809,5,26,0,0,2806,
        2808,5,5,0,0,2807,2806,1,0,0,0,2808,2811,1,0,0,0,2809,2807,1,0,0,
        0,2809,2810,1,0,0,0,2810,2812,1,0,0,0,2811,2809,1,0,0,0,2812,2814,
        3,98,49,0,2813,2802,1,0,0,0,2813,2814,1,0,0,0,2814,2822,1,0,0,0,
        2815,2817,5,5,0,0,2816,2815,1,0,0,0,2817,2820,1,0,0,0,2818,2816,
        1,0,0,0,2818,2819,1,0,0,0,2819,2821,1,0,0,0,2820,2818,1,0,0,0,2821,
        2823,3,46,23,0,2822,2818,1,0,0,0,2822,2823,1,0,0,0,2823,2831,1,0,
        0,0,2824,2826,5,5,0,0,2825,2824,1,0,0,0,2826,2829,1,0,0,0,2827,2825,
        1,0,0,0,2827,2828,1,0,0,0,2828,2830,1,0,0,0,2829,2827,1,0,0,0,2830,
        2832,3,64,32,0,2831,2827,1,0,0,0,2831,2832,1,0,0,0,2832,239,1,0,
        0,0,2833,2836,3,232,116,0,2834,2836,3,238,119,0,2835,2833,1,0,0,
        0,2835,2834,1,0,0,0,2836,241,1,0,0,0,2837,2858,5,75,0,0,2838,2840,
        5,5,0,0,2839,2838,1,0,0,0,2840,2843,1,0,0,0,2841,2839,1,0,0,0,2841,
        2842,1,0,0,0,2842,2844,1,0,0,0,2843,2841,1,0,0,0,2844,2848,5,26,
        0,0,2845,2847,5,5,0,0,2846,2845,1,0,0,0,2847,2850,1,0,0,0,2848,2846,
        1,0,0,0,2848,2849,1,0,0,0,2849,2851,1,0,0,0,2850,2848,1,0,0,0,2851,
        2855,3,32,16,0,2852,2854,5,5,0,0,2853,2852,1,0,0,0,2854,2857,1,0,
        0,0,2855,2853,1,0,0,0,2855,2856,1,0,0,0,2856,2859,1,0,0,0,2857,2855,
        1,0,0,0,2858,2841,1,0,0,0,2858,2859,1,0,0,0,2859,2867,1,0,0,0,2860,
        2862,5,5,0,0,2861,2860,1,0,0,0,2862,2865,1,0,0,0,2863,2861,1,0,0,
        0,2863,2864,1,0,0,0,2864,2866,1,0,0,0,2865,2863,1,0,0,0,2866,2868,
        3,26,13,0,2867,2863,1,0,0,0,2867,2868,1,0,0,0,2868,243,1,0,0,0,2869,
        2870,7,9,0,0,2870,245,1,0,0,0,2871,2888,5,84,0,0,2872,2876,5,46,
        0,0,2873,2875,5,5,0,0,2874,2873,1,0,0,0,2875,2878,1,0,0,0,2876,2874,
        1,0,0,0,2876,2877,1,0,0,0,2877,2879,1,0,0,0,2878,2876,1,0,0,0,2879,
        2883,3,98,49,0,2880,2882,5,5,0,0,2881,2880,1,0,0,0,2882,2885,1,0,
        0,0,2883,2881,1,0,0,0,2883,2884,1,0,0,0,2884,2886,1,0,0,0,2885,2883,
        1,0,0,0,2886,2887,5,47,0,0,2887,2889,1,0,0,0,2888,2872,1,0,0,0,2888,
        2889,1,0,0,0,2889,2892,1,0,0,0,2890,2891,5,40,0,0,2891,2893,3,342,
        171,0,2892,2890,1,0,0,0,2892,2893,1,0,0,0,2893,2896,1,0,0,0,2894,
        2896,5,60,0,0,2895,2871,1,0,0,0,2895,2894,1,0,0,0,2896,247,1,0,0,
        0,2897,2901,5,87,0,0,2898,2900,5,5,0,0,2899,2898,1,0,0,0,2900,2903,
        1,0,0,0,2901,2899,1,0,0,0,2901,2902,1,0,0,0,2902,2904,1,0,0,0,2903,
        2901,1,0,0,0,2904,2908,5,9,0,0,2905,2907,5,5,0,0,2906,2905,1,0,0,
        0,2907,2910,1,0,0,0,2908,2906,1,0,0,0,2908,2909,1,0,0,0,2909,2911,
        1,0,0,0,2910,2908,1,0,0,0,2911,2915,3,150,75,0,2912,2914,5,5,0,0,
        2913,2912,1,0,0,0,2914,2917,1,0,0,0,2915,2913,1,0,0,0,2915,2916,
        1,0,0,0,2916,2918,1,0,0,0,2917,2915,1,0,0,0,2918,2922,5,10,0,0,2919,
        2921,5,5,0,0,2920,2919,1,0,0,0,2921,2924,1,0,0,0,2922,2920,1,0,0,
        0,2922,2923,1,0,0,0,2923,2956,1,0,0,0,2924,2922,1,0,0,0,2925,2957,
        3,132,66,0,2926,2928,3,132,66,0,2927,2926,1,0,0,0,2927,2928,1,0,
        0,0,2928,2932,1,0,0,0,2929,2931,5,5,0,0,2930,2929,1,0,0,0,2931,2934,
        1,0,0,0,2932,2930,1,0,0,0,2932,2933,1,0,0,0,2933,2936,1,0,0,0,2934,
        2932,1,0,0,0,2935,2937,5,27,0,0,2936,2935,1,0,0,0,2936,2937,1,0,
        0,0,2937,2941,1,0,0,0,2938,2940,5,5,0,0,2939,2938,1,0,0,0,2940,2943,
        1,0,0,0,2941,2939,1,0,0,0,2941,2942,1,0,0,0,2942,2944,1,0,0,0,2943,
        2941,1,0,0,0,2944,2948,5,88,0,0,2945,2947,5,5,0,0,2946,2945,1,0,
        0,0,2947,2950,1,0,0,0,2948,2946,1,0,0,0,2948,2949,1,0,0,0,2949,2953,
        1,0,0,0,2950,2948,1,0,0,0,2951,2954,3,132,66,0,2952,2954,5,27,0,
        0,2953,2951,1,0,0,0,2953,2952,1,0,0,0,2954,2957,1,0,0,0,2955,2957,
        5,27,0,0,2956,2925,1,0,0,0,2956,2927,1,0,0,0,2956,2955,1,0,0,0,2957,
        249,1,0,0,0,2958,2992,5,9,0,0,2959,2961,3,332,166,0,2960,2959,1,
        0,0,0,2961,2964,1,0,0,0,2962,2960,1,0,0,0,2962,2963,1,0,0,0,2963,
        2968,1,0,0,0,2964,2962,1,0,0,0,2965,2967,5,5,0,0,2966,2965,1,0,0,
        0,2967,2970,1,0,0,0,2968,2966,1,0,0,0,2968,2969,1,0,0,0,2969,2971,
        1,0,0,0,2970,2968,1,0,0,0,2971,2975,5,76,0,0,2972,2974,5,5,0,0,2973,
        2972,1,0,0,0,2974,2977,1,0,0,0,2975,2973,1,0,0,0,2975,2976,1,0,0,
        0,2976,2978,1,0,0,0,2977,2975,1,0,0,0,2978,2982,3,66,33,0,2979,2981,
        5,5,0,0,2980,2979,1,0,0,0,2981,2984,1,0,0,0,2982,2980,1,0,0,0,2982,
        2983,1,0,0,0,2983,2985,1,0,0,0,2984,2982,1,0,0,0,2985,2989,5,28,
        0,0,2986,2988,5,5,0,0,2987,2986,1,0,0,0,2988,2991,1,0,0,0,2989,2987,
        1,0,0,0,2989,2990,1,0,0,0,2990,2993,1,0,0,0,2991,2989,1,0,0,0,2992,
        2962,1,0,0,0,2992,2993,1,0,0,0,2993,2994,1,0,0,0,2994,2995,3,150,
        75,0,2995,2996,5,10,0,0,2996,251,1,0,0,0,2997,3001,5,89,0,0,2998,
        3000,5,5,0,0,2999,2998,1,0,0,0,3000,3003,1,0,0,0,3001,2999,1,0,0,
        0,3001,3002,1,0,0,0,3002,3005,1,0,0,0,3003,3001,1,0,0,0,3004,3006,
        3,250,125,0,3005,3004,1,0,0,0,3005,3006,1,0,0,0,3006,3010,1,0,0,
        0,3007,3009,5,5,0,0,3008,3007,1,0,0,0,3009,3012,1,0,0,0,3010,3008,
        1,0,0,0,3010,3011,1,0,0,0,3011,3013,1,0,0,0,3012,3010,1,0,0,0,3013,
        3017,5,13,0,0,3014,3016,5,5,0,0,3015,3014,1,0,0,0,3016,3019,1,0,
        0,0,3017,3015,1,0,0,0,3017,3018,1,0,0,0,3018,3029,1,0,0,0,3019,3017,
        1,0,0,0,3020,3024,3,254,127,0,3021,3023,5,5,0,0,3022,3021,1,0,0,
        0,3023,3026,1,0,0,0,3024,3022,1,0,0,0,3024,3025,1,0,0,0,3025,3028,
        1,0,0,0,3026,3024,1,0,0,0,3027,3020,1,0,0,0,3028,3031,1,0,0,0,3029,
        3027,1,0,0,0,3029,3030,1,0,0,0,3030,3035,1,0,0,0,3031,3029,1,0,0,
        0,3032,3034,5,5,0,0,3033,3032,1,0,0,0,3034,3037,1,0,0,0,3035,3033,
        1,0,0,0,3035,3036,1,0,0,0,3036,3038,1,0,0,0,3037,3035,1,0,0,0,3038,
        3039,5,14,0,0,3039,253,1,0,0,0,3040,3057,3,256,128,0,3041,3043,5,
        5,0,0,3042,3041,1,0,0,0,3043,3046,1,0,0,0,3044,3042,1,0,0,0,3044,
        3045,1,0,0,0,3045,3047,1,0,0,0,3046,3044,1,0,0,0,3047,3051,5,8,0,
        0,3048,3050,5,5,0,0,3049,3048,1,0,0,0,3050,3053,1,0,0,0,3051,3049,
        1,0,0,0,3051,3052,1,0,0,0,3052,3054,1,0,0,0,3053,3051,1,0,0,0,3054,
        3056,3,256,128,0,3055,3044,1,0,0,0,3056,3059,1,0,0,0,3057,3055,1,
        0,0,0,3057,3058,1,0,0,0,3058,3067,1,0,0,0,3059,3057,1,0,0,0,3060,
        3062,5,5,0,0,3061,3060,1,0,0,0,3062,3065,1,0,0,0,3063,3061,1,0,0,
        0,3063,3064,1,0,0,0,3064,3066,1,0,0,0,3065,3063,1,0,0,0,3066,3068,
        5,8,0,0,3067,3063,1,0,0,0,3067,3068,1,0,0,0,3068,3072,1,0,0,0,3069,
        3071,5,5,0,0,3070,3069,1,0,0,0,3071,3074,1,0,0,0,3072,3070,1,0,0,
        0,3072,3073,1,0,0,0,3073,3075,1,0,0,0,3074,3072,1,0,0,0,3075,3079,
        5,34,0,0,3076,3078,5,5,0,0,3077,3076,1,0,0,0,3078,3081,1,0,0,0,3079,
        3077,1,0,0,0,3079,3080,1,0,0,0,3080,3082,1,0,0,0,3081,3079,1,0,0,
        0,3082,3084,3,132,66,0,3083,3085,3,146,73,0,3084,3083,1,0,0,0,3084,
        3085,1,0,0,0,3085,3105,1,0,0,0,3086,3090,5,88,0,0,3087,3089,5,5,
        0,0,3088,3087,1,0,0,0,3089,3092,1,0,0,0,3090,3088,1,0,0,0,3090,3091,
        1,0,0,0,3091,3093,1,0,0,0,3092,3090,1,0,0,0,3093,3097,5,34,0,0,3094,
        3096,5,5,0,0,3095,3094,1,0,0,0,3096,3099,1,0,0,0,3097,3095,1,0,0,
        0,3097,3098,1,0,0,0,3098,3100,1,0,0,0,3099,3097,1,0,0,0,3100,3102,
        3,132,66,0,3101,3103,3,146,73,0,3102,3101,1,0,0,0,3102,3103,1,0,
        0,0,3103,3105,1,0,0,0,3104,3040,1,0,0,0,3104,3086,1,0,0,0,3105,255,
        1,0,0,0,3106,3110,3,150,75,0,3107,3110,3,258,129,0,3108,3110,3,260,
        130,0,3109,3106,1,0,0,0,3109,3107,1,0,0,0,3109,3108,1,0,0,0,3110,
        257,1,0,0,0,3111,3115,3,278,139,0,3112,3114,5,5,0,0,3113,3112,1,
        0,0,0,3114,3117,1,0,0,0,3115,3113,1,0,0,0,3115,3116,1,0,0,0,3116,
        3118,1,0,0,0,3117,3115,1,0,0,0,3118,3119,3,150,75,0,3119,259,1,0,
        0,0,3120,3124,3,280,140,0,3121,3123,5,5,0,0,3122,3121,1,0,0,0,3123,
        3126,1,0,0,0,3124,3122,1,0,0,0,3124,3125,1,0,0,0,3125,3127,1,0,0,
        0,3126,3124,1,0,0,0,3127,3128,3,98,49,0,3128,261,1,0,0,0,3129,3133,
        5,90,0,0,3130,3132,5,5,0,0,3131,3130,1,0,0,0,3132,3135,1,0,0,0,3133,
        3131,1,0,0,0,3133,3134,1,0,0,0,3134,3136,1,0,0,0,3135,3133,1,0,0,
        0,3136,3164,3,134,67,0,3137,3139,5,5,0,0,3138,3137,1,0,0,0,3139,
        3142,1,0,0,0,3140,3138,1,0,0,0,3140,3141,1,0,0,0,3141,3143,1,0,0,
        0,3142,3140,1,0,0,0,3143,3145,3,264,132,0,3144,3140,1,0,0,0,3145,
        3146,1,0,0,0,3146,3144,1,0,0,0,3146,3147,1,0,0,0,3147,3155,1,0,0,
        0,3148,3150,5,5,0,0,3149,3148,1,0,0,0,3150,3153,1,0,0,0,3151,3149,
        1,0,0,0,3151,3152,1,0,0,0,3152,3154,1,0,0,0,3153,3151,1,0,0,0,3154,
        3156,3,266,133,0,3155,3151,1,0,0,0,3155,3156,1,0,0,0,3156,3165,1,
        0,0,0,3157,3159,5,5,0,0,3158,3157,1,0,0,0,3159,3162,1,0,0,0,3160,
        3158,1,0,0,0,3160,3161,1,0,0,0,3161,3163,1,0,0,0,3162,3160,1,0,0,
        0,3163,3165,3,266,133,0,3164,3144,1,0,0,0,3164,3160,1,0,0,0,3165,
        263,1,0,0,0,3166,3170,5,91,0,0,3167,3169,5,5,0,0,3168,3167,1,0,0,
        0,3169,3172,1,0,0,0,3170,3168,1,0,0,0,3170,3171,1,0,0,0,3171,3173,
        1,0,0,0,3172,3170,1,0,0,0,3173,3177,5,9,0,0,3174,3176,3,332,166,
        0,3175,3174,1,0,0,0,3176,3179,1,0,0,0,3177,3175,1,0,0,0,3177,3178,
        1,0,0,0,3178,3180,1,0,0,0,3179,3177,1,0,0,0,3180,3181,3,342,171,
        0,3181,3182,5,26,0,0,3182,3190,3,98,49,0,3183,3185,5,5,0,0,3184,
        3183,1,0,0,0,3185,3188,1,0,0,0,3186,3184,1,0,0,0,3186,3187,1,0,0,
        0,3187,3189,1,0,0,0,3188,3186,1,0,0,0,3189,3191,5,8,0,0,3190,3186,
        1,0,0,0,3190,3191,1,0,0,0,3191,3192,1,0,0,0,3192,3196,5,10,0,0,3193,
        3195,5,5,0,0,3194,3193,1,0,0,0,3195,3198,1,0,0,0,3196,3194,1,0,0,
        0,3196,3197,1,0,0,0,3197,3199,1,0,0,0,3198,3196,1,0,0,0,3199,3200,
        3,134,67,0,3200,265,1,0,0,0,3201,3205,5,92,0,0,3202,3204,5,5,0,0,
        3203,3202,1,0,0,0,3204,3207,1,0,0,0,3205,3203,1,0,0,0,3205,3206,
        1,0,0,0,3206,3208,1,0,0,0,3207,3205,1,0,0,0,3208,3209,3,134,67,0,
        3209,267,1,0,0,0,3210,3214,5,96,0,0,3211,3213,5,5,0,0,3212,3211,
        1,0,0,0,3213,3216,1,0,0,0,3214,3212,1,0,0,0,3214,3215,1,0,0,0,3215,
        3217,1,0,0,0,3216,3214,1,0,0,0,3217,3227,3,150,75,0,3218,3220,7,
        10,0,0,3219,3221,3,150,75,0,3220,3219,1,0,0,0,3220,3221,1,0,0,0,
        3221,3227,1,0,0,0,3222,3227,5,98,0,0,3223,3227,5,57,0,0,3224,3227,
        5,99,0,0,3225,3227,5,58,0,0,3226,3210,1,0,0,0,3226,3218,1,0,0,0,
        3226,3222,1,0,0,0,3226,3223,1,0,0,0,3226,3224,1,0,0,0,3226,3225,
        1,0,0,0,3227,269,1,0,0,0,3228,3230,3,122,61,0,3229,3228,1,0,0,0,
        3229,3230,1,0,0,0,3230,3231,1,0,0,0,3231,3235,5,37,0,0,3232,3234,
        5,5,0,0,3233,3232,1,0,0,0,3234,3237,1,0,0,0,3235,3233,1,0,0,0,3235,
        3236,1,0,0,0,3236,3240,1,0,0,0,3237,3235,1,0,0,0,3238,3241,3,342,
        171,0,3239,3241,5,72,0,0,3240,3238,1,0,0,0,3240,3239,1,0,0,0,3241,
        271,1,0,0,0,3242,3243,7,11,0,0,3243,273,1,0,0,0,3244,3245,7,12,0,
        0,3245,275,1,0,0,0,3246,3247,7,13,0,0,3247,277,1,0,0,0,3248,3249,
        7,14,0,0,3249,279,1,0,0,0,3250,3251,7,15,0,0,3251,281,1,0,0,0,3252,
        3253,7,16,0,0,3253,283,1,0,0,0,3254,3255,7,17,0,0,3255,285,1,0,0,
        0,3256,3257,7,18,0,0,3257,287,1,0,0,0,3258,3264,5,20,0,0,3259,3264,
        5,21,0,0,3260,3264,5,19,0,0,3261,3264,5,18,0,0,3262,3264,3,292,146,
        0,3263,3258,1,0,0,0,3263,3259,1,0,0,0,3263,3260,1,0,0,0,3263,3261,
        1,0,0,0,3263,3262,1,0,0,0,3264,289,1,0,0,0,3265,3270,5,20,0,0,3266,
        3270,5,21,0,0,3267,3268,5,25,0,0,3268,3270,3,292,146,0,3269,3265,
        1,0,0,0,3269,3266,1,0,0,0,3269,3267,1,0,0,0,3270,291,1,0,0,0,3271,
        3272,7,19,0,0,3272,293,1,0,0,0,3273,3275,5,5,0,0,3274,3273,1,0,0,
        0,3275,3278,1,0,0,0,3276,3274,1,0,0,0,3276,3277,1,0,0,0,3277,3279,
        1,0,0,0,3278,3276,1,0,0,0,3279,3289,5,7,0,0,3280,3282,5,5,0,0,3281,
        3280,1,0,0,0,3282,3285,1,0,0,0,3283,3281,1,0,0,0,3283,3284,1,0,0,
        0,3284,3286,1,0,0,0,3285,3283,1,0,0,0,3286,3289,3,296,148,0,3287,
        3289,5,37,0,0,3288,3276,1,0,0,0,3288,3283,1,0,0,0,3288,3287,1,0,
        0,0,3289,295,1,0,0,0,3290,3291,5,45,0,0,3291,3292,5,7,0,0,3292,297,
        1,0,0,0,3293,3296,3,332,166,0,3294,3296,3,302,151,0,3295,3293,1,
        0,0,0,3295,3294,1,0,0,0,3296,3297,1,0,0,0,3297,3295,1,0,0,0,3297,
        3298,1,0,0,0,3298,299,1,0,0,0,3299,3302,3,332,166,0,3300,3302,3,
        326,163,0,3301,3299,1,0,0,0,3301,3300,1,0,0,0,3302,3303,1,0,0,0,
        3303,3301,1,0,0,0,3303,3304,1,0,0,0,3304,301,1,0,0,0,3305,3314,3,
        308,154,0,3306,3314,3,310,155,0,3307,3314,3,312,156,0,3308,3314,
        3,320,160,0,3309,3314,3,322,161,0,3310,3314,3,324,162,0,3311,3314,
        3,326,163,0,3312,3314,3,330,165,0,3313,3305,1,0,0,0,3313,3306,1,
        0,0,0,3313,3307,1,0,0,0,3313,3308,1,0,0,0,3313,3309,1,0,0,0,3313,
        3310,1,0,0,0,3313,3311,1,0,0,0,3313,3312,1,0,0,0,3314,3318,1,0,0,
        0,3315,3317,5,5,0,0,3316,3315,1,0,0,0,3317,3320,1,0,0,0,3318,3316,
        1,0,0,0,3318,3319,1,0,0,0,3319,303,1,0,0,0,3320,3318,1,0,0,0,3321,
        3323,3,306,153,0,3322,3321,1,0,0,0,3323,3324,1,0,0,0,3324,3322,1,
        0,0,0,3324,3325,1,0,0,0,3325,305,1,0,0,0,3326,3335,3,332,166,0,3327,
        3331,5,122,0,0,3328,3330,5,5,0,0,3329,3328,1,0,0,0,3330,3333,1,0,
        0,0,3331,3329,1,0,0,0,3331,3332,1,0,0,0,3332,3335,1,0,0,0,3333,3331,
        1,0,0,0,3334,3326,1,0,0,0,3334,3327,1,0,0,0,3335,307,1,0,0,0,3336,
        3337,7,20,0,0,3337,309,1,0,0,0,3338,3339,7,21,0,0,3339,311,1,0,0,
        0,3340,3341,7,22,0,0,3341,313,1,0,0,0,3342,3343,7,23,0,0,3343,315,
        1,0,0,0,3344,3346,3,318,159,0,3345,3344,1,0,0,0,3346,3347,1,0,0,
        0,3347,3345,1,0,0,0,3347,3348,1,0,0,0,3348,317,1,0,0,0,3349,3353,
        3,328,164,0,3350,3352,5,5,0,0,3351,3350,1,0,0,0,3352,3355,1,0,0,
        0,3353,3351,1,0,0,0,3353,3354,1,0,0,0,3354,3365,1,0,0,0,3355,3353,
        1,0,0,0,3356,3360,3,314,157,0,3357,3359,5,5,0,0,3358,3357,1,0,0,
        0,3359,3362,1,0,0,0,3360,3358,1,0,0,0,3360,3361,1,0,0,0,3361,3365,
        1,0,0,0,3362,3360,1,0,0,0,3363,3365,3,332,166,0,3364,3349,1,0,0,
        0,3364,3356,1,0,0,0,3364,3363,1,0,0,0,3365,319,1,0,0,0,3366,3367,
        7,24,0,0,3367,321,1,0,0,0,3368,3369,5,127,0,0,3369,323,1,0,0,0,3370,
        3371,7,25,0,0,3371,325,1,0,0,0,3372,3373,7,26,0,0,3373,327,1,0,0,
        0,3374,3375,5,132,0,0,3375,329,1,0,0,0,3376,3377,7,27,0,0,3377,331,
        1,0,0,0,3378,3381,3,334,167,0,3379,3381,3,336,168,0,3380,3378,1,
        0,0,0,3380,3379,1,0,0,0,3381,3385,1,0,0,0,3382,3384,5,5,0,0,3383,
        3382,1,0,0,0,3384,3387,1,0,0,0,3385,3383,1,0,0,0,3385,3386,1,0,0,
        0,3386,333,1,0,0,0,3387,3385,1,0,0,0,3388,3392,3,338,169,0,3389,
        3391,5,5,0,0,3390,3389,1,0,0,0,3391,3394,1,0,0,0,3392,3390,1,0,0,
        0,3392,3393,1,0,0,0,3393,3398,1,0,0,0,3394,3392,1,0,0,0,3395,3398,
        5,40,0,0,3396,3398,5,42,0,0,3397,3388,1,0,0,0,3397,3395,1,0,0,0,
        3397,3396,1,0,0,0,3398,3399,1,0,0,0,3399,3400,3,340,170,0,3400,335,
        1,0,0,0,3401,3405,3,338,169,0,3402,3404,5,5,0,0,3403,3402,1,0,0,
        0,3404,3407,1,0,0,0,3405,3403,1,0,0,0,3405,3406,1,0,0,0,3406,3411,
        1,0,0,0,3407,3405,1,0,0,0,3408,3411,5,40,0,0,3409,3411,5,42,0,0,
        3410,3401,1,0,0,0,3410,3408,1,0,0,0,3410,3409,1,0,0,0,3411,3412,
        1,0,0,0,3412,3414,5,11,0,0,3413,3415,3,340,170,0,3414,3413,1,0,0,
        0,3415,3416,1,0,0,0,3416,3414,1,0,0,0,3416,3417,1,0,0,0,3417,3418,
        1,0,0,0,3418,3419,5,12,0,0,3419,337,1,0,0,0,3420,3421,7,0,0,0,3421,
        3425,7,28,0,0,3422,3424,5,5,0,0,3423,3422,1,0,0,0,3424,3427,1,0,
        0,0,3425,3423,1,0,0,0,3425,3426,1,0,0,0,3426,3428,1,0,0,0,3427,3425,
        1,0,0,0,3428,3429,5,26,0,0,3429,339,1,0,0,0,3430,3433,3,36,18,0,
        3431,3433,3,106,53,0,3432,3430,1,0,0,0,3432,3431,1,0,0,0,3433,341,
        1,0,0,0,3434,3435,7,29,0,0,3435,343,1,0,0,0,3436,3447,3,342,171,
        0,3437,3439,5,5,0,0,3438,3437,1,0,0,0,3439,3442,1,0,0,0,3440,3438,
        1,0,0,0,3440,3441,1,0,0,0,3441,3443,1,0,0,0,3442,3440,1,0,0,0,3443,
        3444,5,7,0,0,3444,3446,3,342,171,0,3445,3440,1,0,0,0,3446,3449,1,
        0,0,0,3447,3445,1,0,0,0,3447,3448,1,0,0,0,3448,345,1,0,0,0,3449,
        3447,1,0,0,0,529,347,352,358,366,372,377,383,393,402,409,416,423,
        428,433,439,441,446,454,457,464,467,473,480,484,489,496,506,509,
        516,519,522,527,534,538,543,547,552,559,563,568,572,577,584,588,
        591,597,600,608,615,624,631,638,644,650,654,656,661,667,670,675,
        683,690,697,701,707,714,720,727,735,741,748,753,760,769,776,783,
        789,795,799,804,810,815,822,829,833,839,846,853,859,865,872,879,
        886,890,897,903,909,915,922,926,931,938,942,947,951,957,964,971,
        977,983,987,989,994,1000,1006,1013,1017,1020,1026,1030,1035,1042,
        1047,1052,1059,1066,1073,1077,1082,1086,1091,1095,1102,1106,1111,
        1117,1124,1131,1135,1141,1148,1155,1161,1167,1171,1176,1182,1188,
        1192,1197,1204,1209,1214,1219,1224,1228,1233,1240,1245,1247,1252,
        1255,1260,1264,1269,1273,1276,1279,1284,1288,1291,1293,1299,1305,
        1311,1318,1325,1332,1336,1341,1345,1348,1354,1361,1368,1372,1377,
        1384,1391,1395,1400,1405,1411,1418,1425,1431,1437,1441,1443,1448,
        1454,1460,1467,1471,1477,1484,1488,1494,1501,1507,1513,1520,1527,
        1531,1536,1540,1543,1549,1556,1563,1567,1572,1576,1582,1591,1595,
        1600,1607,1611,1616,1625,1632,1638,1644,1648,1654,1657,1663,1667,
        1672,1676,1679,1685,1689,1693,1698,1704,1712,1719,1725,1732,1736,
        1739,1743,1748,1754,1758,1764,1771,1774,1780,1787,1796,1801,1806,
        1813,1818,1822,1828,1832,1837,1846,1853,1859,1864,1870,1875,1880,
        1891,1894,1897,1901,1903,1910,1917,1922,1928,1935,1943,1949,1956,
        1961,1969,1973,1979,1988,1993,1999,2003,2008,2015,2028,2033,2042,
        2046,2051,2059,2066,2072,2079,2086,2092,2100,2107,2115,2122,2129,
        2137,2146,2151,2153,2160,2167,2174,2185,2192,2200,2206,2214,2221,
        2229,2236,2243,2250,2257,2263,2274,2277,2283,2291,2298,2304,2311,
        2318,2324,2331,2339,2345,2352,2359,2365,2371,2375,2380,2389,2395,
        2398,2401,2405,2410,2414,2419,2428,2435,2442,2448,2454,2458,2463,
        2472,2479,2486,2492,2498,2502,2507,2510,2515,2520,2527,2534,2537,
        2540,2545,2564,2570,2577,2586,2593,2600,2606,2612,2616,2621,2624,
        2632,2637,2639,2648,2650,2661,2668,2679,2686,2695,2699,2704,2711,
        2714,2720,2729,2736,2742,2748,2752,2759,2766,2770,2772,2778,2785,
        2790,2795,2802,2809,2813,2818,2822,2827,2831,2835,2841,2848,2855,
        2858,2863,2867,2876,2883,2888,2892,2895,2901,2908,2915,2922,2927,
        2932,2936,2941,2948,2953,2956,2962,2968,2975,2982,2989,2992,3001,
        3005,3010,3017,3024,3029,3035,3044,3051,3057,3063,3067,3072,3079,
        3084,3090,3097,3102,3104,3109,3115,3124,3133,3140,3146,3151,3155,
        3160,3164,3170,3177,3186,3190,3196,3205,3214,3220,3226,3229,3235,
        3240,3263,3269,3276,3283,3288,3295,3297,3301,3303,3313,3318,3324,
        3331,3334,3347,3353,3360,3364,3380,3385,3392,3397,3405,3410,3416,
        3425,3432,3440,3447
    ]

class KotlinParser ( Parser ):

    grammarFileName = "KotlinParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'...'", "'.'", "','", "'('", 
                     "')'", "'['", "']'", "'{'", "'}'", "'*'", "'%'", "'/'", 
                     "'+'", "'-'", "'++'", "'--'", "'&&'", "'||'", "<INVALID>", 
                     "'!'", "':'", "';'", "'='", "'+='", "'-='", "'*='", 
                     "'/='", "'%='", "'->'", "'=>'", "'..'", "'::'", "';;'", 
                     "'#'", "'@'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'?'", "'<'", "'>'", "'<='", "'>='", "'!='", 
                     "'!=='", "'as?'", "'=='", "'==='", "'''", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'file'", "'field'", "'property'", "'get'", "'set'", 
                     "'receiver'", "'param'", "'setparam'", "'delegate'", 
                     "'package'", "'import'", "'class'", "'interface'", 
                     "'fun'", "'object'", "'val'", "'var'", "'typealias'", 
                     "'constructor'", "'by'", "'companion'", "'init'", "'this'", 
                     "'super'", "'typeof'", "'where'", "'if'", "'else'", 
                     "'when'", "'try'", "'catch'", "'finally'", "'for'", 
                     "'do'", "'while'", "'throw'", "'return'", "'continue'", 
                     "'break'", "'as'", "'is'", "'in'", "<INVALID>", "<INVALID>", 
                     "'out'", "'dynamic'", "'public'", "'private'", "'protected'", 
                     "'internal'", "'enum'", "'sealed'", "'annotation'", 
                     "'data'", "'inner'", "'value'", "'tailrec'", "'operator'", 
                     "'inline'", "'infix'", "'external'", "'suspend'", "'override'", 
                     "'abstract'", "'final'", "'open'", "'const'", "'lateinit'", 
                     "'vararg'", "'noinline'", "'crossinline'", "'reified'", 
                     "'expect'", "'actual'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'null'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'\"\"\"'" ]

    symbolicNames = [ "<INVALID>", "ShebangLine", "DelimitedComment", "LineComment", 
                      "WS", "NL", "RESERVED", "DOT", "COMMA", "LPAREN", 
                      "RPAREN", "LSQUARE", "RSQUARE", "LCURL", "RCURL", 
                      "MULT", "MOD", "DIV", "ADD", "SUB", "INCR", "DECR", 
                      "CONJ", "DISJ", "EXCL_WS", "EXCL_NO_WS", "COLON", 
                      "SEMICOLON", "ASSIGNMENT", "ADD_ASSIGNMENT", "SUB_ASSIGNMENT", 
                      "MULT_ASSIGNMENT", "DIV_ASSIGNMENT", "MOD_ASSIGNMENT", 
                      "ARROW", "DOUBLE_ARROW", "RANGE", "COLONCOLON", "DOUBLE_SEMICOLON", 
                      "HASH", "AT_NO_WS", "AT_POST_WS", "AT_PRE_WS", "AT_BOTH_WS", 
                      "QUEST_WS", "QUEST_NO_WS", "LANGLE", "RANGLE", "LE", 
                      "GE", "EXCL_EQ", "EXCL_EQEQ", "AS_SAFE", "EQEQ", "EQEQEQ", 
                      "SINGLE_QUOTE", "RETURN_AT", "CONTINUE_AT", "BREAK_AT", 
                      "THIS_AT", "SUPER_AT", "FILE", "FIELD", "PROPERTY", 
                      "GET", "SET", "RECEIVER", "PARAM", "SETPARAM", "DELEGATE", 
                      "PACKAGE", "IMPORT", "CLASS", "INTERFACE", "FUN", 
                      "OBJECT", "VAL", "VAR", "TYPE_ALIAS", "CONSTRUCTOR", 
                      "BY", "COMPANION", "INIT", "THIS", "SUPER", "TYPEOF", 
                      "WHERE", "IF", "ELSE", "WHEN", "TRY", "CATCH", "FINALLY", 
                      "FOR", "DO", "WHILE", "THROW", "RETURN", "CONTINUE", 
                      "BREAK", "AS", "IS", "IN", "NOT_IS", "NOT_IN", "OUT", 
                      "DYNAMIC", "PUBLIC", "PRIVATE", "PROTECTED", "INTERNAL", 
                      "ENUM", "SEALED", "ANNOTATION", "DATA", "INNER", "VALUE", 
                      "TAILREC", "OPERATOR", "INLINE", "INFIX", "EXTERNAL", 
                      "SUSPEND", "OVERRIDE", "ABSTRACT", "FINAL", "OPEN", 
                      "CONST", "LATEINIT", "VARARG", "NOINLINE", "CROSSINLINE", 
                      "REIFIED", "EXPECT", "ACTUAL", "RealLiteral", "FloatLiteral", 
                      "DoubleLiteral", "IntegerLiteral", "HexLiteral", "BinLiteral", 
                      "UnsignedLiteral", "LongLiteral", "BooleanLiteral", 
                      "NullLiteral", "CharacterLiteral", "Identifier", "IdentifierOrSoftKey", 
                      "FieldIdentifier", "QUOTE_OPEN", "TRIPLE_QUOTE_OPEN", 
                      "UNICODE_CLASS_LL", "UNICODE_CLASS_LM", "UNICODE_CLASS_LO", 
                      "UNICODE_CLASS_LT", "UNICODE_CLASS_LU", "UNICODE_CLASS_ND", 
                      "UNICODE_CLASS_NL", "QUOTE_CLOSE", "LineStrRef", "LineStrText", 
                      "LineStrEscapedChar", "LineStrExprStart", "TRIPLE_QUOTE_CLOSE", 
                      "MultiLineStringQuote", "MultiLineStrRef", "MultiLineStrText", 
                      "MultiLineStrExprStart", "Inside_Comment", "Inside_WS", 
                      "Inside_NL", "ErrorCharacter" ]

    RULE_kotlinFile = 0
    RULE_script = 1
    RULE_shebangLine = 2
    RULE_fileAnnotation = 3
    RULE_packageHeader = 4
    RULE_importList = 5
    RULE_importHeader = 6
    RULE_importAlias = 7
    RULE_topLevelObject = 8
    RULE_typeAlias = 9
    RULE_declaration = 10
    RULE_classDeclaration = 11
    RULE_primaryConstructor = 12
    RULE_classBody = 13
    RULE_classParameters = 14
    RULE_classParameter = 15
    RULE_delegationSpecifiers = 16
    RULE_delegationSpecifier = 17
    RULE_constructorInvocation = 18
    RULE_annotatedDelegationSpecifier = 19
    RULE_explicitDelegation = 20
    RULE_typeParameters = 21
    RULE_typeParameter = 22
    RULE_typeConstraints = 23
    RULE_typeConstraint = 24
    RULE_classMemberDeclarations = 25
    RULE_classMemberDeclaration = 26
    RULE_anonymousInitializer = 27
    RULE_companionObject = 28
    RULE_functionValueParameters = 29
    RULE_functionValueParameter = 30
    RULE_functionDeclaration = 31
    RULE_functionBody = 32
    RULE_variableDeclaration = 33
    RULE_multiVariableDeclaration = 34
    RULE_propertyDeclaration = 35
    RULE_propertyDelegate = 36
    RULE_getter = 37
    RULE_setter = 38
    RULE_parametersWithOptionalType = 39
    RULE_functionValueParameterWithOptionalType = 40
    RULE_parameterWithOptionalType = 41
    RULE_parameter = 42
    RULE_objectDeclaration = 43
    RULE_secondaryConstructor = 44
    RULE_constructorDelegationCall = 45
    RULE_enumClassBody = 46
    RULE_enumEntries = 47
    RULE_enumEntry = 48
    RULE_type = 49
    RULE_typeReference = 50
    RULE_nullableType = 51
    RULE_quest = 52
    RULE_userType = 53
    RULE_simpleUserType = 54
    RULE_typeProjection = 55
    RULE_typeProjectionModifiers = 56
    RULE_typeProjectionModifier = 57
    RULE_functionType = 58
    RULE_functionTypeParameters = 59
    RULE_parenthesizedType = 60
    RULE_receiverType = 61
    RULE_parenthesizedUserType = 62
    RULE_statements = 63
    RULE_statement = 64
    RULE_label = 65
    RULE_controlStructureBody = 66
    RULE_block = 67
    RULE_loopStatement = 68
    RULE_forStatement = 69
    RULE_whileStatement = 70
    RULE_doWhileStatement = 71
    RULE_assignment = 72
    RULE_semi = 73
    RULE_semis = 74
    RULE_expression = 75
    RULE_disjunction = 76
    RULE_conjunction = 77
    RULE_equality = 78
    RULE_comparison = 79
    RULE_genericCallLikeComparison = 80
    RULE_infixOperation = 81
    RULE_elvisExpression = 82
    RULE_elvis = 83
    RULE_infixFunctionCall = 84
    RULE_rangeExpression = 85
    RULE_additiveExpression = 86
    RULE_multiplicativeExpression = 87
    RULE_asExpression = 88
    RULE_prefixUnaryExpression = 89
    RULE_unaryPrefix = 90
    RULE_postfixUnaryExpression = 91
    RULE_postfixUnarySuffix = 92
    RULE_directlyAssignableExpression = 93
    RULE_parenthesizedDirectlyAssignableExpression = 94
    RULE_assignableExpression = 95
    RULE_parenthesizedAssignableExpression = 96
    RULE_assignableSuffix = 97
    RULE_indexingSuffix = 98
    RULE_navigationSuffix = 99
    RULE_callSuffix = 100
    RULE_annotatedLambda = 101
    RULE_typeArguments = 102
    RULE_valueArguments = 103
    RULE_valueArgument = 104
    RULE_primaryExpression = 105
    RULE_parenthesizedExpression = 106
    RULE_collectionLiteral = 107
    RULE_literalConstant = 108
    RULE_stringLiteral = 109
    RULE_lineStringLiteral = 110
    RULE_multiLineStringLiteral = 111
    RULE_lineStringContent = 112
    RULE_lineStringExpression = 113
    RULE_multiLineStringContent = 114
    RULE_multiLineStringExpression = 115
    RULE_lambdaLiteral = 116
    RULE_lambdaParameters = 117
    RULE_lambdaParameter = 118
    RULE_anonymousFunction = 119
    RULE_functionLiteral = 120
    RULE_objectLiteral = 121
    RULE_thisExpression = 122
    RULE_superExpression = 123
    RULE_ifExpression = 124
    RULE_whenSubject = 125
    RULE_whenExpression = 126
    RULE_whenEntry = 127
    RULE_whenCondition = 128
    RULE_rangeTest = 129
    RULE_typeTest = 130
    RULE_tryExpression = 131
    RULE_catchBlock = 132
    RULE_finallyBlock = 133
    RULE_jumpExpression = 134
    RULE_callableReference = 135
    RULE_assignmentAndOperator = 136
    RULE_equalityOperator = 137
    RULE_comparisonOperator = 138
    RULE_inOperator = 139
    RULE_isOperator = 140
    RULE_additiveOperator = 141
    RULE_multiplicativeOperator = 142
    RULE_asOperator = 143
    RULE_prefixUnaryOperator = 144
    RULE_postfixUnaryOperator = 145
    RULE_excl = 146
    RULE_memberAccessOperator = 147
    RULE_safeNav = 148
    RULE_modifiers = 149
    RULE_parameterModifiers = 150
    RULE_modifier = 151
    RULE_typeModifiers = 152
    RULE_typeModifier = 153
    RULE_classModifier = 154
    RULE_memberModifier = 155
    RULE_visibilityModifier = 156
    RULE_varianceModifier = 157
    RULE_typeParameterModifiers = 158
    RULE_typeParameterModifier = 159
    RULE_functionModifier = 160
    RULE_propertyModifier = 161
    RULE_inheritanceModifier = 162
    RULE_parameterModifier = 163
    RULE_reificationModifier = 164
    RULE_platformModifier = 165
    RULE_annotation = 166
    RULE_singleAnnotation = 167
    RULE_multiAnnotation = 168
    RULE_annotationUseSiteTarget = 169
    RULE_unescapedAnnotation = 170
    RULE_simpleIdentifier = 171
    RULE_identifier = 172

    ruleNames =  [ "kotlinFile", "script", "shebangLine", "fileAnnotation", 
                   "packageHeader", "importList", "importHeader", "importAlias", 
                   "topLevelObject", "typeAlias", "declaration", "classDeclaration", 
                   "primaryConstructor", "classBody", "classParameters", 
                   "classParameter", "delegationSpecifiers", "delegationSpecifier", 
                   "constructorInvocation", "annotatedDelegationSpecifier", 
                   "explicitDelegation", "typeParameters", "typeParameter", 
                   "typeConstraints", "typeConstraint", "classMemberDeclarations", 
                   "classMemberDeclaration", "anonymousInitializer", "companionObject", 
                   "functionValueParameters", "functionValueParameter", 
                   "functionDeclaration", "functionBody", "variableDeclaration", 
                   "multiVariableDeclaration", "propertyDeclaration", "propertyDelegate", 
                   "getter", "setter", "parametersWithOptionalType", "functionValueParameterWithOptionalType", 
                   "parameterWithOptionalType", "parameter", "objectDeclaration", 
                   "secondaryConstructor", "constructorDelegationCall", 
                   "enumClassBody", "enumEntries", "enumEntry", "type", 
                   "typeReference", "nullableType", "quest", "userType", 
                   "simpleUserType", "typeProjection", "typeProjectionModifiers", 
                   "typeProjectionModifier", "functionType", "functionTypeParameters", 
                   "parenthesizedType", "receiverType", "parenthesizedUserType", 
                   "statements", "statement", "label", "controlStructureBody", 
                   "block", "loopStatement", "forStatement", "whileStatement", 
                   "doWhileStatement", "assignment", "semi", "semis", "expression", 
                   "disjunction", "conjunction", "equality", "comparison", 
                   "genericCallLikeComparison", "infixOperation", "elvisExpression", 
                   "elvis", "infixFunctionCall", "rangeExpression", "additiveExpression", 
                   "multiplicativeExpression", "asExpression", "prefixUnaryExpression", 
                   "unaryPrefix", "postfixUnaryExpression", "postfixUnarySuffix", 
                   "directlyAssignableExpression", "parenthesizedDirectlyAssignableExpression", 
                   "assignableExpression", "parenthesizedAssignableExpression", 
                   "assignableSuffix", "indexingSuffix", "navigationSuffix", 
                   "callSuffix", "annotatedLambda", "typeArguments", "valueArguments", 
                   "valueArgument", "primaryExpression", "parenthesizedExpression", 
                   "collectionLiteral", "literalConstant", "stringLiteral", 
                   "lineStringLiteral", "multiLineStringLiteral", "lineStringContent", 
                   "lineStringExpression", "multiLineStringContent", "multiLineStringExpression", 
                   "lambdaLiteral", "lambdaParameters", "lambdaParameter", 
                   "anonymousFunction", "functionLiteral", "objectLiteral", 
                   "thisExpression", "superExpression", "ifExpression", 
                   "whenSubject", "whenExpression", "whenEntry", "whenCondition", 
                   "rangeTest", "typeTest", "tryExpression", "catchBlock", 
                   "finallyBlock", "jumpExpression", "callableReference", 
                   "assignmentAndOperator", "equalityOperator", "comparisonOperator", 
                   "inOperator", "isOperator", "additiveOperator", "multiplicativeOperator", 
                   "asOperator", "prefixUnaryOperator", "postfixUnaryOperator", 
                   "excl", "memberAccessOperator", "safeNav", "modifiers", 
                   "parameterModifiers", "modifier", "typeModifiers", "typeModifier", 
                   "classModifier", "memberModifier", "visibilityModifier", 
                   "varianceModifier", "typeParameterModifiers", "typeParameterModifier", 
                   "functionModifier", "propertyModifier", "inheritanceModifier", 
                   "parameterModifier", "reificationModifier", "platformModifier", 
                   "annotation", "singleAnnotation", "multiAnnotation", 
                   "annotationUseSiteTarget", "unescapedAnnotation", "simpleIdentifier", 
                   "identifier" ]

    EOF = Token.EOF
    ShebangLine=1
    DelimitedComment=2
    LineComment=3
    WS=4
    NL=5
    RESERVED=6
    DOT=7
    COMMA=8
    LPAREN=9
    RPAREN=10
    LSQUARE=11
    RSQUARE=12
    LCURL=13
    RCURL=14
    MULT=15
    MOD=16
    DIV=17
    ADD=18
    SUB=19
    INCR=20
    DECR=21
    CONJ=22
    DISJ=23
    EXCL_WS=24
    EXCL_NO_WS=25
    COLON=26
    SEMICOLON=27
    ASSIGNMENT=28
    ADD_ASSIGNMENT=29
    SUB_ASSIGNMENT=30
    MULT_ASSIGNMENT=31
    DIV_ASSIGNMENT=32
    MOD_ASSIGNMENT=33
    ARROW=34
    DOUBLE_ARROW=35
    RANGE=36
    COLONCOLON=37
    DOUBLE_SEMICOLON=38
    HASH=39
    AT_NO_WS=40
    AT_POST_WS=41
    AT_PRE_WS=42
    AT_BOTH_WS=43
    QUEST_WS=44
    QUEST_NO_WS=45
    LANGLE=46
    RANGLE=47
    LE=48
    GE=49
    EXCL_EQ=50
    EXCL_EQEQ=51
    AS_SAFE=52
    EQEQ=53
    EQEQEQ=54
    SINGLE_QUOTE=55
    RETURN_AT=56
    CONTINUE_AT=57
    BREAK_AT=58
    THIS_AT=59
    SUPER_AT=60
    FILE=61
    FIELD=62
    PROPERTY=63
    GET=64
    SET=65
    RECEIVER=66
    PARAM=67
    SETPARAM=68
    DELEGATE=69
    PACKAGE=70
    IMPORT=71
    CLASS=72
    INTERFACE=73
    FUN=74
    OBJECT=75
    VAL=76
    VAR=77
    TYPE_ALIAS=78
    CONSTRUCTOR=79
    BY=80
    COMPANION=81
    INIT=82
    THIS=83
    SUPER=84
    TYPEOF=85
    WHERE=86
    IF=87
    ELSE=88
    WHEN=89
    TRY=90
    CATCH=91
    FINALLY=92
    FOR=93
    DO=94
    WHILE=95
    THROW=96
    RETURN=97
    CONTINUE=98
    BREAK=99
    AS=100
    IS=101
    IN=102
    NOT_IS=103
    NOT_IN=104
    OUT=105
    DYNAMIC=106
    PUBLIC=107
    PRIVATE=108
    PROTECTED=109
    INTERNAL=110
    ENUM=111
    SEALED=112
    ANNOTATION=113
    DATA=114
    INNER=115
    VALUE=116
    TAILREC=117
    OPERATOR=118
    INLINE=119
    INFIX=120
    EXTERNAL=121
    SUSPEND=122
    OVERRIDE=123
    ABSTRACT=124
    FINAL=125
    OPEN=126
    CONST=127
    LATEINIT=128
    VARARG=129
    NOINLINE=130
    CROSSINLINE=131
    REIFIED=132
    EXPECT=133
    ACTUAL=134
    RealLiteral=135
    FloatLiteral=136
    DoubleLiteral=137
    IntegerLiteral=138
    HexLiteral=139
    BinLiteral=140
    UnsignedLiteral=141
    LongLiteral=142
    BooleanLiteral=143
    NullLiteral=144
    CharacterLiteral=145
    Identifier=146
    IdentifierOrSoftKey=147
    FieldIdentifier=148
    QUOTE_OPEN=149
    TRIPLE_QUOTE_OPEN=150
    UNICODE_CLASS_LL=151
    UNICODE_CLASS_LM=152
    UNICODE_CLASS_LO=153
    UNICODE_CLASS_LT=154
    UNICODE_CLASS_LU=155
    UNICODE_CLASS_ND=156
    UNICODE_CLASS_NL=157
    QUOTE_CLOSE=158
    LineStrRef=159
    LineStrText=160
    LineStrEscapedChar=161
    LineStrExprStart=162
    TRIPLE_QUOTE_CLOSE=163
    MultiLineStringQuote=164
    MultiLineStrRef=165
    MultiLineStrText=166
    MultiLineStrExprStart=167
    Inside_Comment=168
    Inside_WS=169
    Inside_NL=170
    ErrorCharacter=171

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class KotlinFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageHeader(self):
            return self.getTypedRuleContext(KotlinParser.PackageHeaderContext,0)


        def importList(self):
            return self.getTypedRuleContext(KotlinParser.ImportListContext,0)


        def EOF(self):
            return self.getToken(KotlinParser.EOF, 0)

        def shebangLine(self):
            return self.getTypedRuleContext(KotlinParser.ShebangLineContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def fileAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.FileAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.FileAnnotationContext,i)


        def topLevelObject(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TopLevelObjectContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TopLevelObjectContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_kotlinFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKotlinFile" ):
                listener.enterKotlinFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKotlinFile" ):
                listener.exitKotlinFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKotlinFile" ):
                return visitor.visitKotlinFile(self)
            else:
                return visitor.visitChildren(self)




    def kotlinFile(self):

        localctx = KotlinParser.KotlinFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_kotlinFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.ShebangLine:
                self.state = 346
                self.shebangLine()


            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 349
                self.match(KotlinParser.NL)
                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 358
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 355
                    self.fileAnnotation() 
                self.state = 360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 361
            self.packageHeader()
            self.state = 362
            self.importList()
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (KotlinParser.CLASS - 72)) | (1 << (KotlinParser.INTERFACE - 72)) | (1 << (KotlinParser.FUN - 72)) | (1 << (KotlinParser.OBJECT - 72)) | (1 << (KotlinParser.VAL - 72)) | (1 << (KotlinParser.VAR - 72)) | (1 << (KotlinParser.TYPE_ALIAS - 72)) | (1 << (KotlinParser.PUBLIC - 72)) | (1 << (KotlinParser.PRIVATE - 72)) | (1 << (KotlinParser.PROTECTED - 72)) | (1 << (KotlinParser.INTERNAL - 72)) | (1 << (KotlinParser.ENUM - 72)) | (1 << (KotlinParser.SEALED - 72)) | (1 << (KotlinParser.ANNOTATION - 72)) | (1 << (KotlinParser.DATA - 72)) | (1 << (KotlinParser.INNER - 72)) | (1 << (KotlinParser.VALUE - 72)) | (1 << (KotlinParser.TAILREC - 72)) | (1 << (KotlinParser.OPERATOR - 72)) | (1 << (KotlinParser.INLINE - 72)) | (1 << (KotlinParser.INFIX - 72)) | (1 << (KotlinParser.EXTERNAL - 72)) | (1 << (KotlinParser.SUSPEND - 72)) | (1 << (KotlinParser.OVERRIDE - 72)) | (1 << (KotlinParser.ABSTRACT - 72)) | (1 << (KotlinParser.FINAL - 72)) | (1 << (KotlinParser.OPEN - 72)) | (1 << (KotlinParser.CONST - 72)) | (1 << (KotlinParser.LATEINIT - 72)) | (1 << (KotlinParser.VARARG - 72)) | (1 << (KotlinParser.NOINLINE - 72)) | (1 << (KotlinParser.CROSSINLINE - 72)) | (1 << (KotlinParser.EXPECT - 72)) | (1 << (KotlinParser.ACTUAL - 72)))) != 0):
                self.state = 363
                self.topLevelObject()
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 369
            self.match(KotlinParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageHeader(self):
            return self.getTypedRuleContext(KotlinParser.PackageHeaderContext,0)


        def importList(self):
            return self.getTypedRuleContext(KotlinParser.ImportListContext,0)


        def EOF(self):
            return self.getToken(KotlinParser.EOF, 0)

        def shebangLine(self):
            return self.getTypedRuleContext(KotlinParser.ShebangLineContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def fileAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.FileAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.FileAnnotationContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.StatementContext)
            else:
                return self.getTypedRuleContext(KotlinParser.StatementContext,i)


        def semi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SemiContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript" ):
                listener.enterScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript" ):
                listener.exitScript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScript" ):
                return visitor.visitScript(self)
            else:
                return visitor.visitChildren(self)




    def script(self):

        localctx = KotlinParser.ScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.ShebangLine:
                self.state = 371
                self.shebangLine()


            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 374
                self.match(KotlinParser.NL)
                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 383
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 380
                    self.fileAnnotation() 
                self.state = 385
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

            self.state = 386
            self.packageHeader()
            self.state = 387
            self.importList()
            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL_WS) | (1 << KotlinParser.EXCL_NO_WS) | (1 << KotlinParser.COLONCOLON) | (1 << KotlinParser.AT_NO_WS) | (1 << KotlinParser.AT_PRE_WS) | (1 << KotlinParser.RETURN_AT) | (1 << KotlinParser.CONTINUE_AT) | (1 << KotlinParser.BREAK_AT) | (1 << KotlinParser.THIS_AT) | (1 << KotlinParser.SUPER_AT) | (1 << KotlinParser.FILE) | (1 << KotlinParser.FIELD) | (1 << KotlinParser.PROPERTY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (KotlinParser.GET - 64)) | (1 << (KotlinParser.SET - 64)) | (1 << (KotlinParser.RECEIVER - 64)) | (1 << (KotlinParser.PARAM - 64)) | (1 << (KotlinParser.SETPARAM - 64)) | (1 << (KotlinParser.DELEGATE - 64)) | (1 << (KotlinParser.IMPORT - 64)) | (1 << (KotlinParser.CLASS - 64)) | (1 << (KotlinParser.INTERFACE - 64)) | (1 << (KotlinParser.FUN - 64)) | (1 << (KotlinParser.OBJECT - 64)) | (1 << (KotlinParser.VAL - 64)) | (1 << (KotlinParser.VAR - 64)) | (1 << (KotlinParser.TYPE_ALIAS - 64)) | (1 << (KotlinParser.CONSTRUCTOR - 64)) | (1 << (KotlinParser.BY - 64)) | (1 << (KotlinParser.COMPANION - 64)) | (1 << (KotlinParser.INIT - 64)) | (1 << (KotlinParser.THIS - 64)) | (1 << (KotlinParser.SUPER - 64)) | (1 << (KotlinParser.WHERE - 64)) | (1 << (KotlinParser.IF - 64)) | (1 << (KotlinParser.WHEN - 64)) | (1 << (KotlinParser.TRY - 64)) | (1 << (KotlinParser.CATCH - 64)) | (1 << (KotlinParser.FINALLY - 64)) | (1 << (KotlinParser.FOR - 64)) | (1 << (KotlinParser.DO - 64)) | (1 << (KotlinParser.WHILE - 64)) | (1 << (KotlinParser.THROW - 64)) | (1 << (KotlinParser.RETURN - 64)) | (1 << (KotlinParser.CONTINUE - 64)) | (1 << (KotlinParser.BREAK - 64)) | (1 << (KotlinParser.OUT - 64)) | (1 << (KotlinParser.DYNAMIC - 64)) | (1 << (KotlinParser.PUBLIC - 64)) | (1 << (KotlinParser.PRIVATE - 64)) | (1 << (KotlinParser.PROTECTED - 64)) | (1 << (KotlinParser.INTERNAL - 64)) | (1 << (KotlinParser.ENUM - 64)) | (1 << (KotlinParser.SEALED - 64)) | (1 << (KotlinParser.ANNOTATION - 64)) | (1 << (KotlinParser.DATA - 64)) | (1 << (KotlinParser.INNER - 64)) | (1 << (KotlinParser.VALUE - 64)) | (1 << (KotlinParser.TAILREC - 64)) | (1 << (KotlinParser.OPERATOR - 64)) | (1 << (KotlinParser.INLINE - 64)) | (1 << (KotlinParser.INFIX - 64)) | (1 << (KotlinParser.EXTERNAL - 64)) | (1 << (KotlinParser.SUSPEND - 64)) | (1 << (KotlinParser.OVERRIDE - 64)) | (1 << (KotlinParser.ABSTRACT - 64)) | (1 << (KotlinParser.FINAL - 64)) | (1 << (KotlinParser.OPEN - 64)) | (1 << (KotlinParser.CONST - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (KotlinParser.LATEINIT - 128)) | (1 << (KotlinParser.VARARG - 128)) | (1 << (KotlinParser.NOINLINE - 128)) | (1 << (KotlinParser.CROSSINLINE - 128)) | (1 << (KotlinParser.REIFIED - 128)) | (1 << (KotlinParser.EXPECT - 128)) | (1 << (KotlinParser.ACTUAL - 128)) | (1 << (KotlinParser.RealLiteral - 128)) | (1 << (KotlinParser.IntegerLiteral - 128)) | (1 << (KotlinParser.HexLiteral - 128)) | (1 << (KotlinParser.BinLiteral - 128)) | (1 << (KotlinParser.UnsignedLiteral - 128)) | (1 << (KotlinParser.LongLiteral - 128)) | (1 << (KotlinParser.BooleanLiteral - 128)) | (1 << (KotlinParser.NullLiteral - 128)) | (1 << (KotlinParser.CharacterLiteral - 128)) | (1 << (KotlinParser.Identifier - 128)) | (1 << (KotlinParser.QUOTE_OPEN - 128)) | (1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 128)))) != 0):
                self.state = 388
                self.statement()
                self.state = 389
                self.semi()
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 396
            self.match(KotlinParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShebangLineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ShebangLine(self):
            return self.getToken(KotlinParser.ShebangLine, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_shebangLine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShebangLine" ):
                listener.enterShebangLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShebangLine" ):
                listener.exitShebangLine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShebangLine" ):
                return visitor.visitShebangLine(self)
            else:
                return visitor.visitChildren(self)




    def shebangLine(self):

        localctx = KotlinParser.ShebangLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_shebangLine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.match(KotlinParser.ShebangLine)
            self.state = 400 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 399
                    self.match(KotlinParser.NL)

                else:
                    raise NoViableAltException(self)
                self.state = 402 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE(self):
            return self.getToken(KotlinParser.FILE, 0)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def AT_NO_WS(self):
            return self.getToken(KotlinParser.AT_NO_WS, 0)

        def AT_PRE_WS(self):
            return self.getToken(KotlinParser.AT_PRE_WS, 0)

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def unescapedAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UnescapedAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_fileAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileAnnotation" ):
                listener.enterFileAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileAnnotation" ):
                listener.exitFileAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileAnnotation" ):
                return visitor.visitFileAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def fileAnnotation(self):

        localctx = KotlinParser.FileAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_fileAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            _la = self._input.LA(1)
            if not(_la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 405
            self.match(KotlinParser.FILE)
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 406
                self.match(KotlinParser.NL)
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 412
            self.match(KotlinParser.COLON)
            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 413
                self.match(KotlinParser.NL)
                self.state = 418
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 428
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LSQUARE]:
                self.state = 419
                self.match(KotlinParser.LSQUARE)
                self.state = 421 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 420
                    self.unescapedAnnotation()
                    self.state = 423 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (KotlinParser.FILE - 61)) | (1 << (KotlinParser.FIELD - 61)) | (1 << (KotlinParser.PROPERTY - 61)) | (1 << (KotlinParser.GET - 61)) | (1 << (KotlinParser.SET - 61)) | (1 << (KotlinParser.RECEIVER - 61)) | (1 << (KotlinParser.PARAM - 61)) | (1 << (KotlinParser.SETPARAM - 61)) | (1 << (KotlinParser.DELEGATE - 61)) | (1 << (KotlinParser.IMPORT - 61)) | (1 << (KotlinParser.CONSTRUCTOR - 61)) | (1 << (KotlinParser.BY - 61)) | (1 << (KotlinParser.COMPANION - 61)) | (1 << (KotlinParser.INIT - 61)) | (1 << (KotlinParser.WHERE - 61)) | (1 << (KotlinParser.CATCH - 61)) | (1 << (KotlinParser.FINALLY - 61)) | (1 << (KotlinParser.OUT - 61)) | (1 << (KotlinParser.DYNAMIC - 61)) | (1 << (KotlinParser.PUBLIC - 61)) | (1 << (KotlinParser.PRIVATE - 61)) | (1 << (KotlinParser.PROTECTED - 61)) | (1 << (KotlinParser.INTERNAL - 61)) | (1 << (KotlinParser.ENUM - 61)) | (1 << (KotlinParser.SEALED - 61)) | (1 << (KotlinParser.ANNOTATION - 61)) | (1 << (KotlinParser.DATA - 61)) | (1 << (KotlinParser.INNER - 61)) | (1 << (KotlinParser.VALUE - 61)) | (1 << (KotlinParser.TAILREC - 61)) | (1 << (KotlinParser.OPERATOR - 61)) | (1 << (KotlinParser.INLINE - 61)) | (1 << (KotlinParser.INFIX - 61)) | (1 << (KotlinParser.EXTERNAL - 61)) | (1 << (KotlinParser.SUSPEND - 61)) | (1 << (KotlinParser.OVERRIDE - 61)) | (1 << (KotlinParser.ABSTRACT - 61)))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (KotlinParser.FINAL - 125)) | (1 << (KotlinParser.OPEN - 125)) | (1 << (KotlinParser.CONST - 125)) | (1 << (KotlinParser.LATEINIT - 125)) | (1 << (KotlinParser.VARARG - 125)) | (1 << (KotlinParser.NOINLINE - 125)) | (1 << (KotlinParser.CROSSINLINE - 125)) | (1 << (KotlinParser.REIFIED - 125)) | (1 << (KotlinParser.EXPECT - 125)) | (1 << (KotlinParser.ACTUAL - 125)) | (1 << (KotlinParser.Identifier - 125)))) != 0)):
                        break

                self.state = 425
                self.match(KotlinParser.RSQUARE)
                pass
            elif token in [KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.VALUE, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.EXPECT, KotlinParser.ACTUAL, KotlinParser.Identifier]:
                self.state = 427
                self.unescapedAnnotation()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 430
                self.match(KotlinParser.NL)
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(KotlinParser.PACKAGE, 0)

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_packageHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageHeader" ):
                listener.enterPackageHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageHeader" ):
                listener.exitPackageHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackageHeader" ):
                return visitor.visitPackageHeader(self)
            else:
                return visitor.visitChildren(self)




    def packageHeader(self):

        localctx = KotlinParser.PackageHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_packageHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.PACKAGE:
                self.state = 436
                self.match(KotlinParser.PACKAGE)
                self.state = 437
                self.identifier()
                self.state = 439
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 438
                    self.semi()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importHeader(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ImportHeaderContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ImportHeaderContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_importList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportList" ):
                listener.enterImportList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportList" ):
                listener.exitImportList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportList" ):
                return visitor.visitImportList(self)
            else:
                return visitor.visitChildren(self)




    def importList(self):

        localctx = KotlinParser.ImportListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_importList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 443
                    self.importHeader() 
                self.state = 448
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(KotlinParser.IMPORT, 0)

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def importAlias(self):
            return self.getTypedRuleContext(KotlinParser.ImportAliasContext,0)


        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_importHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportHeader" ):
                listener.enterImportHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportHeader" ):
                listener.exitImportHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportHeader" ):
                return visitor.visitImportHeader(self)
            else:
                return visitor.visitChildren(self)




    def importHeader(self):

        localctx = KotlinParser.ImportHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_importHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(KotlinParser.IMPORT)
            self.state = 450
            self.identifier()
            self.state = 454
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.DOT]:
                self.state = 451
                self.match(KotlinParser.DOT)
                self.state = 452
                self.match(KotlinParser.MULT)
                pass
            elif token in [KotlinParser.AS]:
                self.state = 453
                self.importAlias()
                pass
            elif token in [KotlinParser.EOF, KotlinParser.NL, KotlinParser.LPAREN, KotlinParser.LSQUARE, KotlinParser.LCURL, KotlinParser.ADD, KotlinParser.SUB, KotlinParser.INCR, KotlinParser.DECR, KotlinParser.EXCL_WS, KotlinParser.EXCL_NO_WS, KotlinParser.SEMICOLON, KotlinParser.COLONCOLON, KotlinParser.AT_NO_WS, KotlinParser.AT_PRE_WS, KotlinParser.RETURN_AT, KotlinParser.CONTINUE_AT, KotlinParser.BREAK_AT, KotlinParser.THIS_AT, KotlinParser.SUPER_AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.IMPORT, KotlinParser.CLASS, KotlinParser.INTERFACE, KotlinParser.FUN, KotlinParser.OBJECT, KotlinParser.VAL, KotlinParser.VAR, KotlinParser.TYPE_ALIAS, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.THIS, KotlinParser.SUPER, KotlinParser.WHERE, KotlinParser.IF, KotlinParser.WHEN, KotlinParser.TRY, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.FOR, KotlinParser.DO, KotlinParser.WHILE, KotlinParser.THROW, KotlinParser.RETURN, KotlinParser.CONTINUE, KotlinParser.BREAK, KotlinParser.OUT, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.VALUE, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.EXPECT, KotlinParser.ACTUAL, KotlinParser.RealLiteral, KotlinParser.IntegerLiteral, KotlinParser.HexLiteral, KotlinParser.BinLiteral, KotlinParser.UnsignedLiteral, KotlinParser.LongLiteral, KotlinParser.BooleanLiteral, KotlinParser.NullLiteral, KotlinParser.CharacterLiteral, KotlinParser.Identifier, KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN]:
                pass
            else:
                pass
            self.state = 457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 456
                self.semi()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(KotlinParser.AS, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_importAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportAlias" ):
                listener.enterImportAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportAlias" ):
                listener.exitImportAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportAlias" ):
                return visitor.visitImportAlias(self)
            else:
                return visitor.visitChildren(self)




    def importAlias(self):

        localctx = KotlinParser.ImportAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.match(KotlinParser.AS)
            self.state = 460
            self.simpleIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(KotlinParser.DeclarationContext,0)


        def semis(self):
            return self.getTypedRuleContext(KotlinParser.SemisContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_topLevelObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelObject" ):
                listener.enterTopLevelObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelObject" ):
                listener.exitTopLevelObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelObject" ):
                return visitor.visitTopLevelObject(self)
            else:
                return visitor.visitChildren(self)




    def topLevelObject(self):

        localctx = KotlinParser.TopLevelObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_topLevelObject)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.declaration()
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.NL or _la==KotlinParser.SEMICOLON:
                self.state = 463
                self.semis()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE_ALIAS(self):
            return self.getToken(KotlinParser.TYPE_ALIAS, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = KotlinParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (KotlinParser.PUBLIC - 107)) | (1 << (KotlinParser.PRIVATE - 107)) | (1 << (KotlinParser.PROTECTED - 107)) | (1 << (KotlinParser.INTERNAL - 107)) | (1 << (KotlinParser.ENUM - 107)) | (1 << (KotlinParser.SEALED - 107)) | (1 << (KotlinParser.ANNOTATION - 107)) | (1 << (KotlinParser.DATA - 107)) | (1 << (KotlinParser.INNER - 107)) | (1 << (KotlinParser.VALUE - 107)) | (1 << (KotlinParser.TAILREC - 107)) | (1 << (KotlinParser.OPERATOR - 107)) | (1 << (KotlinParser.INLINE - 107)) | (1 << (KotlinParser.INFIX - 107)) | (1 << (KotlinParser.EXTERNAL - 107)) | (1 << (KotlinParser.SUSPEND - 107)) | (1 << (KotlinParser.OVERRIDE - 107)) | (1 << (KotlinParser.ABSTRACT - 107)) | (1 << (KotlinParser.FINAL - 107)) | (1 << (KotlinParser.OPEN - 107)) | (1 << (KotlinParser.CONST - 107)) | (1 << (KotlinParser.LATEINIT - 107)) | (1 << (KotlinParser.VARARG - 107)) | (1 << (KotlinParser.NOINLINE - 107)) | (1 << (KotlinParser.CROSSINLINE - 107)) | (1 << (KotlinParser.EXPECT - 107)) | (1 << (KotlinParser.ACTUAL - 107)))) != 0):
                self.state = 466
                self.modifiers()


            self.state = 469
            self.match(KotlinParser.TYPE_ALIAS)
            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 470
                self.match(KotlinParser.NL)
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 476
            self.simpleIdentifier()
            self.state = 484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 477
                    self.match(KotlinParser.NL)
                    self.state = 482
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 483
                self.typeParameters()


            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 486
                self.match(KotlinParser.NL)
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 492
            self.match(KotlinParser.ASSIGNMENT)
            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 493
                self.match(KotlinParser.NL)
                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 499
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ClassDeclarationContext,0)


        def objectDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ObjectDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.FunctionDeclarationContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.PropertyDeclarationContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(KotlinParser.TypeAliasContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = KotlinParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_declaration)
        try:
            self.state = 506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 502
                self.objectDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 503
                self.functionDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 504
                self.propertyDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 505
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def CLASS(self):
            return self.getToken(KotlinParser.CLASS, 0)

        def INTERFACE(self):
            return self.getToken(KotlinParser.INTERFACE, 0)

        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def primaryConstructor(self):
            return self.getTypedRuleContext(KotlinParser.PrimaryConstructorContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def enumClassBody(self):
            return self.getTypedRuleContext(KotlinParser.EnumClassBodyContext,0)


        def FUN(self):
            return self.getToken(KotlinParser.FUN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDeclaration" ):
                return visitor.visitClassDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classDeclaration(self):

        localctx = KotlinParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (KotlinParser.PUBLIC - 107)) | (1 << (KotlinParser.PRIVATE - 107)) | (1 << (KotlinParser.PROTECTED - 107)) | (1 << (KotlinParser.INTERNAL - 107)) | (1 << (KotlinParser.ENUM - 107)) | (1 << (KotlinParser.SEALED - 107)) | (1 << (KotlinParser.ANNOTATION - 107)) | (1 << (KotlinParser.DATA - 107)) | (1 << (KotlinParser.INNER - 107)) | (1 << (KotlinParser.VALUE - 107)) | (1 << (KotlinParser.TAILREC - 107)) | (1 << (KotlinParser.OPERATOR - 107)) | (1 << (KotlinParser.INLINE - 107)) | (1 << (KotlinParser.INFIX - 107)) | (1 << (KotlinParser.EXTERNAL - 107)) | (1 << (KotlinParser.SUSPEND - 107)) | (1 << (KotlinParser.OVERRIDE - 107)) | (1 << (KotlinParser.ABSTRACT - 107)) | (1 << (KotlinParser.FINAL - 107)) | (1 << (KotlinParser.OPEN - 107)) | (1 << (KotlinParser.CONST - 107)) | (1 << (KotlinParser.LATEINIT - 107)) | (1 << (KotlinParser.VARARG - 107)) | (1 << (KotlinParser.NOINLINE - 107)) | (1 << (KotlinParser.CROSSINLINE - 107)) | (1 << (KotlinParser.EXPECT - 107)) | (1 << (KotlinParser.ACTUAL - 107)))) != 0):
                self.state = 508
                self.modifiers()


            self.state = 522
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.CLASS]:
                self.state = 511
                self.match(KotlinParser.CLASS)
                pass
            elif token in [KotlinParser.INTERFACE, KotlinParser.FUN]:
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.FUN:
                    self.state = 512
                    self.match(KotlinParser.FUN)
                    self.state = 516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 513
                        self.match(KotlinParser.NL)
                        self.state = 518
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 521
                self.match(KotlinParser.INTERFACE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 524
                self.match(KotlinParser.NL)
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 530
            self.simpleIdentifier()
            self.state = 538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 531
                    self.match(KotlinParser.NL)
                    self.state = 536
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 537
                self.typeParameters()


            self.state = 547
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 540
                    self.match(KotlinParser.NL)
                    self.state = 545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 546
                self.primaryConstructor()


            self.state = 563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 549
                    self.match(KotlinParser.NL)
                    self.state = 554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 555
                self.match(KotlinParser.COLON)
                self.state = 559
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 556
                        self.match(KotlinParser.NL) 
                    self.state = 561
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

                self.state = 562
                self.delegationSpecifiers()


            self.state = 572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 565
                    self.match(KotlinParser.NL)
                    self.state = 570
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 571
                self.typeConstraints()


            self.state = 588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 574
                    self.match(KotlinParser.NL)
                    self.state = 579
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 580
                self.classBody()

            elif la_ == 2:
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 581
                    self.match(KotlinParser.NL)
                    self.state = 586
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 587
                self.enumClassBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classParameters(self):
            return self.getTypedRuleContext(KotlinParser.ClassParametersContext,0)


        def CONSTRUCTOR(self):
            return self.getToken(KotlinParser.CONSTRUCTOR, 0)

        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_primaryConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryConstructor" ):
                listener.enterPrimaryConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryConstructor" ):
                listener.exitPrimaryConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryConstructor" ):
                return visitor.visitPrimaryConstructor(self)
            else:
                return visitor.visitChildren(self)




    def primaryConstructor(self):

        localctx = KotlinParser.PrimaryConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_primaryConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (KotlinParser.CONSTRUCTOR - 79)) | (1 << (KotlinParser.PUBLIC - 79)) | (1 << (KotlinParser.PRIVATE - 79)) | (1 << (KotlinParser.PROTECTED - 79)) | (1 << (KotlinParser.INTERNAL - 79)) | (1 << (KotlinParser.ENUM - 79)) | (1 << (KotlinParser.SEALED - 79)) | (1 << (KotlinParser.ANNOTATION - 79)) | (1 << (KotlinParser.DATA - 79)) | (1 << (KotlinParser.INNER - 79)) | (1 << (KotlinParser.VALUE - 79)) | (1 << (KotlinParser.TAILREC - 79)) | (1 << (KotlinParser.OPERATOR - 79)) | (1 << (KotlinParser.INLINE - 79)) | (1 << (KotlinParser.INFIX - 79)) | (1 << (KotlinParser.EXTERNAL - 79)) | (1 << (KotlinParser.SUSPEND - 79)) | (1 << (KotlinParser.OVERRIDE - 79)) | (1 << (KotlinParser.ABSTRACT - 79)) | (1 << (KotlinParser.FINAL - 79)) | (1 << (KotlinParser.OPEN - 79)) | (1 << (KotlinParser.CONST - 79)) | (1 << (KotlinParser.LATEINIT - 79)) | (1 << (KotlinParser.VARARG - 79)) | (1 << (KotlinParser.NOINLINE - 79)) | (1 << (KotlinParser.CROSSINLINE - 79)) | (1 << (KotlinParser.EXPECT - 79)) | (1 << (KotlinParser.ACTUAL - 79)))) != 0):
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (KotlinParser.PUBLIC - 107)) | (1 << (KotlinParser.PRIVATE - 107)) | (1 << (KotlinParser.PROTECTED - 107)) | (1 << (KotlinParser.INTERNAL - 107)) | (1 << (KotlinParser.ENUM - 107)) | (1 << (KotlinParser.SEALED - 107)) | (1 << (KotlinParser.ANNOTATION - 107)) | (1 << (KotlinParser.DATA - 107)) | (1 << (KotlinParser.INNER - 107)) | (1 << (KotlinParser.VALUE - 107)) | (1 << (KotlinParser.TAILREC - 107)) | (1 << (KotlinParser.OPERATOR - 107)) | (1 << (KotlinParser.INLINE - 107)) | (1 << (KotlinParser.INFIX - 107)) | (1 << (KotlinParser.EXTERNAL - 107)) | (1 << (KotlinParser.SUSPEND - 107)) | (1 << (KotlinParser.OVERRIDE - 107)) | (1 << (KotlinParser.ABSTRACT - 107)) | (1 << (KotlinParser.FINAL - 107)) | (1 << (KotlinParser.OPEN - 107)) | (1 << (KotlinParser.CONST - 107)) | (1 << (KotlinParser.LATEINIT - 107)) | (1 << (KotlinParser.VARARG - 107)) | (1 << (KotlinParser.NOINLINE - 107)) | (1 << (KotlinParser.CROSSINLINE - 107)) | (1 << (KotlinParser.EXPECT - 107)) | (1 << (KotlinParser.ACTUAL - 107)))) != 0):
                    self.state = 590
                    self.modifiers()


                self.state = 593
                self.match(KotlinParser.CONSTRUCTOR)
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 594
                    self.match(KotlinParser.NL)
                    self.state = 599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 602
            self.classParameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def classMemberDeclarations(self):
            return self.getTypedRuleContext(KotlinParser.ClassMemberDeclarationsContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBody" ):
                return visitor.visitClassBody(self)
            else:
                return visitor.visitChildren(self)




    def classBody(self):

        localctx = KotlinParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.match(KotlinParser.LCURL)
            self.state = 608
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 605
                    self.match(KotlinParser.NL) 
                self.state = 610
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

            self.state = 611
            self.classMemberDeclarations()
            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 612
                self.match(KotlinParser.NL)
                self.state = 617
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 618
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def classParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ClassParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ClassParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_classParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassParameters" ):
                listener.enterClassParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassParameters" ):
                listener.exitClassParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassParameters" ):
                return visitor.visitClassParameters(self)
            else:
                return visitor.visitChildren(self)




    def classParameters(self):

        localctx = KotlinParser.ClassParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_classParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.match(KotlinParser.LPAREN)
            self.state = 624
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 621
                    self.match(KotlinParser.NL) 
                self.state = 626
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 627
                self.classParameter()
                self.state = 644
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 631
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 628
                            self.match(KotlinParser.NL)
                            self.state = 633
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 634
                        self.match(KotlinParser.COMMA)
                        self.state = 638
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 635
                                self.match(KotlinParser.NL) 
                            self.state = 640
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

                        self.state = 641
                        self.classParameter() 
                    self.state = 646
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

                self.state = 654
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 650
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 647
                        self.match(KotlinParser.NL)
                        self.state = 652
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 653
                    self.match(KotlinParser.COMMA)




            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 658
                self.match(KotlinParser.NL)
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 664
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def VAL(self):
            return self.getToken(KotlinParser.VAL, 0)

        def VAR(self):
            return self.getToken(KotlinParser.VAR, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_classParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassParameter" ):
                listener.enterClassParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassParameter" ):
                listener.exitClassParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassParameter" ):
                return visitor.visitClassParameter(self)
            else:
                return visitor.visitChildren(self)




    def classParameter(self):

        localctx = KotlinParser.ClassParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_classParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 666
                self.modifiers()


            self.state = 670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.VAL or _la==KotlinParser.VAR:
                self.state = 669
                _la = self._input.LA(1)
                if not(_la==KotlinParser.VAL or _la==KotlinParser.VAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 672
                self.match(KotlinParser.NL)
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 678
            self.simpleIdentifier()
            self.state = 679
            self.match(KotlinParser.COLON)
            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 680
                self.match(KotlinParser.NL)
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 686
            self.type_()
            self.state = 701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 687
                    self.match(KotlinParser.NL)
                    self.state = 692
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 693
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 694
                    self.match(KotlinParser.NL)
                    self.state = 699
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 700
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelegationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotatedDelegationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotatedDelegationSpecifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotatedDelegationSpecifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_delegationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegationSpecifiers" ):
                listener.enterDelegationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegationSpecifiers" ):
                listener.exitDelegationSpecifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelegationSpecifiers" ):
                return visitor.visitDelegationSpecifiers(self)
            else:
                return visitor.visitChildren(self)




    def delegationSpecifiers(self):

        localctx = KotlinParser.DelegationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_delegationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.annotatedDelegationSpecifier()
            self.state = 720
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 707
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 704
                        self.match(KotlinParser.NL)
                        self.state = 709
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 710
                    self.match(KotlinParser.COMMA)
                    self.state = 714
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 711
                            self.match(KotlinParser.NL) 
                        self.state = 716
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

                    self.state = 717
                    self.annotatedDelegationSpecifier() 
                self.state = 722
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelegationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorInvocation(self):
            return self.getTypedRuleContext(KotlinParser.ConstructorInvocationContext,0)


        def explicitDelegation(self):
            return self.getTypedRuleContext(KotlinParser.ExplicitDelegationContext,0)


        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def functionType(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_delegationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegationSpecifier" ):
                listener.enterDelegationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegationSpecifier" ):
                listener.exitDelegationSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelegationSpecifier" ):
                return visitor.visitDelegationSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def delegationSpecifier(self):

        localctx = KotlinParser.DelegationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_delegationSpecifier)
        try:
            self.state = 727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 723
                self.constructorInvocation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 724
                self.explicitDelegation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 725
                self.userType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 726
                self.functionType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_constructorInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorInvocation" ):
                listener.enterConstructorInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorInvocation" ):
                listener.exitConstructorInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorInvocation" ):
                return visitor.visitConstructorInvocation(self)
            else:
                return visitor.visitChildren(self)




    def constructorInvocation(self):

        localctx = KotlinParser.ConstructorInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_constructorInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.userType()
            self.state = 730
            self.valueArguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotatedDelegationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delegationSpecifier(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotatedDelegationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotatedDelegationSpecifier" ):
                listener.enterAnnotatedDelegationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotatedDelegationSpecifier" ):
                listener.exitAnnotatedDelegationSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotatedDelegationSpecifier" ):
                return visitor.visitAnnotatedDelegationSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def annotatedDelegationSpecifier(self):

        localctx = KotlinParser.AnnotatedDelegationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_annotatedDelegationSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 732
                    self.annotation() 
                self.state = 737
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 738
                self.match(KotlinParser.NL)
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 744
            self.delegationSpecifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitDelegationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(KotlinParser.BY, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def functionType(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_explicitDelegation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitDelegation" ):
                listener.enterExplicitDelegation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitDelegation" ):
                listener.exitExplicitDelegation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitDelegation" ):
                return visitor.visitExplicitDelegation(self)
            else:
                return visitor.visitChildren(self)




    def explicitDelegation(self):

        localctx = KotlinParser.ExplicitDelegationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_explicitDelegation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 746
                self.userType()
                pass

            elif la_ == 2:
                self.state = 747
                self.functionType()
                pass


            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 750
                self.match(KotlinParser.NL)
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 756
            self.match(KotlinParser.BY)
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 757
                self.match(KotlinParser.NL)
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 763
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeParameterContext,i)


        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameters" ):
                return visitor.visitTypeParameters(self)
            else:
                return visitor.visitChildren(self)




    def typeParameters(self):

        localctx = KotlinParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(KotlinParser.LANGLE)
            self.state = 769
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 766
                    self.match(KotlinParser.NL) 
                self.state = 771
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

            self.state = 772
            self.typeParameter()
            self.state = 789
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 776
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 773
                        self.match(KotlinParser.NL)
                        self.state = 778
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 779
                    self.match(KotlinParser.COMMA)
                    self.state = 783
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 780
                            self.match(KotlinParser.NL) 
                        self.state = 785
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                    self.state = 786
                    self.typeParameter() 
                self.state = 791
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

            self.state = 799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 792
                    self.match(KotlinParser.NL)
                    self.state = 797
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 798
                self.match(KotlinParser.COMMA)


            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 801
                self.match(KotlinParser.NL)
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 807
            self.match(KotlinParser.RANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def typeParameterModifiers(self):
            return self.getTypedRuleContext(KotlinParser.TypeParameterModifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameter" ):
                return visitor.visitTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def typeParameter(self):

        localctx = KotlinParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 809
                self.typeParameterModifiers()


            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 812
                self.match(KotlinParser.NL)
                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 818
            self.simpleIdentifier()
            self.state = 833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 819
                    self.match(KotlinParser.NL)
                    self.state = 824
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 825
                self.match(KotlinParser.COLON)
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 826
                    self.match(KotlinParser.NL)
                    self.state = 831
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 832
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeConstraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(KotlinParser.WHERE, 0)

        def typeConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeConstraintContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeConstraintContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeConstraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstraints" ):
                listener.enterTypeConstraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstraints" ):
                listener.exitTypeConstraints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstraints" ):
                return visitor.visitTypeConstraints(self)
            else:
                return visitor.visitChildren(self)




    def typeConstraints(self):

        localctx = KotlinParser.TypeConstraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_typeConstraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(KotlinParser.WHERE)
            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 836
                self.match(KotlinParser.NL)
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 842
            self.typeConstraint()
            self.state = 859
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 843
                        self.match(KotlinParser.NL)
                        self.state = 848
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 849
                    self.match(KotlinParser.COMMA)
                    self.state = 853
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 850
                        self.match(KotlinParser.NL)
                        self.state = 855
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 856
                    self.typeConstraint() 
                self.state = 861
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstraint" ):
                listener.enterTypeConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstraint" ):
                listener.exitTypeConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstraint" ):
                return visitor.visitTypeConstraint(self)
            else:
                return visitor.visitChildren(self)




    def typeConstraint(self):

        localctx = KotlinParser.TypeConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_typeConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS:
                self.state = 862
                self.annotation()
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 868
            self.simpleIdentifier()
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 869
                self.match(KotlinParser.NL)
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 875
            self.match(KotlinParser.COLON)
            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 876
                self.match(KotlinParser.NL)
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 882
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMemberDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ClassMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ClassMemberDeclarationContext,i)


        def semis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SemisContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SemisContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_classMemberDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMemberDeclarations" ):
                listener.enterClassMemberDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMemberDeclarations" ):
                listener.exitClassMemberDeclarations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassMemberDeclarations" ):
                return visitor.visitClassMemberDeclarations(self)
            else:
                return visitor.visitChildren(self)




    def classMemberDeclarations(self):

        localctx = KotlinParser.ClassMemberDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_classMemberDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (KotlinParser.CLASS - 72)) | (1 << (KotlinParser.INTERFACE - 72)) | (1 << (KotlinParser.FUN - 72)) | (1 << (KotlinParser.OBJECT - 72)) | (1 << (KotlinParser.VAL - 72)) | (1 << (KotlinParser.VAR - 72)) | (1 << (KotlinParser.TYPE_ALIAS - 72)) | (1 << (KotlinParser.CONSTRUCTOR - 72)) | (1 << (KotlinParser.COMPANION - 72)) | (1 << (KotlinParser.INIT - 72)) | (1 << (KotlinParser.PUBLIC - 72)) | (1 << (KotlinParser.PRIVATE - 72)) | (1 << (KotlinParser.PROTECTED - 72)) | (1 << (KotlinParser.INTERNAL - 72)) | (1 << (KotlinParser.ENUM - 72)) | (1 << (KotlinParser.SEALED - 72)) | (1 << (KotlinParser.ANNOTATION - 72)) | (1 << (KotlinParser.DATA - 72)) | (1 << (KotlinParser.INNER - 72)) | (1 << (KotlinParser.VALUE - 72)) | (1 << (KotlinParser.TAILREC - 72)) | (1 << (KotlinParser.OPERATOR - 72)) | (1 << (KotlinParser.INLINE - 72)) | (1 << (KotlinParser.INFIX - 72)) | (1 << (KotlinParser.EXTERNAL - 72)) | (1 << (KotlinParser.SUSPEND - 72)) | (1 << (KotlinParser.OVERRIDE - 72)) | (1 << (KotlinParser.ABSTRACT - 72)) | (1 << (KotlinParser.FINAL - 72)) | (1 << (KotlinParser.OPEN - 72)) | (1 << (KotlinParser.CONST - 72)) | (1 << (KotlinParser.LATEINIT - 72)) | (1 << (KotlinParser.VARARG - 72)) | (1 << (KotlinParser.NOINLINE - 72)) | (1 << (KotlinParser.CROSSINLINE - 72)) | (1 << (KotlinParser.EXPECT - 72)) | (1 << (KotlinParser.ACTUAL - 72)))) != 0):
                self.state = 884
                self.classMemberDeclaration()
                self.state = 886
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 885
                    self.semis()


                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(KotlinParser.DeclarationContext,0)


        def companionObject(self):
            return self.getTypedRuleContext(KotlinParser.CompanionObjectContext,0)


        def anonymousInitializer(self):
            return self.getTypedRuleContext(KotlinParser.AnonymousInitializerContext,0)


        def secondaryConstructor(self):
            return self.getTypedRuleContext(KotlinParser.SecondaryConstructorContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_classMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMemberDeclaration" ):
                listener.enterClassMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMemberDeclaration" ):
                listener.exitClassMemberDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassMemberDeclaration" ):
                return visitor.visitClassMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classMemberDeclaration(self):

        localctx = KotlinParser.ClassMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_classMemberDeclaration)
        try:
            self.state = 897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 893
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 894
                self.companionObject()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 895
                self.anonymousInitializer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 896
                self.secondaryConstructor()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnonymousInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INIT(self):
            return self.getToken(KotlinParser.INIT, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_anonymousInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousInitializer" ):
                listener.enterAnonymousInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousInitializer" ):
                listener.exitAnonymousInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnonymousInitializer" ):
                return visitor.visitAnonymousInitializer(self)
            else:
                return visitor.visitChildren(self)




    def anonymousInitializer(self):

        localctx = KotlinParser.AnonymousInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_anonymousInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.match(KotlinParser.INIT)
            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 900
                self.match(KotlinParser.NL)
                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 906
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompanionObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPANION(self):
            return self.getToken(KotlinParser.COMPANION, 0)

        def OBJECT(self):
            return self.getToken(KotlinParser.OBJECT, 0)

        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_companionObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompanionObject" ):
                listener.enterCompanionObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompanionObject" ):
                listener.exitCompanionObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompanionObject" ):
                return visitor.visitCompanionObject(self)
            else:
                return visitor.visitChildren(self)




    def companionObject(self):

        localctx = KotlinParser.CompanionObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_companionObject)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (KotlinParser.PUBLIC - 107)) | (1 << (KotlinParser.PRIVATE - 107)) | (1 << (KotlinParser.PROTECTED - 107)) | (1 << (KotlinParser.INTERNAL - 107)) | (1 << (KotlinParser.ENUM - 107)) | (1 << (KotlinParser.SEALED - 107)) | (1 << (KotlinParser.ANNOTATION - 107)) | (1 << (KotlinParser.DATA - 107)) | (1 << (KotlinParser.INNER - 107)) | (1 << (KotlinParser.VALUE - 107)) | (1 << (KotlinParser.TAILREC - 107)) | (1 << (KotlinParser.OPERATOR - 107)) | (1 << (KotlinParser.INLINE - 107)) | (1 << (KotlinParser.INFIX - 107)) | (1 << (KotlinParser.EXTERNAL - 107)) | (1 << (KotlinParser.SUSPEND - 107)) | (1 << (KotlinParser.OVERRIDE - 107)) | (1 << (KotlinParser.ABSTRACT - 107)) | (1 << (KotlinParser.FINAL - 107)) | (1 << (KotlinParser.OPEN - 107)) | (1 << (KotlinParser.CONST - 107)) | (1 << (KotlinParser.LATEINIT - 107)) | (1 << (KotlinParser.VARARG - 107)) | (1 << (KotlinParser.NOINLINE - 107)) | (1 << (KotlinParser.CROSSINLINE - 107)) | (1 << (KotlinParser.EXPECT - 107)) | (1 << (KotlinParser.ACTUAL - 107)))) != 0):
                self.state = 908
                self.modifiers()


            self.state = 911
            self.match(KotlinParser.COMPANION)
            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 912
                self.match(KotlinParser.NL)
                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 918
            self.match(KotlinParser.OBJECT)
            self.state = 926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 919
                    self.match(KotlinParser.NL)
                    self.state = 924
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 925
                self.simpleIdentifier()


            self.state = 942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 928
                    self.match(KotlinParser.NL)
                    self.state = 933
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 934
                self.match(KotlinParser.COLON)
                self.state = 938
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 935
                        self.match(KotlinParser.NL) 
                    self.state = 940
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

                self.state = 941
                self.delegationSpecifiers()


            self.state = 951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 944
                    self.match(KotlinParser.NL)
                    self.state = 949
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 950
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionValueParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def functionValueParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.FunctionValueParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.FunctionValueParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionValueParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionValueParameters" ):
                listener.enterFunctionValueParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionValueParameters" ):
                listener.exitFunctionValueParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionValueParameters" ):
                return visitor.visitFunctionValueParameters(self)
            else:
                return visitor.visitChildren(self)




    def functionValueParameters(self):

        localctx = KotlinParser.FunctionValueParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_functionValueParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.match(KotlinParser.LPAREN)
            self.state = 957
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 954
                    self.match(KotlinParser.NL) 
                self.state = 959
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

            self.state = 989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT_NO_WS - 40)) | (1 << (KotlinParser.AT_PRE_WS - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)) | (1 << (KotlinParser.IMPORT - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.BY - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)) | (1 << (KotlinParser.WHERE - 40)) | (1 << (KotlinParser.CATCH - 40)) | (1 << (KotlinParser.FINALLY - 40)))) != 0) or ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & ((1 << (KotlinParser.OUT - 105)) | (1 << (KotlinParser.DYNAMIC - 105)) | (1 << (KotlinParser.PUBLIC - 105)) | (1 << (KotlinParser.PRIVATE - 105)) | (1 << (KotlinParser.PROTECTED - 105)) | (1 << (KotlinParser.INTERNAL - 105)) | (1 << (KotlinParser.ENUM - 105)) | (1 << (KotlinParser.SEALED - 105)) | (1 << (KotlinParser.ANNOTATION - 105)) | (1 << (KotlinParser.DATA - 105)) | (1 << (KotlinParser.INNER - 105)) | (1 << (KotlinParser.VALUE - 105)) | (1 << (KotlinParser.TAILREC - 105)) | (1 << (KotlinParser.OPERATOR - 105)) | (1 << (KotlinParser.INLINE - 105)) | (1 << (KotlinParser.INFIX - 105)) | (1 << (KotlinParser.EXTERNAL - 105)) | (1 << (KotlinParser.SUSPEND - 105)) | (1 << (KotlinParser.OVERRIDE - 105)) | (1 << (KotlinParser.ABSTRACT - 105)) | (1 << (KotlinParser.FINAL - 105)) | (1 << (KotlinParser.OPEN - 105)) | (1 << (KotlinParser.CONST - 105)) | (1 << (KotlinParser.LATEINIT - 105)) | (1 << (KotlinParser.VARARG - 105)) | (1 << (KotlinParser.NOINLINE - 105)) | (1 << (KotlinParser.CROSSINLINE - 105)) | (1 << (KotlinParser.REIFIED - 105)) | (1 << (KotlinParser.EXPECT - 105)) | (1 << (KotlinParser.ACTUAL - 105)) | (1 << (KotlinParser.Identifier - 105)))) != 0):
                self.state = 960
                self.functionValueParameter()
                self.state = 977
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 964
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 961
                            self.match(KotlinParser.NL)
                            self.state = 966
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 967
                        self.match(KotlinParser.COMMA)
                        self.state = 971
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 968
                            self.match(KotlinParser.NL)
                            self.state = 973
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 974
                        self.functionValueParameter() 
                    self.state = 979
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

                self.state = 987
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 983
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 980
                        self.match(KotlinParser.NL)
                        self.state = 985
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 986
                    self.match(KotlinParser.COMMA)




            self.state = 994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 991
                self.match(KotlinParser.NL)
                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 997
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionValueParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self):
            return self.getTypedRuleContext(KotlinParser.ParameterContext,0)


        def parameterModifiers(self):
            return self.getTypedRuleContext(KotlinParser.ParameterModifiersContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionValueParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionValueParameter" ):
                listener.enterFunctionValueParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionValueParameter" ):
                listener.exitFunctionValueParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionValueParameter" ):
                return visitor.visitFunctionValueParameter(self)
            else:
                return visitor.visitChildren(self)




    def functionValueParameter(self):

        localctx = KotlinParser.FunctionValueParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_functionValueParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 999
                self.parameterModifiers()


            self.state = 1002
            self.parameter()
            self.state = 1017
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1003
                    self.match(KotlinParser.NL)
                    self.state = 1008
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1009
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1010
                    self.match(KotlinParser.NL)
                    self.state = 1015
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1016
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUN(self):
            return self.getToken(KotlinParser.FUN, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def functionValueParameters(self):
            return self.getTypedRuleContext(KotlinParser.FunctionValueParametersContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def receiverType(self):
            return self.getTypedRuleContext(KotlinParser.ReceiverTypeContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(KotlinParser.FunctionBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDeclaration" ):
                return visitor.visitFunctionDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def functionDeclaration(self):

        localctx = KotlinParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (KotlinParser.PUBLIC - 107)) | (1 << (KotlinParser.PRIVATE - 107)) | (1 << (KotlinParser.PROTECTED - 107)) | (1 << (KotlinParser.INTERNAL - 107)) | (1 << (KotlinParser.ENUM - 107)) | (1 << (KotlinParser.SEALED - 107)) | (1 << (KotlinParser.ANNOTATION - 107)) | (1 << (KotlinParser.DATA - 107)) | (1 << (KotlinParser.INNER - 107)) | (1 << (KotlinParser.VALUE - 107)) | (1 << (KotlinParser.TAILREC - 107)) | (1 << (KotlinParser.OPERATOR - 107)) | (1 << (KotlinParser.INLINE - 107)) | (1 << (KotlinParser.INFIX - 107)) | (1 << (KotlinParser.EXTERNAL - 107)) | (1 << (KotlinParser.SUSPEND - 107)) | (1 << (KotlinParser.OVERRIDE - 107)) | (1 << (KotlinParser.ABSTRACT - 107)) | (1 << (KotlinParser.FINAL - 107)) | (1 << (KotlinParser.OPEN - 107)) | (1 << (KotlinParser.CONST - 107)) | (1 << (KotlinParser.LATEINIT - 107)) | (1 << (KotlinParser.VARARG - 107)) | (1 << (KotlinParser.NOINLINE - 107)) | (1 << (KotlinParser.CROSSINLINE - 107)) | (1 << (KotlinParser.EXPECT - 107)) | (1 << (KotlinParser.ACTUAL - 107)))) != 0):
                self.state = 1019
                self.modifiers()


            self.state = 1022
            self.match(KotlinParser.FUN)
            self.state = 1030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1023
                    self.match(KotlinParser.NL)
                    self.state = 1028
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1029
                self.typeParameters()


            self.state = 1047
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1032
                    self.match(KotlinParser.NL)
                    self.state = 1037
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1038
                self.receiverType()
                self.state = 1042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1039
                    self.match(KotlinParser.NL)
                    self.state = 1044
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1045
                self.match(KotlinParser.DOT)


            self.state = 1052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1049
                self.match(KotlinParser.NL)
                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1055
            self.simpleIdentifier()
            self.state = 1059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1056
                self.match(KotlinParser.NL)
                self.state = 1061
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1062
            self.functionValueParameters()
            self.state = 1077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1063
                    self.match(KotlinParser.NL)
                    self.state = 1068
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1069
                self.match(KotlinParser.COLON)
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1070
                    self.match(KotlinParser.NL)
                    self.state = 1075
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1076
                self.type_()


            self.state = 1086
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1079
                    self.match(KotlinParser.NL)
                    self.state = 1084
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1085
                self.typeConstraints()


            self.state = 1095
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1088
                    self.match(KotlinParser.NL)
                    self.state = 1093
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1094
                self.functionBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionBody" ):
                return visitor.visitFunctionBody(self)
            else:
                return visitor.visitChildren(self)




    def functionBody(self):

        localctx = KotlinParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_functionBody)
        self._la = 0 # Token type
        try:
            self.state = 1106
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LCURL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1097
                self.block()
                pass
            elif token in [KotlinParser.ASSIGNMENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1098
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 1102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1099
                    self.match(KotlinParser.NL)
                    self.state = 1104
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1105
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaration" ):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaration(self):

        localctx = KotlinParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_variableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS:
                self.state = 1108
                self.annotation()
                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1114
                self.match(KotlinParser.NL)
                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1120
            self.simpleIdentifier()
            self.state = 1135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1121
                    self.match(KotlinParser.NL)
                    self.state = 1126
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1127
                self.match(KotlinParser.COLON)
                self.state = 1131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1128
                    self.match(KotlinParser.NL)
                    self.state = 1133
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1134
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,i)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiVariableDeclaration" ):
                listener.enterMultiVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiVariableDeclaration" ):
                listener.exitMultiVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiVariableDeclaration" ):
                return visitor.visitMultiVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def multiVariableDeclaration(self):

        localctx = KotlinParser.MultiVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_multiVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.match(KotlinParser.LPAREN)
            self.state = 1141
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1138
                    self.match(KotlinParser.NL) 
                self.state = 1143
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

            self.state = 1144
            self.variableDeclaration()
            self.state = 1161
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1145
                        self.match(KotlinParser.NL)
                        self.state = 1150
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1151
                    self.match(KotlinParser.COMMA)
                    self.state = 1155
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1152
                            self.match(KotlinParser.NL) 
                        self.state = 1157
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

                    self.state = 1158
                    self.variableDeclaration() 
                self.state = 1163
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

            self.state = 1171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1164
                    self.match(KotlinParser.NL)
                    self.state = 1169
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1170
                self.match(KotlinParser.COMMA)


            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1173
                self.match(KotlinParser.NL)
                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1179
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAL(self):
            return self.getToken(KotlinParser.VAL, 0)

        def VAR(self):
            return self.getToken(KotlinParser.VAR, 0)

        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def receiverType(self):
            return self.getTypedRuleContext(KotlinParser.ReceiverTypeContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def multiVariableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.MultiVariableDeclarationContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def propertyDelegate(self):
            return self.getTypedRuleContext(KotlinParser.PropertyDelegateContext,0)


        def getter(self):
            return self.getTypedRuleContext(KotlinParser.GetterContext,0)


        def setter(self):
            return self.getTypedRuleContext(KotlinParser.SetterContext,0)


        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_propertyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyDeclaration" ):
                listener.enterPropertyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyDeclaration" ):
                listener.exitPropertyDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyDeclaration" ):
                return visitor.visitPropertyDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def propertyDeclaration(self):

        localctx = KotlinParser.PropertyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_propertyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (KotlinParser.PUBLIC - 107)) | (1 << (KotlinParser.PRIVATE - 107)) | (1 << (KotlinParser.PROTECTED - 107)) | (1 << (KotlinParser.INTERNAL - 107)) | (1 << (KotlinParser.ENUM - 107)) | (1 << (KotlinParser.SEALED - 107)) | (1 << (KotlinParser.ANNOTATION - 107)) | (1 << (KotlinParser.DATA - 107)) | (1 << (KotlinParser.INNER - 107)) | (1 << (KotlinParser.VALUE - 107)) | (1 << (KotlinParser.TAILREC - 107)) | (1 << (KotlinParser.OPERATOR - 107)) | (1 << (KotlinParser.INLINE - 107)) | (1 << (KotlinParser.INFIX - 107)) | (1 << (KotlinParser.EXTERNAL - 107)) | (1 << (KotlinParser.SUSPEND - 107)) | (1 << (KotlinParser.OVERRIDE - 107)) | (1 << (KotlinParser.ABSTRACT - 107)) | (1 << (KotlinParser.FINAL - 107)) | (1 << (KotlinParser.OPEN - 107)) | (1 << (KotlinParser.CONST - 107)) | (1 << (KotlinParser.LATEINIT - 107)) | (1 << (KotlinParser.VARARG - 107)) | (1 << (KotlinParser.NOINLINE - 107)) | (1 << (KotlinParser.CROSSINLINE - 107)) | (1 << (KotlinParser.EXPECT - 107)) | (1 << (KotlinParser.ACTUAL - 107)))) != 0):
                self.state = 1181
                self.modifiers()


            self.state = 1184
            _la = self._input.LA(1)
            if not(_la==KotlinParser.VAL or _la==KotlinParser.VAR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1185
                    self.match(KotlinParser.NL)
                    self.state = 1190
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1191
                self.typeParameters()


            self.state = 1209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1194
                    self.match(KotlinParser.NL)
                    self.state = 1199
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1200
                self.receiverType()
                self.state = 1204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1201
                    self.match(KotlinParser.NL)
                    self.state = 1206
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1207
                self.match(KotlinParser.DOT)


            self.state = 1214
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1211
                    self.match(KotlinParser.NL) 
                self.state = 1216
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

            self.state = 1219
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LPAREN]:
                self.state = 1217
                self.multiVariableDeclaration()
                pass
            elif token in [KotlinParser.NL, KotlinParser.AT_NO_WS, KotlinParser.AT_PRE_WS, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.VALUE, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.EXPECT, KotlinParser.ACTUAL, KotlinParser.Identifier]:
                self.state = 1218
                self.variableDeclaration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 1224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1221
                    self.match(KotlinParser.NL)
                    self.state = 1226
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1227
                self.typeConstraints()


            self.state = 1247
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1230
                    self.match(KotlinParser.NL)
                    self.state = 1235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1245
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [KotlinParser.ASSIGNMENT]:
                    self.state = 1236
                    self.match(KotlinParser.ASSIGNMENT)
                    self.state = 1240
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1237
                        self.match(KotlinParser.NL)
                        self.state = 1242
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1243
                    self.expression()
                    pass
                elif token in [KotlinParser.BY]:
                    self.state = 1244
                    self.propertyDelegate()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1250 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1249
                    self.match(KotlinParser.NL)
                    self.state = 1252 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==KotlinParser.NL):
                        break

                self.state = 1254
                self.match(KotlinParser.SEMICOLON)


            self.state = 1260
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1257
                    self.match(KotlinParser.NL) 
                self.state = 1262
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

            self.state = 1293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1264
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1263
                    self.getter()


                self.state = 1276
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 1269
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1266
                            self.match(KotlinParser.NL) 
                        self.state = 1271
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

                    self.state = 1273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - -1)) & ~0x3f) == 0 and ((1 << (_la - -1)) & ((1 << (KotlinParser.EOF - -1)) | (1 << (KotlinParser.NL - -1)) | (1 << (KotlinParser.SEMICOLON - -1)))) != 0):
                        self.state = 1272
                        self.semi()


                    self.state = 1275
                    self.setter()


                pass

            elif la_ == 2:
                self.state = 1279
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1278
                    self.setter()


                self.state = 1291
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1284
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1281
                            self.match(KotlinParser.NL) 
                        self.state = 1286
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

                    self.state = 1288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - -1)) & ~0x3f) == 0 and ((1 << (_la - -1)) & ((1 << (KotlinParser.EOF - -1)) | (1 << (KotlinParser.NL - -1)) | (1 << (KotlinParser.SEMICOLON - -1)))) != 0):
                        self.state = 1287
                        self.semi()


                    self.state = 1290
                    self.getter()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyDelegateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(KotlinParser.BY, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_propertyDelegate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyDelegate" ):
                listener.enterPropertyDelegate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyDelegate" ):
                listener.exitPropertyDelegate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyDelegate" ):
                return visitor.visitPropertyDelegate(self)
            else:
                return visitor.visitChildren(self)




    def propertyDelegate(self):

        localctx = KotlinParser.PropertyDelegateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_propertyDelegate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.match(KotlinParser.BY)
            self.state = 1299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1296
                self.match(KotlinParser.NL)
                self.state = 1301
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1302
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(KotlinParser.GET, 0)

        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def functionBody(self):
            return self.getTypedRuleContext(KotlinParser.FunctionBodyContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_getter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter" ):
                listener.enterGetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter" ):
                listener.exitGetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetter" ):
                return visitor.visitGetter(self)
            else:
                return visitor.visitChildren(self)




    def getter(self):

        localctx = KotlinParser.GetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_getter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (KotlinParser.PUBLIC - 107)) | (1 << (KotlinParser.PRIVATE - 107)) | (1 << (KotlinParser.PROTECTED - 107)) | (1 << (KotlinParser.INTERNAL - 107)) | (1 << (KotlinParser.ENUM - 107)) | (1 << (KotlinParser.SEALED - 107)) | (1 << (KotlinParser.ANNOTATION - 107)) | (1 << (KotlinParser.DATA - 107)) | (1 << (KotlinParser.INNER - 107)) | (1 << (KotlinParser.VALUE - 107)) | (1 << (KotlinParser.TAILREC - 107)) | (1 << (KotlinParser.OPERATOR - 107)) | (1 << (KotlinParser.INLINE - 107)) | (1 << (KotlinParser.INFIX - 107)) | (1 << (KotlinParser.EXTERNAL - 107)) | (1 << (KotlinParser.SUSPEND - 107)) | (1 << (KotlinParser.OVERRIDE - 107)) | (1 << (KotlinParser.ABSTRACT - 107)) | (1 << (KotlinParser.FINAL - 107)) | (1 << (KotlinParser.OPEN - 107)) | (1 << (KotlinParser.CONST - 107)) | (1 << (KotlinParser.LATEINIT - 107)) | (1 << (KotlinParser.VARARG - 107)) | (1 << (KotlinParser.NOINLINE - 107)) | (1 << (KotlinParser.CROSSINLINE - 107)) | (1 << (KotlinParser.EXPECT - 107)) | (1 << (KotlinParser.ACTUAL - 107)))) != 0):
                self.state = 1304
                self.modifiers()


            self.state = 1307
            self.match(KotlinParser.GET)
            self.state = 1345
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 1311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1308
                    self.match(KotlinParser.NL)
                    self.state = 1313
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1314
                self.match(KotlinParser.LPAREN)
                self.state = 1318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1315
                    self.match(KotlinParser.NL)
                    self.state = 1320
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1321
                self.match(KotlinParser.RPAREN)
                self.state = 1336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 1325
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1322
                        self.match(KotlinParser.NL)
                        self.state = 1327
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1328
                    self.match(KotlinParser.COLON)
                    self.state = 1332
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1329
                        self.match(KotlinParser.NL)
                        self.state = 1334
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1335
                    self.type_()


                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1338
                    self.match(KotlinParser.NL)
                    self.state = 1343
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1344
                self.functionBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(KotlinParser.SET, 0)

        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def functionValueParameterWithOptionalType(self):
            return self.getTypedRuleContext(KotlinParser.FunctionValueParameterWithOptionalTypeContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def functionBody(self):
            return self.getTypedRuleContext(KotlinParser.FunctionBodyContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self):
            return self.getToken(KotlinParser.COMMA, 0)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_setter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter" ):
                listener.enterSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter" ):
                listener.exitSetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetter" ):
                return visitor.visitSetter(self)
            else:
                return visitor.visitChildren(self)




    def setter(self):

        localctx = KotlinParser.SetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_setter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (KotlinParser.PUBLIC - 107)) | (1 << (KotlinParser.PRIVATE - 107)) | (1 << (KotlinParser.PROTECTED - 107)) | (1 << (KotlinParser.INTERNAL - 107)) | (1 << (KotlinParser.ENUM - 107)) | (1 << (KotlinParser.SEALED - 107)) | (1 << (KotlinParser.ANNOTATION - 107)) | (1 << (KotlinParser.DATA - 107)) | (1 << (KotlinParser.INNER - 107)) | (1 << (KotlinParser.VALUE - 107)) | (1 << (KotlinParser.TAILREC - 107)) | (1 << (KotlinParser.OPERATOR - 107)) | (1 << (KotlinParser.INLINE - 107)) | (1 << (KotlinParser.INFIX - 107)) | (1 << (KotlinParser.EXTERNAL - 107)) | (1 << (KotlinParser.SUSPEND - 107)) | (1 << (KotlinParser.OVERRIDE - 107)) | (1 << (KotlinParser.ABSTRACT - 107)) | (1 << (KotlinParser.FINAL - 107)) | (1 << (KotlinParser.OPEN - 107)) | (1 << (KotlinParser.CONST - 107)) | (1 << (KotlinParser.LATEINIT - 107)) | (1 << (KotlinParser.VARARG - 107)) | (1 << (KotlinParser.NOINLINE - 107)) | (1 << (KotlinParser.CROSSINLINE - 107)) | (1 << (KotlinParser.EXPECT - 107)) | (1 << (KotlinParser.ACTUAL - 107)))) != 0):
                self.state = 1347
                self.modifiers()


            self.state = 1350
            self.match(KotlinParser.SET)
            self.state = 1405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1351
                    self.match(KotlinParser.NL)
                    self.state = 1356
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1357
                self.match(KotlinParser.LPAREN)
                self.state = 1361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1358
                    self.match(KotlinParser.NL)
                    self.state = 1363
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1364
                self.functionValueParameterWithOptionalType()
                self.state = 1372
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1368
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1365
                        self.match(KotlinParser.NL)
                        self.state = 1370
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1371
                    self.match(KotlinParser.COMMA)


                self.state = 1377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1374
                    self.match(KotlinParser.NL)
                    self.state = 1379
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1380
                self.match(KotlinParser.RPAREN)
                self.state = 1395
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                if la_ == 1:
                    self.state = 1384
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1381
                        self.match(KotlinParser.NL)
                        self.state = 1386
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1387
                    self.match(KotlinParser.COLON)
                    self.state = 1391
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1388
                        self.match(KotlinParser.NL)
                        self.state = 1393
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1394
                    self.type_()


                self.state = 1400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1397
                    self.match(KotlinParser.NL)
                    self.state = 1402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1403
                self.functionBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersWithOptionalTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def functionValueParameterWithOptionalType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.FunctionValueParameterWithOptionalTypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.FunctionValueParameterWithOptionalTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_parametersWithOptionalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParametersWithOptionalType" ):
                listener.enterParametersWithOptionalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParametersWithOptionalType" ):
                listener.exitParametersWithOptionalType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParametersWithOptionalType" ):
                return visitor.visitParametersWithOptionalType(self)
            else:
                return visitor.visitChildren(self)




    def parametersWithOptionalType(self):

        localctx = KotlinParser.ParametersWithOptionalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_parametersWithOptionalType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1407
            self.match(KotlinParser.LPAREN)
            self.state = 1411
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1408
                    self.match(KotlinParser.NL) 
                self.state = 1413
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

            self.state = 1443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT_NO_WS - 40)) | (1 << (KotlinParser.AT_PRE_WS - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)) | (1 << (KotlinParser.IMPORT - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.BY - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)) | (1 << (KotlinParser.WHERE - 40)) | (1 << (KotlinParser.CATCH - 40)) | (1 << (KotlinParser.FINALLY - 40)))) != 0) or ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & ((1 << (KotlinParser.OUT - 105)) | (1 << (KotlinParser.DYNAMIC - 105)) | (1 << (KotlinParser.PUBLIC - 105)) | (1 << (KotlinParser.PRIVATE - 105)) | (1 << (KotlinParser.PROTECTED - 105)) | (1 << (KotlinParser.INTERNAL - 105)) | (1 << (KotlinParser.ENUM - 105)) | (1 << (KotlinParser.SEALED - 105)) | (1 << (KotlinParser.ANNOTATION - 105)) | (1 << (KotlinParser.DATA - 105)) | (1 << (KotlinParser.INNER - 105)) | (1 << (KotlinParser.VALUE - 105)) | (1 << (KotlinParser.TAILREC - 105)) | (1 << (KotlinParser.OPERATOR - 105)) | (1 << (KotlinParser.INLINE - 105)) | (1 << (KotlinParser.INFIX - 105)) | (1 << (KotlinParser.EXTERNAL - 105)) | (1 << (KotlinParser.SUSPEND - 105)) | (1 << (KotlinParser.OVERRIDE - 105)) | (1 << (KotlinParser.ABSTRACT - 105)) | (1 << (KotlinParser.FINAL - 105)) | (1 << (KotlinParser.OPEN - 105)) | (1 << (KotlinParser.CONST - 105)) | (1 << (KotlinParser.LATEINIT - 105)) | (1 << (KotlinParser.VARARG - 105)) | (1 << (KotlinParser.NOINLINE - 105)) | (1 << (KotlinParser.CROSSINLINE - 105)) | (1 << (KotlinParser.REIFIED - 105)) | (1 << (KotlinParser.EXPECT - 105)) | (1 << (KotlinParser.ACTUAL - 105)) | (1 << (KotlinParser.Identifier - 105)))) != 0):
                self.state = 1414
                self.functionValueParameterWithOptionalType()
                self.state = 1431
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1418
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 1415
                            self.match(KotlinParser.NL)
                            self.state = 1420
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1421
                        self.match(KotlinParser.COMMA)
                        self.state = 1425
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 1422
                            self.match(KotlinParser.NL)
                            self.state = 1427
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1428
                        self.functionValueParameterWithOptionalType() 
                    self.state = 1433
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

                self.state = 1441
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 1437
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1434
                        self.match(KotlinParser.NL)
                        self.state = 1439
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1440
                    self.match(KotlinParser.COMMA)




            self.state = 1448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1445
                self.match(KotlinParser.NL)
                self.state = 1450
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1451
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionValueParameterWithOptionalTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterWithOptionalType(self):
            return self.getTypedRuleContext(KotlinParser.ParameterWithOptionalTypeContext,0)


        def parameterModifiers(self):
            return self.getTypedRuleContext(KotlinParser.ParameterModifiersContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionValueParameterWithOptionalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionValueParameterWithOptionalType" ):
                listener.enterFunctionValueParameterWithOptionalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionValueParameterWithOptionalType" ):
                listener.exitFunctionValueParameterWithOptionalType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionValueParameterWithOptionalType" ):
                return visitor.visitFunctionValueParameterWithOptionalType(self)
            else:
                return visitor.visitChildren(self)




    def functionValueParameterWithOptionalType(self):

        localctx = KotlinParser.FunctionValueParameterWithOptionalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_functionValueParameterWithOptionalType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 1453
                self.parameterModifiers()


            self.state = 1456
            self.parameterWithOptionalType()
            self.state = 1471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.state = 1460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1457
                    self.match(KotlinParser.NL)
                    self.state = 1462
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1463
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 1467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1464
                    self.match(KotlinParser.NL)
                    self.state = 1469
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1470
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterWithOptionalTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_parameterWithOptionalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterWithOptionalType" ):
                listener.enterParameterWithOptionalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterWithOptionalType" ):
                listener.exitParameterWithOptionalType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterWithOptionalType" ):
                return visitor.visitParameterWithOptionalType(self)
            else:
                return visitor.visitChildren(self)




    def parameterWithOptionalType(self):

        localctx = KotlinParser.ParameterWithOptionalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_parameterWithOptionalType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1473
            self.simpleIdentifier()
            self.state = 1477
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,204,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1474
                    self.match(KotlinParser.NL) 
                self.state = 1479
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,204,self._ctx)

            self.state = 1488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.COLON:
                self.state = 1480
                self.match(KotlinParser.COLON)
                self.state = 1484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1481
                    self.match(KotlinParser.NL)
                    self.state = 1486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1487
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = KotlinParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self.simpleIdentifier()
            self.state = 1494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1491
                self.match(KotlinParser.NL)
                self.state = 1496
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1497
            self.match(KotlinParser.COLON)
            self.state = 1501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1498
                self.match(KotlinParser.NL)
                self.state = 1503
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1504
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(KotlinParser.OBJECT, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_objectDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectDeclaration" ):
                listener.enterObjectDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectDeclaration" ):
                listener.exitObjectDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectDeclaration" ):
                return visitor.visitObjectDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def objectDeclaration(self):

        localctx = KotlinParser.ObjectDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_objectDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (KotlinParser.PUBLIC - 107)) | (1 << (KotlinParser.PRIVATE - 107)) | (1 << (KotlinParser.PROTECTED - 107)) | (1 << (KotlinParser.INTERNAL - 107)) | (1 << (KotlinParser.ENUM - 107)) | (1 << (KotlinParser.SEALED - 107)) | (1 << (KotlinParser.ANNOTATION - 107)) | (1 << (KotlinParser.DATA - 107)) | (1 << (KotlinParser.INNER - 107)) | (1 << (KotlinParser.VALUE - 107)) | (1 << (KotlinParser.TAILREC - 107)) | (1 << (KotlinParser.OPERATOR - 107)) | (1 << (KotlinParser.INLINE - 107)) | (1 << (KotlinParser.INFIX - 107)) | (1 << (KotlinParser.EXTERNAL - 107)) | (1 << (KotlinParser.SUSPEND - 107)) | (1 << (KotlinParser.OVERRIDE - 107)) | (1 << (KotlinParser.ABSTRACT - 107)) | (1 << (KotlinParser.FINAL - 107)) | (1 << (KotlinParser.OPEN - 107)) | (1 << (KotlinParser.CONST - 107)) | (1 << (KotlinParser.LATEINIT - 107)) | (1 << (KotlinParser.VARARG - 107)) | (1 << (KotlinParser.NOINLINE - 107)) | (1 << (KotlinParser.CROSSINLINE - 107)) | (1 << (KotlinParser.EXPECT - 107)) | (1 << (KotlinParser.ACTUAL - 107)))) != 0):
                self.state = 1506
                self.modifiers()


            self.state = 1509
            self.match(KotlinParser.OBJECT)
            self.state = 1513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1510
                self.match(KotlinParser.NL)
                self.state = 1515
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1516
            self.simpleIdentifier()
            self.state = 1531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.state = 1520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1517
                    self.match(KotlinParser.NL)
                    self.state = 1522
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1523
                self.match(KotlinParser.COLON)
                self.state = 1527
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1524
                        self.match(KotlinParser.NL) 
                    self.state = 1529
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

                self.state = 1530
                self.delegationSpecifiers()


            self.state = 1540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.state = 1536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1533
                    self.match(KotlinParser.NL)
                    self.state = 1538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1539
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SecondaryConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(KotlinParser.CONSTRUCTOR, 0)

        def functionValueParameters(self):
            return self.getTypedRuleContext(KotlinParser.FunctionValueParametersContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def constructorDelegationCall(self):
            return self.getTypedRuleContext(KotlinParser.ConstructorDelegationCallContext,0)


        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_secondaryConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecondaryConstructor" ):
                listener.enterSecondaryConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecondaryConstructor" ):
                listener.exitSecondaryConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSecondaryConstructor" ):
                return visitor.visitSecondaryConstructor(self)
            else:
                return visitor.visitChildren(self)




    def secondaryConstructor(self):

        localctx = KotlinParser.SecondaryConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_secondaryConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (KotlinParser.PUBLIC - 107)) | (1 << (KotlinParser.PRIVATE - 107)) | (1 << (KotlinParser.PROTECTED - 107)) | (1 << (KotlinParser.INTERNAL - 107)) | (1 << (KotlinParser.ENUM - 107)) | (1 << (KotlinParser.SEALED - 107)) | (1 << (KotlinParser.ANNOTATION - 107)) | (1 << (KotlinParser.DATA - 107)) | (1 << (KotlinParser.INNER - 107)) | (1 << (KotlinParser.VALUE - 107)) | (1 << (KotlinParser.TAILREC - 107)) | (1 << (KotlinParser.OPERATOR - 107)) | (1 << (KotlinParser.INLINE - 107)) | (1 << (KotlinParser.INFIX - 107)) | (1 << (KotlinParser.EXTERNAL - 107)) | (1 << (KotlinParser.SUSPEND - 107)) | (1 << (KotlinParser.OVERRIDE - 107)) | (1 << (KotlinParser.ABSTRACT - 107)) | (1 << (KotlinParser.FINAL - 107)) | (1 << (KotlinParser.OPEN - 107)) | (1 << (KotlinParser.CONST - 107)) | (1 << (KotlinParser.LATEINIT - 107)) | (1 << (KotlinParser.VARARG - 107)) | (1 << (KotlinParser.NOINLINE - 107)) | (1 << (KotlinParser.CROSSINLINE - 107)) | (1 << (KotlinParser.EXPECT - 107)) | (1 << (KotlinParser.ACTUAL - 107)))) != 0):
                self.state = 1542
                self.modifiers()


            self.state = 1545
            self.match(KotlinParser.CONSTRUCTOR)
            self.state = 1549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1546
                self.match(KotlinParser.NL)
                self.state = 1551
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1552
            self.functionValueParameters()
            self.state = 1567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.state = 1556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1553
                    self.match(KotlinParser.NL)
                    self.state = 1558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1559
                self.match(KotlinParser.COLON)
                self.state = 1563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1560
                    self.match(KotlinParser.NL)
                    self.state = 1565
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1566
                self.constructorDelegationCall()


            self.state = 1572
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1569
                    self.match(KotlinParser.NL) 
                self.state = 1574
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

            self.state = 1576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.LCURL:
                self.state = 1575
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDelegationCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def THIS(self):
            return self.getToken(KotlinParser.THIS, 0)

        def SUPER(self):
            return self.getToken(KotlinParser.SUPER, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_constructorDelegationCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDelegationCall" ):
                listener.enterConstructorDelegationCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDelegationCall" ):
                listener.exitConstructorDelegationCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorDelegationCall" ):
                return visitor.visitConstructorDelegationCall(self)
            else:
                return visitor.visitChildren(self)




    def constructorDelegationCall(self):

        localctx = KotlinParser.ConstructorDelegationCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_constructorDelegationCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1578
            _la = self._input.LA(1)
            if not(_la==KotlinParser.THIS or _la==KotlinParser.SUPER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1579
                self.match(KotlinParser.NL)
                self.state = 1584
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1585
            self.valueArguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def enumEntries(self):
            return self.getTypedRuleContext(KotlinParser.EnumEntriesContext,0)


        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def classMemberDeclarations(self):
            return self.getTypedRuleContext(KotlinParser.ClassMemberDeclarationsContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_enumClassBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumClassBody" ):
                listener.enterEnumClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumClassBody" ):
                listener.exitEnumClassBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumClassBody" ):
                return visitor.visitEnumClassBody(self)
            else:
                return visitor.visitChildren(self)




    def enumClassBody(self):

        localctx = KotlinParser.EnumClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_enumClassBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1587
            self.match(KotlinParser.LCURL)
            self.state = 1591
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,224,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1588
                    self.match(KotlinParser.NL) 
                self.state = 1593
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,224,self._ctx)

            self.state = 1595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT_NO_WS - 40)) | (1 << (KotlinParser.AT_PRE_WS - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)) | (1 << (KotlinParser.IMPORT - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.BY - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)) | (1 << (KotlinParser.WHERE - 40)) | (1 << (KotlinParser.CATCH - 40)) | (1 << (KotlinParser.FINALLY - 40)))) != 0) or ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & ((1 << (KotlinParser.OUT - 105)) | (1 << (KotlinParser.DYNAMIC - 105)) | (1 << (KotlinParser.PUBLIC - 105)) | (1 << (KotlinParser.PRIVATE - 105)) | (1 << (KotlinParser.PROTECTED - 105)) | (1 << (KotlinParser.INTERNAL - 105)) | (1 << (KotlinParser.ENUM - 105)) | (1 << (KotlinParser.SEALED - 105)) | (1 << (KotlinParser.ANNOTATION - 105)) | (1 << (KotlinParser.DATA - 105)) | (1 << (KotlinParser.INNER - 105)) | (1 << (KotlinParser.VALUE - 105)) | (1 << (KotlinParser.TAILREC - 105)) | (1 << (KotlinParser.OPERATOR - 105)) | (1 << (KotlinParser.INLINE - 105)) | (1 << (KotlinParser.INFIX - 105)) | (1 << (KotlinParser.EXTERNAL - 105)) | (1 << (KotlinParser.SUSPEND - 105)) | (1 << (KotlinParser.OVERRIDE - 105)) | (1 << (KotlinParser.ABSTRACT - 105)) | (1 << (KotlinParser.FINAL - 105)) | (1 << (KotlinParser.OPEN - 105)) | (1 << (KotlinParser.CONST - 105)) | (1 << (KotlinParser.LATEINIT - 105)) | (1 << (KotlinParser.VARARG - 105)) | (1 << (KotlinParser.NOINLINE - 105)) | (1 << (KotlinParser.CROSSINLINE - 105)) | (1 << (KotlinParser.REIFIED - 105)) | (1 << (KotlinParser.EXPECT - 105)) | (1 << (KotlinParser.ACTUAL - 105)) | (1 << (KotlinParser.Identifier - 105)))) != 0):
                self.state = 1594
                self.enumEntries()


            self.state = 1611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1597
                    self.match(KotlinParser.NL)
                    self.state = 1602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1603
                self.match(KotlinParser.SEMICOLON)
                self.state = 1607
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1604
                        self.match(KotlinParser.NL) 
                    self.state = 1609
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,227,self._ctx)

                self.state = 1610
                self.classMemberDeclarations()


            self.state = 1616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1613
                self.match(KotlinParser.NL)
                self.state = 1618
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1619
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumEntriesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.EnumEntryContext)
            else:
                return self.getTypedRuleContext(KotlinParser.EnumEntryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_enumEntries

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumEntries" ):
                listener.enterEnumEntries(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumEntries" ):
                listener.exitEnumEntries(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumEntries" ):
                return visitor.visitEnumEntries(self)
            else:
                return visitor.visitChildren(self)




    def enumEntries(self):

        localctx = KotlinParser.EnumEntriesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_enumEntries)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            self.enumEntry()
            self.state = 1638
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1625
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1622
                        self.match(KotlinParser.NL)
                        self.state = 1627
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1628
                    self.match(KotlinParser.COMMA)
                    self.state = 1632
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1629
                        self.match(KotlinParser.NL)
                        self.state = 1634
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1635
                    self.enumEntry() 
                self.state = 1640
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

            self.state = 1644
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1641
                    self.match(KotlinParser.NL) 
                self.state = 1646
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

            self.state = 1648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.COMMA:
                self.state = 1647
                self.match(KotlinParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(KotlinParser.ModifiersContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_enumEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumEntry" ):
                listener.enterEnumEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumEntry" ):
                listener.exitEnumEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumEntry" ):
                return visitor.visitEnumEntry(self)
            else:
                return visitor.visitChildren(self)




    def enumEntry(self):

        localctx = KotlinParser.EnumEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_enumEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1657
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.state = 1650
                self.modifiers()
                self.state = 1654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1651
                    self.match(KotlinParser.NL)
                    self.state = 1656
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1659
            self.simpleIdentifier()
            self.state = 1667
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.state = 1663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1660
                    self.match(KotlinParser.NL)
                    self.state = 1665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1666
                self.valueArguments()


            self.state = 1676
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.state = 1672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1669
                    self.match(KotlinParser.NL)
                    self.state = 1674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1675
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def nullableType(self):
            return self.getTypedRuleContext(KotlinParser.NullableTypeContext,0)


        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def functionType(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeContext,0)


        def typeModifiers(self):
            return self.getTypedRuleContext(KotlinParser.TypeModifiersContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = KotlinParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 1678
                self.typeModifiers()


            self.state = 1685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 1681
                self.parenthesizedType()
                pass

            elif la_ == 2:
                self.state = 1682
                self.nullableType()
                pass

            elif la_ == 3:
                self.state = 1683
                self.typeReference()
                pass

            elif la_ == 4:
                self.state = 1684
                self.functionType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def DYNAMIC(self):
            return self.getToken(KotlinParser.DYNAMIC, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeReference" ):
                listener.enterTypeReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeReference" ):
                listener.exitTypeReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeReference" ):
                return visitor.visitTypeReference(self)
            else:
                return visitor.visitChildren(self)




    def typeReference(self):

        localctx = KotlinParser.TypeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_typeReference)
        try:
            self.state = 1689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1687
                self.userType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1688
                self.match(KotlinParser.DYNAMIC)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def quest(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.QuestContext)
            else:
                return self.getTypedRuleContext(KotlinParser.QuestContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_nullableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullableType" ):
                listener.enterNullableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullableType" ):
                listener.exitNullableType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullableType" ):
                return visitor.visitNullableType(self)
            else:
                return visitor.visitChildren(self)




    def nullableType(self):

        localctx = KotlinParser.NullableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_nullableType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1693
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.VALUE, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.EXPECT, KotlinParser.ACTUAL, KotlinParser.Identifier]:
                self.state = 1691
                self.typeReference()
                pass
            elif token in [KotlinParser.LPAREN]:
                self.state = 1692
                self.parenthesizedType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1695
                self.match(KotlinParser.NL)
                self.state = 1700
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1702 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1701
                    self.quest()

                else:
                    raise NoViableAltException(self)
                self.state = 1704 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUEST_NO_WS(self):
            return self.getToken(KotlinParser.QUEST_NO_WS, 0)

        def QUEST_WS(self):
            return self.getToken(KotlinParser.QUEST_WS, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_quest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuest" ):
                listener.enterQuest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuest" ):
                listener.exitQuest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuest" ):
                return visitor.visitQuest(self)
            else:
                return visitor.visitChildren(self)




    def quest(self):

        localctx = KotlinParser.QuestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_quest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1706
            _la = self._input.LA(1)
            if not(_la==KotlinParser.QUEST_WS or _la==KotlinParser.QUEST_NO_WS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleUserType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleUserTypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleUserTypeContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DOT)
            else:
                return self.getToken(KotlinParser.DOT, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_userType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserType" ):
                listener.enterUserType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserType" ):
                listener.exitUserType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserType" ):
                return visitor.visitUserType(self)
            else:
                return visitor.visitChildren(self)




    def userType(self):

        localctx = KotlinParser.UserTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_userType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1708
            self.simpleUserType()
            self.state = 1725
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,249,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1712
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1709
                        self.match(KotlinParser.NL)
                        self.state = 1714
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1715
                    self.match(KotlinParser.DOT)
                    self.state = 1719
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1716
                        self.match(KotlinParser.NL)
                        self.state = 1721
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1722
                    self.simpleUserType() 
                self.state = 1727
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,249,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleUserTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_simpleUserType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleUserType" ):
                listener.enterSimpleUserType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleUserType" ):
                listener.exitSimpleUserType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleUserType" ):
                return visitor.visitSimpleUserType(self)
            else:
                return visitor.visitChildren(self)




    def simpleUserType(self):

        localctx = KotlinParser.SimpleUserTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_simpleUserType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1728
            self.simpleIdentifier()
            self.state = 1736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.state = 1732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1729
                    self.match(KotlinParser.NL)
                    self.state = 1734
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1735
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeProjectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def typeProjectionModifiers(self):
            return self.getTypedRuleContext(KotlinParser.TypeProjectionModifiersContext,0)


        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeProjection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeProjection" ):
                listener.enterTypeProjection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeProjection" ):
                listener.exitTypeProjection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeProjection" ):
                return visitor.visitTypeProjection(self)
            else:
                return visitor.visitChildren(self)




    def typeProjection(self):

        localctx = KotlinParser.TypeProjectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_typeProjection)
        try:
            self.state = 1743
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LPAREN, KotlinParser.AT_NO_WS, KotlinParser.AT_PRE_WS, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.IN, KotlinParser.OUT, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.VALUE, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.EXPECT, KotlinParser.ACTUAL, KotlinParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1739
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 1738
                    self.typeProjectionModifiers()


                self.state = 1741
                self.type_()
                pass
            elif token in [KotlinParser.MULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1742
                self.match(KotlinParser.MULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeProjectionModifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeProjectionModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeProjectionModifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeProjectionModifierContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeProjectionModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeProjectionModifiers" ):
                listener.enterTypeProjectionModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeProjectionModifiers" ):
                listener.exitTypeProjectionModifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeProjectionModifiers" ):
                return visitor.visitTypeProjectionModifiers(self)
            else:
                return visitor.visitChildren(self)




    def typeProjectionModifiers(self):

        localctx = KotlinParser.TypeProjectionModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_typeProjectionModifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1746 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1745
                    self.typeProjectionModifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1748 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,254,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeProjectionModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varianceModifier(self):
            return self.getTypedRuleContext(KotlinParser.VarianceModifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def annotation(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeProjectionModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeProjectionModifier" ):
                listener.enterTypeProjectionModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeProjectionModifier" ):
                listener.exitTypeProjectionModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeProjectionModifier" ):
                return visitor.visitTypeProjectionModifier(self)
            else:
                return visitor.visitChildren(self)




    def typeProjectionModifier(self):

        localctx = KotlinParser.TypeProjectionModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_typeProjectionModifier)
        self._la = 0 # Token type
        try:
            self.state = 1758
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.IN, KotlinParser.OUT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1750
                self.varianceModifier()
                self.state = 1754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1751
                    self.match(KotlinParser.NL)
                    self.state = 1756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [KotlinParser.AT_NO_WS, KotlinParser.AT_PRE_WS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1757
                self.annotation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameters(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeParametersContext,0)


        def ARROW(self):
            return self.getToken(KotlinParser.ARROW, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def receiverType(self):
            return self.getTypedRuleContext(KotlinParser.ReceiverTypeContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionType" ):
                return visitor.visitFunctionType(self)
            else:
                return visitor.visitChildren(self)




    def functionType(self):

        localctx = KotlinParser.FunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_functionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.state = 1760
                self.receiverType()
                self.state = 1764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1761
                    self.match(KotlinParser.NL)
                    self.state = 1766
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1767
                self.match(KotlinParser.DOT)
                self.state = 1771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1768
                    self.match(KotlinParser.NL)
                    self.state = 1773
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1776
            self.functionTypeParameters()
            self.state = 1780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1777
                self.match(KotlinParser.NL)
                self.state = 1782
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1783
            self.match(KotlinParser.ARROW)
            self.state = 1787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1784
                self.match(KotlinParser.NL)
                self.state = 1789
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1790
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ParameterContext,i)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionTypeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameters" ):
                listener.enterFunctionTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameters" ):
                listener.exitFunctionTypeParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeParameters" ):
                return visitor.visitFunctionTypeParameters(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeParameters(self):

        localctx = KotlinParser.FunctionTypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_functionTypeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1792
            self.match(KotlinParser.LPAREN)
            self.state = 1796
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,262,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1793
                    self.match(KotlinParser.NL) 
                self.state = 1798
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,262,self._ctx)

            self.state = 1801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.state = 1799
                self.parameter()

            elif la_ == 2:
                self.state = 1800
                self.type_()


            self.state = 1822
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,267,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1806
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1803
                        self.match(KotlinParser.NL)
                        self.state = 1808
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1809
                    self.match(KotlinParser.COMMA)
                    self.state = 1813
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1810
                        self.match(KotlinParser.NL)
                        self.state = 1815
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1818
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                    if la_ == 1:
                        self.state = 1816
                        self.parameter()
                        pass

                    elif la_ == 2:
                        self.state = 1817
                        self.type_()
                        pass

             
                self.state = 1824
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,267,self._ctx)

            self.state = 1832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
            if la_ == 1:
                self.state = 1828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1825
                    self.match(KotlinParser.NL)
                    self.state = 1830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1831
                self.match(KotlinParser.COMMA)


            self.state = 1837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1834
                self.match(KotlinParser.NL)
                self.state = 1839
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1840
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_parenthesizedType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedType" ):
                listener.enterParenthesizedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedType" ):
                listener.exitParenthesizedType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedType" ):
                return visitor.visitParenthesizedType(self)
            else:
                return visitor.visitChildren(self)




    def parenthesizedType(self):

        localctx = KotlinParser.ParenthesizedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_parenthesizedType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1842
            self.match(KotlinParser.LPAREN)
            self.state = 1846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1843
                self.match(KotlinParser.NL)
                self.state = 1848
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1849
            self.type_()
            self.state = 1853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1850
                self.match(KotlinParser.NL)
                self.state = 1855
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1856
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def nullableType(self):
            return self.getTypedRuleContext(KotlinParser.NullableTypeContext,0)


        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def typeModifiers(self):
            return self.getTypedRuleContext(KotlinParser.TypeModifiersContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_receiverType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiverType" ):
                listener.enterReceiverType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiverType" ):
                listener.exitReceiverType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiverType" ):
                return visitor.visitReceiverType(self)
            else:
                return visitor.visitChildren(self)




    def receiverType(self):

        localctx = KotlinParser.ReceiverTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_receiverType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1859
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.state = 1858
                self.typeModifiers()


            self.state = 1864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.state = 1861
                self.parenthesizedType()
                pass

            elif la_ == 2:
                self.state = 1862
                self.nullableType()
                pass

            elif la_ == 3:
                self.state = 1863
                self.typeReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedUserTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def parenthesizedUserType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedUserTypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_parenthesizedUserType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedUserType" ):
                listener.enterParenthesizedUserType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedUserType" ):
                listener.exitParenthesizedUserType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedUserType" ):
                return visitor.visitParenthesizedUserType(self)
            else:
                return visitor.visitChildren(self)




    def parenthesizedUserType(self):

        localctx = KotlinParser.ParenthesizedUserTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_parenthesizedUserType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1866
            self.match(KotlinParser.LPAREN)
            self.state = 1870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1867
                self.match(KotlinParser.NL)
                self.state = 1872
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1875
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.VALUE, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.EXPECT, KotlinParser.ACTUAL, KotlinParser.Identifier]:
                self.state = 1873
                self.userType()
                pass
            elif token in [KotlinParser.LPAREN]:
                self.state = 1874
                self.parenthesizedUserType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1877
                self.match(KotlinParser.NL)
                self.state = 1882
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1883
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.StatementContext)
            else:
                return self.getTypedRuleContext(KotlinParser.StatementContext,i)


        def semis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SemisContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SemisContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = KotlinParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL_WS) | (1 << KotlinParser.EXCL_NO_WS) | (1 << KotlinParser.COLONCOLON) | (1 << KotlinParser.AT_NO_WS) | (1 << KotlinParser.AT_PRE_WS) | (1 << KotlinParser.RETURN_AT) | (1 << KotlinParser.CONTINUE_AT) | (1 << KotlinParser.BREAK_AT) | (1 << KotlinParser.THIS_AT) | (1 << KotlinParser.SUPER_AT) | (1 << KotlinParser.FILE) | (1 << KotlinParser.FIELD) | (1 << KotlinParser.PROPERTY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (KotlinParser.GET - 64)) | (1 << (KotlinParser.SET - 64)) | (1 << (KotlinParser.RECEIVER - 64)) | (1 << (KotlinParser.PARAM - 64)) | (1 << (KotlinParser.SETPARAM - 64)) | (1 << (KotlinParser.DELEGATE - 64)) | (1 << (KotlinParser.IMPORT - 64)) | (1 << (KotlinParser.CLASS - 64)) | (1 << (KotlinParser.INTERFACE - 64)) | (1 << (KotlinParser.FUN - 64)) | (1 << (KotlinParser.OBJECT - 64)) | (1 << (KotlinParser.VAL - 64)) | (1 << (KotlinParser.VAR - 64)) | (1 << (KotlinParser.TYPE_ALIAS - 64)) | (1 << (KotlinParser.CONSTRUCTOR - 64)) | (1 << (KotlinParser.BY - 64)) | (1 << (KotlinParser.COMPANION - 64)) | (1 << (KotlinParser.INIT - 64)) | (1 << (KotlinParser.THIS - 64)) | (1 << (KotlinParser.SUPER - 64)) | (1 << (KotlinParser.WHERE - 64)) | (1 << (KotlinParser.IF - 64)) | (1 << (KotlinParser.WHEN - 64)) | (1 << (KotlinParser.TRY - 64)) | (1 << (KotlinParser.CATCH - 64)) | (1 << (KotlinParser.FINALLY - 64)) | (1 << (KotlinParser.FOR - 64)) | (1 << (KotlinParser.DO - 64)) | (1 << (KotlinParser.WHILE - 64)) | (1 << (KotlinParser.THROW - 64)) | (1 << (KotlinParser.RETURN - 64)) | (1 << (KotlinParser.CONTINUE - 64)) | (1 << (KotlinParser.BREAK - 64)) | (1 << (KotlinParser.OUT - 64)) | (1 << (KotlinParser.DYNAMIC - 64)) | (1 << (KotlinParser.PUBLIC - 64)) | (1 << (KotlinParser.PRIVATE - 64)) | (1 << (KotlinParser.PROTECTED - 64)) | (1 << (KotlinParser.INTERNAL - 64)) | (1 << (KotlinParser.ENUM - 64)) | (1 << (KotlinParser.SEALED - 64)) | (1 << (KotlinParser.ANNOTATION - 64)) | (1 << (KotlinParser.DATA - 64)) | (1 << (KotlinParser.INNER - 64)) | (1 << (KotlinParser.VALUE - 64)) | (1 << (KotlinParser.TAILREC - 64)) | (1 << (KotlinParser.OPERATOR - 64)) | (1 << (KotlinParser.INLINE - 64)) | (1 << (KotlinParser.INFIX - 64)) | (1 << (KotlinParser.EXTERNAL - 64)) | (1 << (KotlinParser.SUSPEND - 64)) | (1 << (KotlinParser.OVERRIDE - 64)) | (1 << (KotlinParser.ABSTRACT - 64)) | (1 << (KotlinParser.FINAL - 64)) | (1 << (KotlinParser.OPEN - 64)) | (1 << (KotlinParser.CONST - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (KotlinParser.LATEINIT - 128)) | (1 << (KotlinParser.VARARG - 128)) | (1 << (KotlinParser.NOINLINE - 128)) | (1 << (KotlinParser.CROSSINLINE - 128)) | (1 << (KotlinParser.REIFIED - 128)) | (1 << (KotlinParser.EXPECT - 128)) | (1 << (KotlinParser.ACTUAL - 128)) | (1 << (KotlinParser.RealLiteral - 128)) | (1 << (KotlinParser.IntegerLiteral - 128)) | (1 << (KotlinParser.HexLiteral - 128)) | (1 << (KotlinParser.BinLiteral - 128)) | (1 << (KotlinParser.UnsignedLiteral - 128)) | (1 << (KotlinParser.LongLiteral - 128)) | (1 << (KotlinParser.BooleanLiteral - 128)) | (1 << (KotlinParser.NullLiteral - 128)) | (1 << (KotlinParser.CharacterLiteral - 128)) | (1 << (KotlinParser.Identifier - 128)) | (1 << (KotlinParser.QUOTE_OPEN - 128)) | (1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 128)))) != 0):
                self.state = 1885
                self.statement()
                self.state = 1891
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,278,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1886
                        self.semis()
                        self.state = 1887
                        self.statement() 
                    self.state = 1893
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,278,self._ctx)



            self.state = 1897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.state = 1896
                self.semis()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(KotlinParser.DeclarationContext,0)


        def assignment(self):
            return self.getTypedRuleContext(KotlinParser.AssignmentContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(KotlinParser.LoopStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LabelContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LabelContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = KotlinParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1903
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,282,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1901
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.VALUE, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.EXPECT, KotlinParser.ACTUAL, KotlinParser.Identifier]:
                        self.state = 1899
                        self.label()
                        pass
                    elif token in [KotlinParser.AT_NO_WS, KotlinParser.AT_PRE_WS]:
                        self.state = 1900
                        self.annotation()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1905
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,282,self._ctx)

            self.state = 1910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.state = 1906
                self.declaration()
                pass

            elif la_ == 2:
                self.state = 1907
                self.assignment()
                pass

            elif la_ == 3:
                self.state = 1908
                self.loopStatement()
                pass

            elif la_ == 4:
                self.state = 1909
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def AT_NO_WS(self):
            return self.getToken(KotlinParser.AT_NO_WS, 0)

        def AT_POST_WS(self):
            return self.getToken(KotlinParser.AT_POST_WS, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel" ):
                return visitor.visitLabel(self)
            else:
                return visitor.visitChildren(self)




    def label(self):

        localctx = KotlinParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_label)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1912
            self.simpleIdentifier()
            self.state = 1913
            _la = self._input.LA(1)
            if not(_la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_POST_WS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1917
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,284,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1914
                    self.match(KotlinParser.NL) 
                self.state = 1919
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,284,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlStructureBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def statement(self):
            return self.getTypedRuleContext(KotlinParser.StatementContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_controlStructureBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlStructureBody" ):
                listener.enterControlStructureBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlStructureBody" ):
                listener.exitControlStructureBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlStructureBody" ):
                return visitor.visitControlStructureBody(self)
            else:
                return visitor.visitChildren(self)




    def controlStructureBody(self):

        localctx = KotlinParser.ControlStructureBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_controlStructureBody)
        try:
            self.state = 1922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1920
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1921
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def statements(self):
            return self.getTypedRuleContext(KotlinParser.StatementsContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = KotlinParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1924
            self.match(KotlinParser.LCURL)
            self.state = 1928
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,286,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1925
                    self.match(KotlinParser.NL) 
                self.state = 1930
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,286,self._ctx)

            self.state = 1931
            self.statements()
            self.state = 1935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1932
                self.match(KotlinParser.NL)
                self.state = 1937
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1938
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStatement(self):
            return self.getTypedRuleContext(KotlinParser.ForStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(KotlinParser.WhileStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(KotlinParser.DoWhileStatementContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_loopStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStatement" ):
                listener.enterLoopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStatement" ):
                listener.exitLoopStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStatement" ):
                return visitor.visitLoopStatement(self)
            else:
                return visitor.visitChildren(self)




    def loopStatement(self):

        localctx = KotlinParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_loopStatement)
        try:
            self.state = 1943
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1940
                self.forStatement()
                pass
            elif token in [KotlinParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1941
                self.whileStatement()
                pass
            elif token in [KotlinParser.DO]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1942
                self.doWhileStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(KotlinParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def IN(self):
            return self.getToken(KotlinParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def multiVariableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.MultiVariableDeclarationContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = KotlinParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1945
            self.match(KotlinParser.FOR)
            self.state = 1949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1946
                self.match(KotlinParser.NL)
                self.state = 1951
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1952
            self.match(KotlinParser.LPAREN)
            self.state = 1956
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,290,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1953
                    self.annotation() 
                self.state = 1958
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,290,self._ctx)

            self.state = 1961
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.NL, KotlinParser.AT_NO_WS, KotlinParser.AT_PRE_WS, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.VALUE, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.EXPECT, KotlinParser.ACTUAL, KotlinParser.Identifier]:
                self.state = 1959
                self.variableDeclaration()
                pass
            elif token in [KotlinParser.LPAREN]:
                self.state = 1960
                self.multiVariableDeclaration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1963
            self.match(KotlinParser.IN)
            self.state = 1964
            self.expression()
            self.state = 1965
            self.match(KotlinParser.RPAREN)
            self.state = 1969
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,292,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1966
                    self.match(KotlinParser.NL) 
                self.state = 1971
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,292,self._ctx)

            self.state = 1973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.state = 1972
                self.controlStructureBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(KotlinParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = KotlinParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_whileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1975
            self.match(KotlinParser.WHILE)
            self.state = 1979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1976
                self.match(KotlinParser.NL)
                self.state = 1981
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1982
            self.match(KotlinParser.LPAREN)
            self.state = 1983
            self.expression()
            self.state = 1984
            self.match(KotlinParser.RPAREN)
            self.state = 1988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1985
                self.match(KotlinParser.NL)
                self.state = 1990
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1993
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LPAREN, KotlinParser.LSQUARE, KotlinParser.LCURL, KotlinParser.ADD, KotlinParser.SUB, KotlinParser.INCR, KotlinParser.DECR, KotlinParser.EXCL_WS, KotlinParser.EXCL_NO_WS, KotlinParser.COLONCOLON, KotlinParser.AT_NO_WS, KotlinParser.AT_PRE_WS, KotlinParser.RETURN_AT, KotlinParser.CONTINUE_AT, KotlinParser.BREAK_AT, KotlinParser.THIS_AT, KotlinParser.SUPER_AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.IMPORT, KotlinParser.CLASS, KotlinParser.INTERFACE, KotlinParser.FUN, KotlinParser.OBJECT, KotlinParser.VAL, KotlinParser.VAR, KotlinParser.TYPE_ALIAS, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.THIS, KotlinParser.SUPER, KotlinParser.WHERE, KotlinParser.IF, KotlinParser.WHEN, KotlinParser.TRY, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.FOR, KotlinParser.DO, KotlinParser.WHILE, KotlinParser.THROW, KotlinParser.RETURN, KotlinParser.CONTINUE, KotlinParser.BREAK, KotlinParser.OUT, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.VALUE, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.EXPECT, KotlinParser.ACTUAL, KotlinParser.RealLiteral, KotlinParser.IntegerLiteral, KotlinParser.HexLiteral, KotlinParser.BinLiteral, KotlinParser.UnsignedLiteral, KotlinParser.LongLiteral, KotlinParser.BooleanLiteral, KotlinParser.NullLiteral, KotlinParser.CharacterLiteral, KotlinParser.Identifier, KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN]:
                self.state = 1991
                self.controlStructureBody()
                pass
            elif token in [KotlinParser.SEMICOLON]:
                self.state = 1992
                self.match(KotlinParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(KotlinParser.DO, 0)

        def WHILE(self):
            return self.getToken(KotlinParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoWhileStatement" ):
                return visitor.visitDoWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def doWhileStatement(self):

        localctx = KotlinParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_doWhileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1995
            self.match(KotlinParser.DO)
            self.state = 1999
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,297,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1996
                    self.match(KotlinParser.NL) 
                self.state = 2001
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,297,self._ctx)

            self.state = 2003
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.state = 2002
                self.controlStructureBody()


            self.state = 2008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2005
                self.match(KotlinParser.NL)
                self.state = 2010
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2011
            self.match(KotlinParser.WHILE)
            self.state = 2015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2012
                self.match(KotlinParser.NL)
                self.state = 2017
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2018
            self.match(KotlinParser.LPAREN)
            self.state = 2019
            self.expression()
            self.state = 2020
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def directlyAssignableExpression(self):
            return self.getTypedRuleContext(KotlinParser.DirectlyAssignableExpressionContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def assignableExpression(self):
            return self.getTypedRuleContext(KotlinParser.AssignableExpressionContext,0)


        def assignmentAndOperator(self):
            return self.getTypedRuleContext(KotlinParser.AssignmentAndOperatorContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assignment(self):

        localctx = KotlinParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_assignment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2022
                self.directlyAssignableExpression()
                self.state = 2023
                self.match(KotlinParser.ASSIGNMENT)
                pass

            elif la_ == 2:
                self.state = 2025
                self.assignableExpression()
                self.state = 2026
                self.assignmentAndOperator()
                pass


            self.state = 2033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2030
                self.match(KotlinParser.NL)
                self.state = 2035
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2036
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SemiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def EOF(self):
            return self.getToken(KotlinParser.EOF, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_semi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSemi" ):
                listener.enterSemi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSemi" ):
                listener.exitSemi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSemi" ):
                return visitor.visitSemi(self)
            else:
                return visitor.visitChildren(self)




    def semi(self):

        localctx = KotlinParser.SemiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_semi)
        self._la = 0 # Token type
        try:
            self.state = 2046
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.NL, KotlinParser.SEMICOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2038
                _la = self._input.LA(1)
                if not(_la==KotlinParser.NL or _la==KotlinParser.SEMICOLON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2042
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,303,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2039
                        self.match(KotlinParser.NL) 
                    self.state = 2044
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,303,self._ctx)

                pass
            elif token in [KotlinParser.EOF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2045
                self.match(KotlinParser.EOF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SemisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.SEMICOLON)
            else:
                return self.getToken(KotlinParser.SEMICOLON, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_semis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSemis" ):
                listener.enterSemis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSemis" ):
                listener.exitSemis(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSemis" ):
                return visitor.visitSemis(self)
            else:
                return visitor.visitChildren(self)




    def semis(self):

        localctx = KotlinParser.SemisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_semis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2049 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2048
                    _la = self._input.LA(1)
                    if not(_la==KotlinParser.NL or _la==KotlinParser.SEMICOLON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 2051 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,305,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunction(self):
            return self.getTypedRuleContext(KotlinParser.DisjunctionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = KotlinParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2053
            self.disjunction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ConjunctionContext,i)


        def DISJ(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DISJ)
            else:
                return self.getToken(KotlinParser.DISJ, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_disjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisjunction" ):
                listener.enterDisjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisjunction" ):
                listener.exitDisjunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisjunction" ):
                return visitor.visitDisjunction(self)
            else:
                return visitor.visitChildren(self)




    def disjunction(self):

        localctx = KotlinParser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_disjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2055
            self.conjunction()
            self.state = 2072
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,308,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2059
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2056
                        self.match(KotlinParser.NL)
                        self.state = 2061
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2062
                    self.match(KotlinParser.DISJ)
                    self.state = 2066
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2063
                        self.match(KotlinParser.NL)
                        self.state = 2068
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2069
                    self.conjunction() 
                self.state = 2074
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,308,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equality(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.EqualityContext)
            else:
                return self.getTypedRuleContext(KotlinParser.EqualityContext,i)


        def CONJ(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.CONJ)
            else:
                return self.getToken(KotlinParser.CONJ, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_conjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConjunction" ):
                listener.enterConjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConjunction" ):
                listener.exitConjunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConjunction" ):
                return visitor.visitConjunction(self)
            else:
                return visitor.visitChildren(self)




    def conjunction(self):

        localctx = KotlinParser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_conjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2075
            self.equality()
            self.state = 2092
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,311,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2079
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2076
                        self.match(KotlinParser.NL)
                        self.state = 2081
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2082
                    self.match(KotlinParser.CONJ)
                    self.state = 2086
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2083
                        self.match(KotlinParser.NL)
                        self.state = 2088
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2089
                    self.equality() 
                self.state = 2094
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,311,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ComparisonContext,i)


        def equalityOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.EqualityOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.EqualityOperatorContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_equality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality" ):
                listener.enterEquality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality" ):
                listener.exitEquality(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEquality" ):
                return visitor.visitEquality(self)
            else:
                return visitor.visitChildren(self)




    def equality(self):

        localctx = KotlinParser.EqualityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_equality)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2095
            self.comparison()
            self.state = 2107
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,313,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2096
                    self.equalityOperator()
                    self.state = 2100
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2097
                        self.match(KotlinParser.NL)
                        self.state = 2102
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2103
                    self.comparison() 
                self.state = 2109
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,313,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericCallLikeComparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.GenericCallLikeComparisonContext)
            else:
                return self.getTypedRuleContext(KotlinParser.GenericCallLikeComparisonContext,i)


        def comparisonOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ComparisonOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ComparisonOperatorContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = KotlinParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2110
            self.genericCallLikeComparison()
            self.state = 2122
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,315,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2111
                    self.comparisonOperator()
                    self.state = 2115
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2112
                        self.match(KotlinParser.NL)
                        self.state = 2117
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2118
                    self.genericCallLikeComparison() 
                self.state = 2124
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,315,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericCallLikeComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def infixOperation(self):
            return self.getTypedRuleContext(KotlinParser.InfixOperationContext,0)


        def callSuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.CallSuffixContext)
            else:
                return self.getTypedRuleContext(KotlinParser.CallSuffixContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_genericCallLikeComparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericCallLikeComparison" ):
                listener.enterGenericCallLikeComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericCallLikeComparison" ):
                listener.exitGenericCallLikeComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericCallLikeComparison" ):
                return visitor.visitGenericCallLikeComparison(self)
            else:
                return visitor.visitChildren(self)




    def genericCallLikeComparison(self):

        localctx = KotlinParser.GenericCallLikeComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_genericCallLikeComparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2125
            self.infixOperation()
            self.state = 2129
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,316,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2126
                    self.callSuffix() 
                self.state = 2131
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,316,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InfixOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elvisExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ElvisExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ElvisExpressionContext,i)


        def inOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.InOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.InOperatorContext,i)


        def isOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.IsOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.IsOperatorContext,i)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_infixOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfixOperation" ):
                listener.enterInfixOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfixOperation" ):
                listener.exitInfixOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInfixOperation" ):
                return visitor.visitInfixOperation(self)
            else:
                return visitor.visitChildren(self)




    def infixOperation(self):

        localctx = KotlinParser.InfixOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_infixOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2132
            self.elvisExpression()
            self.state = 2153
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,320,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2151
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [KotlinParser.IN, KotlinParser.NOT_IN]:
                        self.state = 2133
                        self.inOperator()
                        self.state = 2137
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 2134
                            self.match(KotlinParser.NL)
                            self.state = 2139
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2140
                        self.elvisExpression()
                        pass
                    elif token in [KotlinParser.IS, KotlinParser.NOT_IS]:
                        self.state = 2142
                        self.isOperator()
                        self.state = 2146
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 2143
                            self.match(KotlinParser.NL)
                            self.state = 2148
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2149
                        self.type_()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2155
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,320,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElvisExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def infixFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.InfixFunctionCallContext)
            else:
                return self.getTypedRuleContext(KotlinParser.InfixFunctionCallContext,i)


        def elvis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ElvisContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ElvisContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_elvisExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElvisExpression" ):
                listener.enterElvisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElvisExpression" ):
                listener.exitElvisExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElvisExpression" ):
                return visitor.visitElvisExpression(self)
            else:
                return visitor.visitChildren(self)




    def elvisExpression(self):

        localctx = KotlinParser.ElvisExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_elvisExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2156
            self.infixFunctionCall()
            self.state = 2174
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,323,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2160
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2157
                        self.match(KotlinParser.NL)
                        self.state = 2162
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2163
                    self.elvis()
                    self.state = 2167
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2164
                        self.match(KotlinParser.NL)
                        self.state = 2169
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2170
                    self.infixFunctionCall() 
                self.state = 2176
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,323,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElvisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUEST_NO_WS(self):
            return self.getToken(KotlinParser.QUEST_NO_WS, 0)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_elvis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElvis" ):
                listener.enterElvis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElvis" ):
                listener.exitElvis(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElvis" ):
                return visitor.visitElvis(self)
            else:
                return visitor.visitChildren(self)




    def elvis(self):

        localctx = KotlinParser.ElvisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_elvis)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2177
            self.match(KotlinParser.QUEST_NO_WS)
            self.state = 2178
            self.match(KotlinParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InfixFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rangeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.RangeExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.RangeExpressionContext,i)


        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_infixFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfixFunctionCall" ):
                listener.enterInfixFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfixFunctionCall" ):
                listener.exitInfixFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInfixFunctionCall" ):
                return visitor.visitInfixFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def infixFunctionCall(self):

        localctx = KotlinParser.InfixFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_infixFunctionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2180
            self.rangeExpression()
            self.state = 2192
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,325,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2181
                    self.simpleIdentifier()
                    self.state = 2185
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2182
                        self.match(KotlinParser.NL)
                        self.state = 2187
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2188
                    self.rangeExpression() 
                self.state = 2194
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,325,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AdditiveExpressionContext,i)


        def RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.RANGE)
            else:
                return self.getToken(KotlinParser.RANGE, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_rangeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeExpression" ):
                listener.enterRangeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeExpression" ):
                listener.exitRangeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeExpression" ):
                return visitor.visitRangeExpression(self)
            else:
                return visitor.visitChildren(self)




    def rangeExpression(self):

        localctx = KotlinParser.RangeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_rangeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2195
            self.additiveExpression()
            self.state = 2206
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,327,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2196
                    self.match(KotlinParser.RANGE)
                    self.state = 2200
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2197
                        self.match(KotlinParser.NL)
                        self.state = 2202
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2203
                    self.additiveExpression() 
                self.state = 2208
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,327,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiplicativeExpressionContext,i)


        def additiveOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AdditiveOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AdditiveOperatorContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)




    def additiveExpression(self):

        localctx = KotlinParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2209
            self.multiplicativeExpression()
            self.state = 2221
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,329,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2210
                    self.additiveOperator()
                    self.state = 2214
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2211
                        self.match(KotlinParser.NL)
                        self.state = 2216
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2217
                    self.multiplicativeExpression() 
                self.state = 2223
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,329,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AsExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AsExpressionContext,i)


        def multiplicativeOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiplicativeOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiplicativeOperatorContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeExpression(self):

        localctx = KotlinParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2224
            self.asExpression()
            self.state = 2236
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,331,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2225
                    self.multiplicativeOperator()
                    self.state = 2229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2226
                        self.match(KotlinParser.NL)
                        self.state = 2231
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2232
                    self.asExpression() 
                self.state = 2238
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,331,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixUnaryExpression(self):
            return self.getTypedRuleContext(KotlinParser.PrefixUnaryExpressionContext,0)


        def asOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AsOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AsOperatorContext,i)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_asExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsExpression" ):
                listener.enterAsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsExpression" ):
                listener.exitAsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsExpression" ):
                return visitor.visitAsExpression(self)
            else:
                return visitor.visitChildren(self)




    def asExpression(self):

        localctx = KotlinParser.AsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_asExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2239
            self.prefixUnaryExpression()
            self.state = 2257
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,334,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2243
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2240
                        self.match(KotlinParser.NL)
                        self.state = 2245
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2246
                    self.asOperator()
                    self.state = 2250
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2247
                        self.match(KotlinParser.NL)
                        self.state = 2252
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2253
                    self.type_() 
                self.state = 2259
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,334,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixUnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixUnaryExpression(self):
            return self.getTypedRuleContext(KotlinParser.PostfixUnaryExpressionContext,0)


        def unaryPrefix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UnaryPrefixContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UnaryPrefixContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_prefixUnaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixUnaryExpression" ):
                listener.enterPrefixUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixUnaryExpression" ):
                listener.exitPrefixUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixUnaryExpression" ):
                return visitor.visitPrefixUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def prefixUnaryExpression(self):

        localctx = KotlinParser.PrefixUnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_prefixUnaryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2263
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,335,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2260
                    self.unaryPrefix() 
                self.state = 2265
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,335,self._ctx)

            self.state = 2266
            self.postfixUnaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationContext,0)


        def label(self):
            return self.getTypedRuleContext(KotlinParser.LabelContext,0)


        def prefixUnaryOperator(self):
            return self.getTypedRuleContext(KotlinParser.PrefixUnaryOperatorContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_unaryPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryPrefix" ):
                listener.enterUnaryPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryPrefix" ):
                listener.exitUnaryPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryPrefix" ):
                return visitor.visitUnaryPrefix(self)
            else:
                return visitor.visitChildren(self)




    def unaryPrefix(self):

        localctx = KotlinParser.UnaryPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_unaryPrefix)
        self._la = 0 # Token type
        try:
            self.state = 2277
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.AT_NO_WS, KotlinParser.AT_PRE_WS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2268
                self.annotation()
                pass
            elif token in [KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.VALUE, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.EXPECT, KotlinParser.ACTUAL, KotlinParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2269
                self.label()
                pass
            elif token in [KotlinParser.ADD, KotlinParser.SUB, KotlinParser.INCR, KotlinParser.DECR, KotlinParser.EXCL_WS, KotlinParser.EXCL_NO_WS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2270
                self.prefixUnaryOperator()
                self.state = 2274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2271
                    self.match(KotlinParser.NL)
                    self.state = 2276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixUnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(KotlinParser.PrimaryExpressionContext,0)


        def postfixUnarySuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.PostfixUnarySuffixContext)
            else:
                return self.getTypedRuleContext(KotlinParser.PostfixUnarySuffixContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_postfixUnaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixUnaryExpression" ):
                listener.enterPostfixUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixUnaryExpression" ):
                listener.exitPostfixUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixUnaryExpression" ):
                return visitor.visitPostfixUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixUnaryExpression(self):

        localctx = KotlinParser.PostfixUnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_postfixUnaryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2279
            self.primaryExpression()
            self.state = 2283
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,338,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2280
                    self.postfixUnarySuffix() 
                self.state = 2285
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,338,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixUnarySuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixUnaryOperator(self):
            return self.getTypedRuleContext(KotlinParser.PostfixUnaryOperatorContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def callSuffix(self):
            return self.getTypedRuleContext(KotlinParser.CallSuffixContext,0)


        def indexingSuffix(self):
            return self.getTypedRuleContext(KotlinParser.IndexingSuffixContext,0)


        def navigationSuffix(self):
            return self.getTypedRuleContext(KotlinParser.NavigationSuffixContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_postfixUnarySuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixUnarySuffix" ):
                listener.enterPostfixUnarySuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixUnarySuffix" ):
                listener.exitPostfixUnarySuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixUnarySuffix" ):
                return visitor.visitPostfixUnarySuffix(self)
            else:
                return visitor.visitChildren(self)




    def postfixUnarySuffix(self):

        localctx = KotlinParser.PostfixUnarySuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_postfixUnarySuffix)
        try:
            self.state = 2291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2286
                self.postfixUnaryOperator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2287
                self.typeArguments()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2288
                self.callSuffix()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2289
                self.indexingSuffix()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2290
                self.navigationSuffix()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectlyAssignableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixUnaryExpression(self):
            return self.getTypedRuleContext(KotlinParser.PostfixUnaryExpressionContext,0)


        def assignableSuffix(self):
            return self.getTypedRuleContext(KotlinParser.AssignableSuffixContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def parenthesizedDirectlyAssignableExpression(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedDirectlyAssignableExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_directlyAssignableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectlyAssignableExpression" ):
                listener.enterDirectlyAssignableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectlyAssignableExpression" ):
                listener.exitDirectlyAssignableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirectlyAssignableExpression" ):
                return visitor.visitDirectlyAssignableExpression(self)
            else:
                return visitor.visitChildren(self)




    def directlyAssignableExpression(self):

        localctx = KotlinParser.DirectlyAssignableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_directlyAssignableExpression)
        try:
            self.state = 2298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2293
                self.postfixUnaryExpression()
                self.state = 2294
                self.assignableSuffix()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2296
                self.simpleIdentifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2297
                self.parenthesizedDirectlyAssignableExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedDirectlyAssignableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def directlyAssignableExpression(self):
            return self.getTypedRuleContext(KotlinParser.DirectlyAssignableExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_parenthesizedDirectlyAssignableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedDirectlyAssignableExpression" ):
                listener.enterParenthesizedDirectlyAssignableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedDirectlyAssignableExpression" ):
                listener.exitParenthesizedDirectlyAssignableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedDirectlyAssignableExpression" ):
                return visitor.visitParenthesizedDirectlyAssignableExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenthesizedDirectlyAssignableExpression(self):

        localctx = KotlinParser.ParenthesizedDirectlyAssignableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_parenthesizedDirectlyAssignableExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2300
            self.match(KotlinParser.LPAREN)
            self.state = 2304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2301
                self.match(KotlinParser.NL)
                self.state = 2306
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2307
            self.directlyAssignableExpression()
            self.state = 2311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2308
                self.match(KotlinParser.NL)
                self.state = 2313
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2314
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixUnaryExpression(self):
            return self.getTypedRuleContext(KotlinParser.PrefixUnaryExpressionContext,0)


        def parenthesizedAssignableExpression(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedAssignableExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_assignableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignableExpression" ):
                listener.enterAssignableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignableExpression" ):
                listener.exitAssignableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignableExpression" ):
                return visitor.visitAssignableExpression(self)
            else:
                return visitor.visitChildren(self)




    def assignableExpression(self):

        localctx = KotlinParser.AssignableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_assignableExpression)
        try:
            self.state = 2318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2316
                self.prefixUnaryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2317
                self.parenthesizedAssignableExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedAssignableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def assignableExpression(self):
            return self.getTypedRuleContext(KotlinParser.AssignableExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_parenthesizedAssignableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedAssignableExpression" ):
                listener.enterParenthesizedAssignableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedAssignableExpression" ):
                listener.exitParenthesizedAssignableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedAssignableExpression" ):
                return visitor.visitParenthesizedAssignableExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenthesizedAssignableExpression(self):

        localctx = KotlinParser.ParenthesizedAssignableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_parenthesizedAssignableExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2320
            self.match(KotlinParser.LPAREN)
            self.state = 2324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2321
                self.match(KotlinParser.NL)
                self.state = 2326
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2327
            self.assignableExpression()
            self.state = 2331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2328
                self.match(KotlinParser.NL)
                self.state = 2333
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2334
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignableSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def indexingSuffix(self):
            return self.getTypedRuleContext(KotlinParser.IndexingSuffixContext,0)


        def navigationSuffix(self):
            return self.getTypedRuleContext(KotlinParser.NavigationSuffixContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_assignableSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignableSuffix" ):
                listener.enterAssignableSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignableSuffix" ):
                listener.exitAssignableSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignableSuffix" ):
                return visitor.visitAssignableSuffix(self)
            else:
                return visitor.visitChildren(self)




    def assignableSuffix(self):

        localctx = KotlinParser.AssignableSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_assignableSuffix)
        try:
            self.state = 2339
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LANGLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2336
                self.typeArguments()
                pass
            elif token in [KotlinParser.LSQUARE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2337
                self.indexingSuffix()
                pass
            elif token in [KotlinParser.NL, KotlinParser.DOT, KotlinParser.COLONCOLON, KotlinParser.QUEST_NO_WS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2338
                self.navigationSuffix()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexingSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ExpressionContext,i)


        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_indexingSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexingSuffix" ):
                listener.enterIndexingSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexingSuffix" ):
                listener.exitIndexingSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexingSuffix" ):
                return visitor.visitIndexingSuffix(self)
            else:
                return visitor.visitChildren(self)




    def indexingSuffix(self):

        localctx = KotlinParser.IndexingSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_indexingSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2341
            self.match(KotlinParser.LSQUARE)
            self.state = 2345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2342
                self.match(KotlinParser.NL)
                self.state = 2347
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2348
            self.expression()
            self.state = 2365
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2352
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2349
                        self.match(KotlinParser.NL)
                        self.state = 2354
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2355
                    self.match(KotlinParser.COMMA)
                    self.state = 2359
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2356
                        self.match(KotlinParser.NL)
                        self.state = 2361
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2362
                    self.expression() 
                self.state = 2367
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,350,self._ctx)

            self.state = 2375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
            if la_ == 1:
                self.state = 2371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2368
                    self.match(KotlinParser.NL)
                    self.state = 2373
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2374
                self.match(KotlinParser.COMMA)


            self.state = 2380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2377
                self.match(KotlinParser.NL)
                self.state = 2382
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2383
            self.match(KotlinParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NavigationSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberAccessOperator(self):
            return self.getTypedRuleContext(KotlinParser.MemberAccessOperatorContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def parenthesizedExpression(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedExpressionContext,0)


        def CLASS(self):
            return self.getToken(KotlinParser.CLASS, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_navigationSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNavigationSuffix" ):
                listener.enterNavigationSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNavigationSuffix" ):
                listener.exitNavigationSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNavigationSuffix" ):
                return visitor.visitNavigationSuffix(self)
            else:
                return visitor.visitChildren(self)




    def navigationSuffix(self):

        localctx = KotlinParser.NavigationSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_navigationSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2385
            self.memberAccessOperator()
            self.state = 2389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2386
                self.match(KotlinParser.NL)
                self.state = 2391
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.VALUE, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.EXPECT, KotlinParser.ACTUAL, KotlinParser.Identifier]:
                self.state = 2392
                self.simpleIdentifier()
                pass
            elif token in [KotlinParser.LPAREN]:
                self.state = 2393
                self.parenthesizedExpression()
                pass
            elif token in [KotlinParser.CLASS]:
                self.state = 2394
                self.match(KotlinParser.CLASS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotatedLambda(self):
            return self.getTypedRuleContext(KotlinParser.AnnotatedLambdaContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_callSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallSuffix" ):
                listener.enterCallSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallSuffix" ):
                listener.exitCallSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallSuffix" ):
                return visitor.visitCallSuffix(self)
            else:
                return visitor.visitChildren(self)




    def callSuffix(self):

        localctx = KotlinParser.CallSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_callSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.LANGLE:
                self.state = 2397
                self.typeArguments()


            self.state = 2405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
            if la_ == 1:
                self.state = 2401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.LPAREN:
                    self.state = 2400
                    self.valueArguments()


                self.state = 2403
                self.annotatedLambda()
                pass

            elif la_ == 2:
                self.state = 2404
                self.valueArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotatedLambdaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaLiteral(self):
            return self.getTypedRuleContext(KotlinParser.LambdaLiteralContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def label(self):
            return self.getTypedRuleContext(KotlinParser.LabelContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotatedLambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotatedLambda" ):
                listener.enterAnnotatedLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotatedLambda" ):
                listener.exitAnnotatedLambda(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotatedLambda" ):
                return visitor.visitAnnotatedLambda(self)
            else:
                return visitor.visitChildren(self)




    def annotatedLambda(self):

        localctx = KotlinParser.AnnotatedLambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_annotatedLambda)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS:
                self.state = 2407
                self.annotation()
                self.state = 2412
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (KotlinParser.FILE - 61)) | (1 << (KotlinParser.FIELD - 61)) | (1 << (KotlinParser.PROPERTY - 61)) | (1 << (KotlinParser.GET - 61)) | (1 << (KotlinParser.SET - 61)) | (1 << (KotlinParser.RECEIVER - 61)) | (1 << (KotlinParser.PARAM - 61)) | (1 << (KotlinParser.SETPARAM - 61)) | (1 << (KotlinParser.DELEGATE - 61)) | (1 << (KotlinParser.IMPORT - 61)) | (1 << (KotlinParser.CONSTRUCTOR - 61)) | (1 << (KotlinParser.BY - 61)) | (1 << (KotlinParser.COMPANION - 61)) | (1 << (KotlinParser.INIT - 61)) | (1 << (KotlinParser.WHERE - 61)) | (1 << (KotlinParser.CATCH - 61)) | (1 << (KotlinParser.FINALLY - 61)) | (1 << (KotlinParser.OUT - 61)) | (1 << (KotlinParser.DYNAMIC - 61)) | (1 << (KotlinParser.PUBLIC - 61)) | (1 << (KotlinParser.PRIVATE - 61)) | (1 << (KotlinParser.PROTECTED - 61)) | (1 << (KotlinParser.INTERNAL - 61)) | (1 << (KotlinParser.ENUM - 61)) | (1 << (KotlinParser.SEALED - 61)) | (1 << (KotlinParser.ANNOTATION - 61)) | (1 << (KotlinParser.DATA - 61)) | (1 << (KotlinParser.INNER - 61)) | (1 << (KotlinParser.VALUE - 61)) | (1 << (KotlinParser.TAILREC - 61)) | (1 << (KotlinParser.OPERATOR - 61)) | (1 << (KotlinParser.INLINE - 61)) | (1 << (KotlinParser.INFIX - 61)) | (1 << (KotlinParser.EXTERNAL - 61)) | (1 << (KotlinParser.SUSPEND - 61)) | (1 << (KotlinParser.OVERRIDE - 61)) | (1 << (KotlinParser.ABSTRACT - 61)))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (KotlinParser.FINAL - 125)) | (1 << (KotlinParser.OPEN - 125)) | (1 << (KotlinParser.CONST - 125)) | (1 << (KotlinParser.LATEINIT - 125)) | (1 << (KotlinParser.VARARG - 125)) | (1 << (KotlinParser.NOINLINE - 125)) | (1 << (KotlinParser.CROSSINLINE - 125)) | (1 << (KotlinParser.REIFIED - 125)) | (1 << (KotlinParser.EXPECT - 125)) | (1 << (KotlinParser.ACTUAL - 125)) | (1 << (KotlinParser.Identifier - 125)))) != 0):
                self.state = 2413
                self.label()


            self.state = 2419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2416
                self.match(KotlinParser.NL)
                self.state = 2421
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2422
            self.lambdaLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def typeProjection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeProjectionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeProjectionContext,i)


        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArguments" ):
                return visitor.visitTypeArguments(self)
            else:
                return visitor.visitChildren(self)




    def typeArguments(self):

        localctx = KotlinParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2424
            self.match(KotlinParser.LANGLE)
            self.state = 2428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2425
                self.match(KotlinParser.NL)
                self.state = 2430
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2431
            self.typeProjection()
            self.state = 2448
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,365,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2432
                        self.match(KotlinParser.NL)
                        self.state = 2437
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2438
                    self.match(KotlinParser.COMMA)
                    self.state = 2442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2439
                        self.match(KotlinParser.NL)
                        self.state = 2444
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2445
                    self.typeProjection() 
                self.state = 2450
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,365,self._ctx)

            self.state = 2458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
            if la_ == 1:
                self.state = 2454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2451
                    self.match(KotlinParser.NL)
                    self.state = 2456
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2457
                self.match(KotlinParser.COMMA)


            self.state = 2463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2460
                self.match(KotlinParser.NL)
                self.state = 2465
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2466
            self.match(KotlinParser.RANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def valueArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ValueArgumentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ValueArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_valueArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueArguments" ):
                listener.enterValueArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueArguments" ):
                listener.exitValueArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueArguments" ):
                return visitor.visitValueArguments(self)
            else:
                return visitor.visitChildren(self)




    def valueArguments(self):

        localctx = KotlinParser.ValueArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_valueArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2468
            self.match(KotlinParser.LPAREN)
            self.state = 2472
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,369,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2469
                    self.match(KotlinParser.NL) 
                self.state = 2474
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,369,self._ctx)

            self.state = 2510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.NL) | (1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.MULT) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL_WS) | (1 << KotlinParser.EXCL_NO_WS) | (1 << KotlinParser.COLONCOLON) | (1 << KotlinParser.AT_NO_WS) | (1 << KotlinParser.AT_PRE_WS) | (1 << KotlinParser.RETURN_AT) | (1 << KotlinParser.CONTINUE_AT) | (1 << KotlinParser.BREAK_AT) | (1 << KotlinParser.THIS_AT) | (1 << KotlinParser.SUPER_AT) | (1 << KotlinParser.FILE) | (1 << KotlinParser.FIELD) | (1 << KotlinParser.PROPERTY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (KotlinParser.GET - 64)) | (1 << (KotlinParser.SET - 64)) | (1 << (KotlinParser.RECEIVER - 64)) | (1 << (KotlinParser.PARAM - 64)) | (1 << (KotlinParser.SETPARAM - 64)) | (1 << (KotlinParser.DELEGATE - 64)) | (1 << (KotlinParser.IMPORT - 64)) | (1 << (KotlinParser.FUN - 64)) | (1 << (KotlinParser.OBJECT - 64)) | (1 << (KotlinParser.CONSTRUCTOR - 64)) | (1 << (KotlinParser.BY - 64)) | (1 << (KotlinParser.COMPANION - 64)) | (1 << (KotlinParser.INIT - 64)) | (1 << (KotlinParser.THIS - 64)) | (1 << (KotlinParser.SUPER - 64)) | (1 << (KotlinParser.WHERE - 64)) | (1 << (KotlinParser.IF - 64)) | (1 << (KotlinParser.WHEN - 64)) | (1 << (KotlinParser.TRY - 64)) | (1 << (KotlinParser.CATCH - 64)) | (1 << (KotlinParser.FINALLY - 64)) | (1 << (KotlinParser.THROW - 64)) | (1 << (KotlinParser.RETURN - 64)) | (1 << (KotlinParser.CONTINUE - 64)) | (1 << (KotlinParser.BREAK - 64)) | (1 << (KotlinParser.OUT - 64)) | (1 << (KotlinParser.DYNAMIC - 64)) | (1 << (KotlinParser.PUBLIC - 64)) | (1 << (KotlinParser.PRIVATE - 64)) | (1 << (KotlinParser.PROTECTED - 64)) | (1 << (KotlinParser.INTERNAL - 64)) | (1 << (KotlinParser.ENUM - 64)) | (1 << (KotlinParser.SEALED - 64)) | (1 << (KotlinParser.ANNOTATION - 64)) | (1 << (KotlinParser.DATA - 64)) | (1 << (KotlinParser.INNER - 64)) | (1 << (KotlinParser.VALUE - 64)) | (1 << (KotlinParser.TAILREC - 64)) | (1 << (KotlinParser.OPERATOR - 64)) | (1 << (KotlinParser.INLINE - 64)) | (1 << (KotlinParser.INFIX - 64)) | (1 << (KotlinParser.EXTERNAL - 64)) | (1 << (KotlinParser.SUSPEND - 64)) | (1 << (KotlinParser.OVERRIDE - 64)) | (1 << (KotlinParser.ABSTRACT - 64)) | (1 << (KotlinParser.FINAL - 64)) | (1 << (KotlinParser.OPEN - 64)) | (1 << (KotlinParser.CONST - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (KotlinParser.LATEINIT - 128)) | (1 << (KotlinParser.VARARG - 128)) | (1 << (KotlinParser.NOINLINE - 128)) | (1 << (KotlinParser.CROSSINLINE - 128)) | (1 << (KotlinParser.REIFIED - 128)) | (1 << (KotlinParser.EXPECT - 128)) | (1 << (KotlinParser.ACTUAL - 128)) | (1 << (KotlinParser.RealLiteral - 128)) | (1 << (KotlinParser.IntegerLiteral - 128)) | (1 << (KotlinParser.HexLiteral - 128)) | (1 << (KotlinParser.BinLiteral - 128)) | (1 << (KotlinParser.UnsignedLiteral - 128)) | (1 << (KotlinParser.LongLiteral - 128)) | (1 << (KotlinParser.BooleanLiteral - 128)) | (1 << (KotlinParser.NullLiteral - 128)) | (1 << (KotlinParser.CharacterLiteral - 128)) | (1 << (KotlinParser.Identifier - 128)) | (1 << (KotlinParser.QUOTE_OPEN - 128)) | (1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 128)))) != 0):
                self.state = 2475
                self.valueArgument()
                self.state = 2492
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,372,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2479
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 2476
                            self.match(KotlinParser.NL)
                            self.state = 2481
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2482
                        self.match(KotlinParser.COMMA)
                        self.state = 2486
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,371,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2483
                                self.match(KotlinParser.NL) 
                            self.state = 2488
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,371,self._ctx)

                        self.state = 2489
                        self.valueArgument() 
                    self.state = 2494
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,372,self._ctx)

                self.state = 2502
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
                if la_ == 1:
                    self.state = 2498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2495
                        self.match(KotlinParser.NL)
                        self.state = 2500
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2501
                    self.match(KotlinParser.COMMA)


                self.state = 2507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2504
                    self.match(KotlinParser.NL)
                    self.state = 2509
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2512
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def annotation(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_valueArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueArgument" ):
                listener.enterValueArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueArgument" ):
                listener.exitValueArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueArgument" ):
                return visitor.visitValueArgument(self)
            else:
                return visitor.visitChildren(self)




    def valueArgument(self):

        localctx = KotlinParser.ValueArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_valueArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                self.state = 2514
                self.annotation()


            self.state = 2520
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,378,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2517
                    self.match(KotlinParser.NL) 
                self.state = 2522
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,378,self._ctx)

            self.state = 2537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
            if la_ == 1:
                self.state = 2523
                self.simpleIdentifier()
                self.state = 2527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2524
                    self.match(KotlinParser.NL)
                    self.state = 2529
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2530
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 2534
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,380,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2531
                        self.match(KotlinParser.NL) 
                    self.state = 2536
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,380,self._ctx)



            self.state = 2540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.MULT:
                self.state = 2539
                self.match(KotlinParser.MULT)


            self.state = 2545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2542
                self.match(KotlinParser.NL)
                self.state = 2547
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2548
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenthesizedExpression(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedExpressionContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def literalConstant(self):
            return self.getTypedRuleContext(KotlinParser.LiteralConstantContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(KotlinParser.StringLiteralContext,0)


        def callableReference(self):
            return self.getTypedRuleContext(KotlinParser.CallableReferenceContext,0)


        def functionLiteral(self):
            return self.getTypedRuleContext(KotlinParser.FunctionLiteralContext,0)


        def objectLiteral(self):
            return self.getTypedRuleContext(KotlinParser.ObjectLiteralContext,0)


        def collectionLiteral(self):
            return self.getTypedRuleContext(KotlinParser.CollectionLiteralContext,0)


        def thisExpression(self):
            return self.getTypedRuleContext(KotlinParser.ThisExpressionContext,0)


        def superExpression(self):
            return self.getTypedRuleContext(KotlinParser.SuperExpressionContext,0)


        def ifExpression(self):
            return self.getTypedRuleContext(KotlinParser.IfExpressionContext,0)


        def whenExpression(self):
            return self.getTypedRuleContext(KotlinParser.WhenExpressionContext,0)


        def tryExpression(self):
            return self.getTypedRuleContext(KotlinParser.TryExpressionContext,0)


        def jumpExpression(self):
            return self.getTypedRuleContext(KotlinParser.JumpExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = KotlinParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_primaryExpression)
        try:
            self.state = 2564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2550
                self.parenthesizedExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2551
                self.simpleIdentifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2552
                self.literalConstant()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2553
                self.stringLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2554
                self.callableReference()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2555
                self.functionLiteral()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2556
                self.objectLiteral()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2557
                self.collectionLiteral()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2558
                self.thisExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2559
                self.superExpression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2560
                self.ifExpression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2561
                self.whenExpression()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2562
                self.tryExpression()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2563
                self.jumpExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_parenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenthesizedExpression(self):

        localctx = KotlinParser.ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_parenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2566
            self.match(KotlinParser.LPAREN)
            self.state = 2570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2567
                self.match(KotlinParser.NL)
                self.state = 2572
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2573
            self.expression()
            self.state = 2577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2574
                self.match(KotlinParser.NL)
                self.state = 2579
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2580
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_collectionLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionLiteral" ):
                listener.enterCollectionLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionLiteral" ):
                listener.exitCollectionLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollectionLiteral" ):
                return visitor.visitCollectionLiteral(self)
            else:
                return visitor.visitChildren(self)




    def collectionLiteral(self):

        localctx = KotlinParser.CollectionLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_collectionLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2582
            self.match(KotlinParser.LSQUARE)
            self.state = 2586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2583
                self.match(KotlinParser.NL)
                self.state = 2588
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL_WS) | (1 << KotlinParser.EXCL_NO_WS) | (1 << KotlinParser.COLONCOLON) | (1 << KotlinParser.AT_NO_WS) | (1 << KotlinParser.AT_PRE_WS) | (1 << KotlinParser.RETURN_AT) | (1 << KotlinParser.CONTINUE_AT) | (1 << KotlinParser.BREAK_AT) | (1 << KotlinParser.THIS_AT) | (1 << KotlinParser.SUPER_AT) | (1 << KotlinParser.FILE) | (1 << KotlinParser.FIELD) | (1 << KotlinParser.PROPERTY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (KotlinParser.GET - 64)) | (1 << (KotlinParser.SET - 64)) | (1 << (KotlinParser.RECEIVER - 64)) | (1 << (KotlinParser.PARAM - 64)) | (1 << (KotlinParser.SETPARAM - 64)) | (1 << (KotlinParser.DELEGATE - 64)) | (1 << (KotlinParser.IMPORT - 64)) | (1 << (KotlinParser.FUN - 64)) | (1 << (KotlinParser.OBJECT - 64)) | (1 << (KotlinParser.CONSTRUCTOR - 64)) | (1 << (KotlinParser.BY - 64)) | (1 << (KotlinParser.COMPANION - 64)) | (1 << (KotlinParser.INIT - 64)) | (1 << (KotlinParser.THIS - 64)) | (1 << (KotlinParser.SUPER - 64)) | (1 << (KotlinParser.WHERE - 64)) | (1 << (KotlinParser.IF - 64)) | (1 << (KotlinParser.WHEN - 64)) | (1 << (KotlinParser.TRY - 64)) | (1 << (KotlinParser.CATCH - 64)) | (1 << (KotlinParser.FINALLY - 64)) | (1 << (KotlinParser.THROW - 64)) | (1 << (KotlinParser.RETURN - 64)) | (1 << (KotlinParser.CONTINUE - 64)) | (1 << (KotlinParser.BREAK - 64)) | (1 << (KotlinParser.OUT - 64)) | (1 << (KotlinParser.DYNAMIC - 64)) | (1 << (KotlinParser.PUBLIC - 64)) | (1 << (KotlinParser.PRIVATE - 64)) | (1 << (KotlinParser.PROTECTED - 64)) | (1 << (KotlinParser.INTERNAL - 64)) | (1 << (KotlinParser.ENUM - 64)) | (1 << (KotlinParser.SEALED - 64)) | (1 << (KotlinParser.ANNOTATION - 64)) | (1 << (KotlinParser.DATA - 64)) | (1 << (KotlinParser.INNER - 64)) | (1 << (KotlinParser.VALUE - 64)) | (1 << (KotlinParser.TAILREC - 64)) | (1 << (KotlinParser.OPERATOR - 64)) | (1 << (KotlinParser.INLINE - 64)) | (1 << (KotlinParser.INFIX - 64)) | (1 << (KotlinParser.EXTERNAL - 64)) | (1 << (KotlinParser.SUSPEND - 64)) | (1 << (KotlinParser.OVERRIDE - 64)) | (1 << (KotlinParser.ABSTRACT - 64)) | (1 << (KotlinParser.FINAL - 64)) | (1 << (KotlinParser.OPEN - 64)) | (1 << (KotlinParser.CONST - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (KotlinParser.LATEINIT - 128)) | (1 << (KotlinParser.VARARG - 128)) | (1 << (KotlinParser.NOINLINE - 128)) | (1 << (KotlinParser.CROSSINLINE - 128)) | (1 << (KotlinParser.REIFIED - 128)) | (1 << (KotlinParser.EXPECT - 128)) | (1 << (KotlinParser.ACTUAL - 128)) | (1 << (KotlinParser.RealLiteral - 128)) | (1 << (KotlinParser.IntegerLiteral - 128)) | (1 << (KotlinParser.HexLiteral - 128)) | (1 << (KotlinParser.BinLiteral - 128)) | (1 << (KotlinParser.UnsignedLiteral - 128)) | (1 << (KotlinParser.LongLiteral - 128)) | (1 << (KotlinParser.BooleanLiteral - 128)) | (1 << (KotlinParser.NullLiteral - 128)) | (1 << (KotlinParser.CharacterLiteral - 128)) | (1 << (KotlinParser.Identifier - 128)) | (1 << (KotlinParser.QUOTE_OPEN - 128)) | (1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 128)))) != 0):
                self.state = 2589
                self.expression()
                self.state = 2606
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,390,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2593
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 2590
                            self.match(KotlinParser.NL)
                            self.state = 2595
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2596
                        self.match(KotlinParser.COMMA)
                        self.state = 2600
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 2597
                            self.match(KotlinParser.NL)
                            self.state = 2602
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2603
                        self.expression() 
                    self.state = 2608
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,390,self._ctx)

                self.state = 2616
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
                if la_ == 1:
                    self.state = 2612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2609
                        self.match(KotlinParser.NL)
                        self.state = 2614
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2615
                    self.match(KotlinParser.COMMA)


                self.state = 2621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2618
                    self.match(KotlinParser.NL)
                    self.state = 2623
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2626
            self.match(KotlinParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(KotlinParser.BooleanLiteral, 0)

        def IntegerLiteral(self):
            return self.getToken(KotlinParser.IntegerLiteral, 0)

        def HexLiteral(self):
            return self.getToken(KotlinParser.HexLiteral, 0)

        def BinLiteral(self):
            return self.getToken(KotlinParser.BinLiteral, 0)

        def CharacterLiteral(self):
            return self.getToken(KotlinParser.CharacterLiteral, 0)

        def RealLiteral(self):
            return self.getToken(KotlinParser.RealLiteral, 0)

        def NullLiteral(self):
            return self.getToken(KotlinParser.NullLiteral, 0)

        def LongLiteral(self):
            return self.getToken(KotlinParser.LongLiteral, 0)

        def UnsignedLiteral(self):
            return self.getToken(KotlinParser.UnsignedLiteral, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_literalConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralConstant" ):
                listener.enterLiteralConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralConstant" ):
                listener.exitLiteralConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralConstant" ):
                return visitor.visitLiteralConstant(self)
            else:
                return visitor.visitChildren(self)




    def literalConstant(self):

        localctx = KotlinParser.LiteralConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_literalConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2628
            _la = self._input.LA(1)
            if not(((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (KotlinParser.RealLiteral - 135)) | (1 << (KotlinParser.IntegerLiteral - 135)) | (1 << (KotlinParser.HexLiteral - 135)) | (1 << (KotlinParser.BinLiteral - 135)) | (1 << (KotlinParser.UnsignedLiteral - 135)) | (1 << (KotlinParser.LongLiteral - 135)) | (1 << (KotlinParser.BooleanLiteral - 135)) | (1 << (KotlinParser.NullLiteral - 135)) | (1 << (KotlinParser.CharacterLiteral - 135)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lineStringLiteral(self):
            return self.getTypedRuleContext(KotlinParser.LineStringLiteralContext,0)


        def multiLineStringLiteral(self):
            return self.getTypedRuleContext(KotlinParser.MultiLineStringLiteralContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = KotlinParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_stringLiteral)
        try:
            self.state = 2632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.QUOTE_OPEN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2630
                self.lineStringLiteral()
                pass
            elif token in [KotlinParser.TRIPLE_QUOTE_OPEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2631
                self.multiLineStringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTE_OPEN(self):
            return self.getToken(KotlinParser.QUOTE_OPEN, 0)

        def QUOTE_CLOSE(self):
            return self.getToken(KotlinParser.QUOTE_CLOSE, 0)

        def lineStringContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LineStringContentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LineStringContentContext,i)


        def lineStringExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LineStringExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LineStringExpressionContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_lineStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineStringLiteral" ):
                listener.enterLineStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineStringLiteral" ):
                listener.exitLineStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineStringLiteral" ):
                return visitor.visitLineStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def lineStringLiteral(self):

        localctx = KotlinParser.LineStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_lineStringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2634
            self.match(KotlinParser.QUOTE_OPEN)
            self.state = 2639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (KotlinParser.LineStrRef - 159)) | (1 << (KotlinParser.LineStrText - 159)) | (1 << (KotlinParser.LineStrEscapedChar - 159)) | (1 << (KotlinParser.LineStrExprStart - 159)))) != 0):
                self.state = 2637
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [KotlinParser.LineStrRef, KotlinParser.LineStrText, KotlinParser.LineStrEscapedChar]:
                    self.state = 2635
                    self.lineStringContent()
                    pass
                elif token in [KotlinParser.LineStrExprStart]:
                    self.state = 2636
                    self.lineStringExpression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2641
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2642
            self.match(KotlinParser.QUOTE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiLineStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIPLE_QUOTE_OPEN(self):
            return self.getToken(KotlinParser.TRIPLE_QUOTE_OPEN, 0)

        def TRIPLE_QUOTE_CLOSE(self):
            return self.getToken(KotlinParser.TRIPLE_QUOTE_CLOSE, 0)

        def multiLineStringContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiLineStringContentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiLineStringContentContext,i)


        def multiLineStringExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiLineStringExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiLineStringExpressionContext,i)


        def MultiLineStringQuote(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.MultiLineStringQuote)
            else:
                return self.getToken(KotlinParser.MultiLineStringQuote, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiLineStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiLineStringLiteral" ):
                listener.enterMultiLineStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiLineStringLiteral" ):
                listener.exitMultiLineStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiLineStringLiteral" ):
                return visitor.visitMultiLineStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def multiLineStringLiteral(self):

        localctx = KotlinParser.MultiLineStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_multiLineStringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2644
            self.match(KotlinParser.TRIPLE_QUOTE_OPEN)
            self.state = 2650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 164)) & ~0x3f) == 0 and ((1 << (_la - 164)) & ((1 << (KotlinParser.MultiLineStringQuote - 164)) | (1 << (KotlinParser.MultiLineStrRef - 164)) | (1 << (KotlinParser.MultiLineStrText - 164)) | (1 << (KotlinParser.MultiLineStrExprStart - 164)))) != 0):
                self.state = 2648
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
                if la_ == 1:
                    self.state = 2645
                    self.multiLineStringContent()
                    pass

                elif la_ == 2:
                    self.state = 2646
                    self.multiLineStringExpression()
                    pass

                elif la_ == 3:
                    self.state = 2647
                    self.match(KotlinParser.MultiLineStringQuote)
                    pass


                self.state = 2652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2653
            self.match(KotlinParser.TRIPLE_QUOTE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineStringContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LineStrText(self):
            return self.getToken(KotlinParser.LineStrText, 0)

        def LineStrEscapedChar(self):
            return self.getToken(KotlinParser.LineStrEscapedChar, 0)

        def LineStrRef(self):
            return self.getToken(KotlinParser.LineStrRef, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_lineStringContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineStringContent" ):
                listener.enterLineStringContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineStringContent" ):
                listener.exitLineStringContent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineStringContent" ):
                return visitor.visitLineStringContent(self)
            else:
                return visitor.visitChildren(self)




    def lineStringContent(self):

        localctx = KotlinParser.LineStringContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_lineStringContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2655
            _la = self._input.LA(1)
            if not(((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (KotlinParser.LineStrRef - 159)) | (1 << (KotlinParser.LineStrText - 159)) | (1 << (KotlinParser.LineStrEscapedChar - 159)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineStringExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LineStrExprStart(self):
            return self.getToken(KotlinParser.LineStrExprStart, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_lineStringExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineStringExpression" ):
                listener.enterLineStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineStringExpression" ):
                listener.exitLineStringExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineStringExpression" ):
                return visitor.visitLineStringExpression(self)
            else:
                return visitor.visitChildren(self)




    def lineStringExpression(self):

        localctx = KotlinParser.LineStringExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_lineStringExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2657
            self.match(KotlinParser.LineStrExprStart)
            self.state = 2661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2658
                self.match(KotlinParser.NL)
                self.state = 2663
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2664
            self.expression()
            self.state = 2668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2665
                self.match(KotlinParser.NL)
                self.state = 2670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2671
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiLineStringContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MultiLineStrText(self):
            return self.getToken(KotlinParser.MultiLineStrText, 0)

        def MultiLineStringQuote(self):
            return self.getToken(KotlinParser.MultiLineStringQuote, 0)

        def MultiLineStrRef(self):
            return self.getToken(KotlinParser.MultiLineStrRef, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiLineStringContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiLineStringContent" ):
                listener.enterMultiLineStringContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiLineStringContent" ):
                listener.exitMultiLineStringContent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiLineStringContent" ):
                return visitor.visitMultiLineStringContent(self)
            else:
                return visitor.visitChildren(self)




    def multiLineStringContent(self):

        localctx = KotlinParser.MultiLineStringContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_multiLineStringContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2673
            _la = self._input.LA(1)
            if not(((((_la - 164)) & ~0x3f) == 0 and ((1 << (_la - 164)) & ((1 << (KotlinParser.MultiLineStringQuote - 164)) | (1 << (KotlinParser.MultiLineStrRef - 164)) | (1 << (KotlinParser.MultiLineStrText - 164)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiLineStringExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MultiLineStrExprStart(self):
            return self.getToken(KotlinParser.MultiLineStrExprStart, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiLineStringExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiLineStringExpression" ):
                listener.enterMultiLineStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiLineStringExpression" ):
                listener.exitMultiLineStringExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiLineStringExpression" ):
                return visitor.visitMultiLineStringExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiLineStringExpression(self):

        localctx = KotlinParser.MultiLineStringExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_multiLineStringExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2675
            self.match(KotlinParser.MultiLineStrExprStart)
            self.state = 2679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2676
                self.match(KotlinParser.NL)
                self.state = 2681
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2682
            self.expression()
            self.state = 2686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2683
                self.match(KotlinParser.NL)
                self.state = 2688
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2689
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def statements(self):
            return self.getTypedRuleContext(KotlinParser.StatementsContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def ARROW(self):
            return self.getToken(KotlinParser.ARROW, 0)

        def lambdaParameters(self):
            return self.getTypedRuleContext(KotlinParser.LambdaParametersContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_lambdaLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaLiteral" ):
                listener.enterLambdaLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaLiteral" ):
                listener.exitLambdaLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaLiteral" ):
                return visitor.visitLambdaLiteral(self)
            else:
                return visitor.visitChildren(self)




    def lambdaLiteral(self):

        localctx = KotlinParser.LambdaLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_lambdaLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2691
            self.match(KotlinParser.LCURL)
            self.state = 2695
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,404,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2692
                    self.match(KotlinParser.NL) 
                self.state = 2697
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,404,self._ctx)

            self.state = 2714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
            if la_ == 1:
                self.state = 2699
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,405,self._ctx)
                if la_ == 1:
                    self.state = 2698
                    self.lambdaParameters()


                self.state = 2704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2701
                    self.match(KotlinParser.NL)
                    self.state = 2706
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2707
                self.match(KotlinParser.ARROW)
                self.state = 2711
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,407,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2708
                        self.match(KotlinParser.NL) 
                    self.state = 2713
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,407,self._ctx)



            self.state = 2716
            self.statements()
            self.state = 2720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2717
                self.match(KotlinParser.NL)
                self.state = 2722
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2723
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LambdaParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LambdaParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaParameters" ):
                return visitor.visitLambdaParameters(self)
            else:
                return visitor.visitChildren(self)




    def lambdaParameters(self):

        localctx = KotlinParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2725
            self.lambdaParameter()
            self.state = 2742
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,412,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2729
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2726
                        self.match(KotlinParser.NL)
                        self.state = 2731
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2732
                    self.match(KotlinParser.COMMA)
                    self.state = 2736
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,411,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2733
                            self.match(KotlinParser.NL) 
                        self.state = 2738
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,411,self._ctx)

                    self.state = 2739
                    self.lambdaParameter() 
                self.state = 2744
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,412,self._ctx)

            self.state = 2752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,414,self._ctx)
            if la_ == 1:
                self.state = 2748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2745
                    self.match(KotlinParser.NL)
                    self.state = 2750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2751
                self.match(KotlinParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def multiVariableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.MultiVariableDeclarationContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_lambdaParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameter" ):
                listener.enterLambdaParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameter" ):
                listener.exitLambdaParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaParameter" ):
                return visitor.visitLambdaParameter(self)
            else:
                return visitor.visitChildren(self)




    def lambdaParameter(self):

        localctx = KotlinParser.LambdaParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_lambdaParameter)
        self._la = 0 # Token type
        try:
            self.state = 2772
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.NL, KotlinParser.AT_NO_WS, KotlinParser.AT_PRE_WS, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.VALUE, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.EXPECT, KotlinParser.ACTUAL, KotlinParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2754
                self.variableDeclaration()
                pass
            elif token in [KotlinParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2755
                self.multiVariableDeclaration()
                self.state = 2770
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
                if la_ == 1:
                    self.state = 2759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2756
                        self.match(KotlinParser.NL)
                        self.state = 2761
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2762
                    self.match(KotlinParser.COLON)
                    self.state = 2766
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2763
                        self.match(KotlinParser.NL)
                        self.state = 2768
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2769
                    self.type_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnonymousFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUN(self):
            return self.getToken(KotlinParser.FUN, 0)

        def parametersWithOptionalType(self):
            return self.getTypedRuleContext(KotlinParser.ParametersWithOptionalTypeContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeContext,i)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(KotlinParser.FunctionBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_anonymousFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousFunction" ):
                listener.enterAnonymousFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousFunction" ):
                listener.exitAnonymousFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnonymousFunction" ):
                return visitor.visitAnonymousFunction(self)
            else:
                return visitor.visitChildren(self)




    def anonymousFunction(self):

        localctx = KotlinParser.AnonymousFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_anonymousFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2774
            self.match(KotlinParser.FUN)
            self.state = 2790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
            if la_ == 1:
                self.state = 2778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2775
                    self.match(KotlinParser.NL)
                    self.state = 2780
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2781
                self.type_()
                self.state = 2785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2782
                    self.match(KotlinParser.NL)
                    self.state = 2787
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2788
                self.match(KotlinParser.DOT)


            self.state = 2795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2792
                self.match(KotlinParser.NL)
                self.state = 2797
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2798
            self.parametersWithOptionalType()
            self.state = 2813
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,425,self._ctx)
            if la_ == 1:
                self.state = 2802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2799
                    self.match(KotlinParser.NL)
                    self.state = 2804
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2805
                self.match(KotlinParser.COLON)
                self.state = 2809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2806
                    self.match(KotlinParser.NL)
                    self.state = 2811
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2812
                self.type_()


            self.state = 2822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
            if la_ == 1:
                self.state = 2818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2815
                    self.match(KotlinParser.NL)
                    self.state = 2820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2821
                self.typeConstraints()


            self.state = 2831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
            if la_ == 1:
                self.state = 2827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2824
                    self.match(KotlinParser.NL)
                    self.state = 2829
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2830
                self.functionBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaLiteral(self):
            return self.getTypedRuleContext(KotlinParser.LambdaLiteralContext,0)


        def anonymousFunction(self):
            return self.getTypedRuleContext(KotlinParser.AnonymousFunctionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_functionLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionLiteral" ):
                listener.enterFunctionLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionLiteral" ):
                listener.exitFunctionLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionLiteral" ):
                return visitor.visitFunctionLiteral(self)
            else:
                return visitor.visitChildren(self)




    def functionLiteral(self):

        localctx = KotlinParser.FunctionLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_functionLiteral)
        try:
            self.state = 2835
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LCURL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2833
                self.lambdaLiteral()
                pass
            elif token in [KotlinParser.FUN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2834
                self.anonymousFunction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(KotlinParser.OBJECT, 0)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_objectLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteral" ):
                listener.enterObjectLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteral" ):
                listener.exitObjectLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectLiteral" ):
                return visitor.visitObjectLiteral(self)
            else:
                return visitor.visitChildren(self)




    def objectLiteral(self):

        localctx = KotlinParser.ObjectLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_objectLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2837
            self.match(KotlinParser.OBJECT)
            self.state = 2858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
            if la_ == 1:
                self.state = 2841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2838
                    self.match(KotlinParser.NL)
                    self.state = 2843
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2844
                self.match(KotlinParser.COLON)
                self.state = 2848
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,432,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2845
                        self.match(KotlinParser.NL) 
                    self.state = 2850
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,432,self._ctx)

                self.state = 2851
                self.delegationSpecifiers()
                self.state = 2855
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,433,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2852
                        self.match(KotlinParser.NL) 
                    self.state = 2857
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,433,self._ctx)



            self.state = 2867
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
            if la_ == 1:
                self.state = 2863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2860
                    self.match(KotlinParser.NL)
                    self.state = 2865
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2866
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThisExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(KotlinParser.THIS, 0)

        def THIS_AT(self):
            return self.getToken(KotlinParser.THIS_AT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_thisExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisExpression" ):
                listener.enterThisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisExpression" ):
                listener.exitThisExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThisExpression" ):
                return visitor.visitThisExpression(self)
            else:
                return visitor.visitChildren(self)




    def thisExpression(self):

        localctx = KotlinParser.ThisExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_thisExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2869
            _la = self._input.LA(1)
            if not(_la==KotlinParser.THIS_AT or _la==KotlinParser.THIS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(KotlinParser.SUPER, 0)

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def AT_NO_WS(self):
            return self.getToken(KotlinParser.AT_NO_WS, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def SUPER_AT(self):
            return self.getToken(KotlinParser.SUPER_AT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_superExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperExpression" ):
                listener.enterSuperExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperExpression" ):
                listener.exitSuperExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperExpression" ):
                return visitor.visitSuperExpression(self)
            else:
                return visitor.visitChildren(self)




    def superExpression(self):

        localctx = KotlinParser.SuperExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_superExpression)
        self._la = 0 # Token type
        try:
            self.state = 2895
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.SUPER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2871
                self.match(KotlinParser.SUPER)
                self.state = 2888
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
                if la_ == 1:
                    self.state = 2872
                    self.match(KotlinParser.LANGLE)
                    self.state = 2876
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2873
                        self.match(KotlinParser.NL)
                        self.state = 2878
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2879
                    self.type_()
                    self.state = 2883
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2880
                        self.match(KotlinParser.NL)
                        self.state = 2885
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2886
                    self.match(KotlinParser.RANGLE)


                self.state = 2892
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
                if la_ == 1:
                    self.state = 2890
                    self.match(KotlinParser.AT_NO_WS)
                    self.state = 2891
                    self.simpleIdentifier()


                pass
            elif token in [KotlinParser.SUPER_AT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2894
                self.match(KotlinParser.SUPER_AT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(KotlinParser.IF, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def controlStructureBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ControlStructureBodyContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,i)


        def ELSE(self):
            return self.getToken(KotlinParser.ELSE, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.SEMICOLON)
            else:
                return self.getToken(KotlinParser.SEMICOLON, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_ifExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpression" ):
                listener.enterIfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpression" ):
                listener.exitIfExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfExpression" ):
                return visitor.visitIfExpression(self)
            else:
                return visitor.visitChildren(self)




    def ifExpression(self):

        localctx = KotlinParser.IfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_ifExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2897
            self.match(KotlinParser.IF)
            self.state = 2901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2898
                self.match(KotlinParser.NL)
                self.state = 2903
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2904
            self.match(KotlinParser.LPAREN)
            self.state = 2908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2905
                self.match(KotlinParser.NL)
                self.state = 2910
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2911
            self.expression()
            self.state = 2915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2912
                self.match(KotlinParser.NL)
                self.state = 2917
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2918
            self.match(KotlinParser.RPAREN)
            self.state = 2922
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,445,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2919
                    self.match(KotlinParser.NL) 
                self.state = 2924
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,445,self._ctx)

            self.state = 2956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
            if la_ == 1:
                self.state = 2925
                self.controlStructureBody()
                pass

            elif la_ == 2:
                self.state = 2927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL_WS) | (1 << KotlinParser.EXCL_NO_WS) | (1 << KotlinParser.COLONCOLON) | (1 << KotlinParser.AT_NO_WS) | (1 << KotlinParser.AT_PRE_WS) | (1 << KotlinParser.RETURN_AT) | (1 << KotlinParser.CONTINUE_AT) | (1 << KotlinParser.BREAK_AT) | (1 << KotlinParser.THIS_AT) | (1 << KotlinParser.SUPER_AT) | (1 << KotlinParser.FILE) | (1 << KotlinParser.FIELD) | (1 << KotlinParser.PROPERTY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (KotlinParser.GET - 64)) | (1 << (KotlinParser.SET - 64)) | (1 << (KotlinParser.RECEIVER - 64)) | (1 << (KotlinParser.PARAM - 64)) | (1 << (KotlinParser.SETPARAM - 64)) | (1 << (KotlinParser.DELEGATE - 64)) | (1 << (KotlinParser.IMPORT - 64)) | (1 << (KotlinParser.CLASS - 64)) | (1 << (KotlinParser.INTERFACE - 64)) | (1 << (KotlinParser.FUN - 64)) | (1 << (KotlinParser.OBJECT - 64)) | (1 << (KotlinParser.VAL - 64)) | (1 << (KotlinParser.VAR - 64)) | (1 << (KotlinParser.TYPE_ALIAS - 64)) | (1 << (KotlinParser.CONSTRUCTOR - 64)) | (1 << (KotlinParser.BY - 64)) | (1 << (KotlinParser.COMPANION - 64)) | (1 << (KotlinParser.INIT - 64)) | (1 << (KotlinParser.THIS - 64)) | (1 << (KotlinParser.SUPER - 64)) | (1 << (KotlinParser.WHERE - 64)) | (1 << (KotlinParser.IF - 64)) | (1 << (KotlinParser.WHEN - 64)) | (1 << (KotlinParser.TRY - 64)) | (1 << (KotlinParser.CATCH - 64)) | (1 << (KotlinParser.FINALLY - 64)) | (1 << (KotlinParser.FOR - 64)) | (1 << (KotlinParser.DO - 64)) | (1 << (KotlinParser.WHILE - 64)) | (1 << (KotlinParser.THROW - 64)) | (1 << (KotlinParser.RETURN - 64)) | (1 << (KotlinParser.CONTINUE - 64)) | (1 << (KotlinParser.BREAK - 64)) | (1 << (KotlinParser.OUT - 64)) | (1 << (KotlinParser.DYNAMIC - 64)) | (1 << (KotlinParser.PUBLIC - 64)) | (1 << (KotlinParser.PRIVATE - 64)) | (1 << (KotlinParser.PROTECTED - 64)) | (1 << (KotlinParser.INTERNAL - 64)) | (1 << (KotlinParser.ENUM - 64)) | (1 << (KotlinParser.SEALED - 64)) | (1 << (KotlinParser.ANNOTATION - 64)) | (1 << (KotlinParser.DATA - 64)) | (1 << (KotlinParser.INNER - 64)) | (1 << (KotlinParser.VALUE - 64)) | (1 << (KotlinParser.TAILREC - 64)) | (1 << (KotlinParser.OPERATOR - 64)) | (1 << (KotlinParser.INLINE - 64)) | (1 << (KotlinParser.INFIX - 64)) | (1 << (KotlinParser.EXTERNAL - 64)) | (1 << (KotlinParser.SUSPEND - 64)) | (1 << (KotlinParser.OVERRIDE - 64)) | (1 << (KotlinParser.ABSTRACT - 64)) | (1 << (KotlinParser.FINAL - 64)) | (1 << (KotlinParser.OPEN - 64)) | (1 << (KotlinParser.CONST - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (KotlinParser.LATEINIT - 128)) | (1 << (KotlinParser.VARARG - 128)) | (1 << (KotlinParser.NOINLINE - 128)) | (1 << (KotlinParser.CROSSINLINE - 128)) | (1 << (KotlinParser.REIFIED - 128)) | (1 << (KotlinParser.EXPECT - 128)) | (1 << (KotlinParser.ACTUAL - 128)) | (1 << (KotlinParser.RealLiteral - 128)) | (1 << (KotlinParser.IntegerLiteral - 128)) | (1 << (KotlinParser.HexLiteral - 128)) | (1 << (KotlinParser.BinLiteral - 128)) | (1 << (KotlinParser.UnsignedLiteral - 128)) | (1 << (KotlinParser.LongLiteral - 128)) | (1 << (KotlinParser.BooleanLiteral - 128)) | (1 << (KotlinParser.NullLiteral - 128)) | (1 << (KotlinParser.CharacterLiteral - 128)) | (1 << (KotlinParser.Identifier - 128)) | (1 << (KotlinParser.QUOTE_OPEN - 128)) | (1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 128)))) != 0):
                    self.state = 2926
                    self.controlStructureBody()


                self.state = 2932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,447,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2929
                        self.match(KotlinParser.NL) 
                    self.state = 2934
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,447,self._ctx)

                self.state = 2936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.SEMICOLON:
                    self.state = 2935
                    self.match(KotlinParser.SEMICOLON)


                self.state = 2941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2938
                    self.match(KotlinParser.NL)
                    self.state = 2943
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2944
                self.match(KotlinParser.ELSE)
                self.state = 2948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2945
                    self.match(KotlinParser.NL)
                    self.state = 2950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2953
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [KotlinParser.LPAREN, KotlinParser.LSQUARE, KotlinParser.LCURL, KotlinParser.ADD, KotlinParser.SUB, KotlinParser.INCR, KotlinParser.DECR, KotlinParser.EXCL_WS, KotlinParser.EXCL_NO_WS, KotlinParser.COLONCOLON, KotlinParser.AT_NO_WS, KotlinParser.AT_PRE_WS, KotlinParser.RETURN_AT, KotlinParser.CONTINUE_AT, KotlinParser.BREAK_AT, KotlinParser.THIS_AT, KotlinParser.SUPER_AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.IMPORT, KotlinParser.CLASS, KotlinParser.INTERFACE, KotlinParser.FUN, KotlinParser.OBJECT, KotlinParser.VAL, KotlinParser.VAR, KotlinParser.TYPE_ALIAS, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.THIS, KotlinParser.SUPER, KotlinParser.WHERE, KotlinParser.IF, KotlinParser.WHEN, KotlinParser.TRY, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.FOR, KotlinParser.DO, KotlinParser.WHILE, KotlinParser.THROW, KotlinParser.RETURN, KotlinParser.CONTINUE, KotlinParser.BREAK, KotlinParser.OUT, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.VALUE, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.EXPECT, KotlinParser.ACTUAL, KotlinParser.RealLiteral, KotlinParser.IntegerLiteral, KotlinParser.HexLiteral, KotlinParser.BinLiteral, KotlinParser.UnsignedLiteral, KotlinParser.LongLiteral, KotlinParser.BooleanLiteral, KotlinParser.NullLiteral, KotlinParser.CharacterLiteral, KotlinParser.Identifier, KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN]:
                    self.state = 2951
                    self.controlStructureBody()
                    pass
                elif token in [KotlinParser.SEMICOLON]:
                    self.state = 2952
                    self.match(KotlinParser.SEMICOLON)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.state = 2955
                self.match(KotlinParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenSubjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def VAL(self):
            return self.getToken(KotlinParser.VAL, 0)

        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_whenSubject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenSubject" ):
                listener.enterWhenSubject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenSubject" ):
                listener.exitWhenSubject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenSubject" ):
                return visitor.visitWhenSubject(self)
            else:
                return visitor.visitChildren(self)




    def whenSubject(self):

        localctx = KotlinParser.WhenSubjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_whenSubject)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2958
            self.match(KotlinParser.LPAREN)
            self.state = 2992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,458,self._ctx)
            if la_ == 1:
                self.state = 2962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS:
                    self.state = 2959
                    self.annotation()
                    self.state = 2964
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2965
                    self.match(KotlinParser.NL)
                    self.state = 2970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2971
                self.match(KotlinParser.VAL)
                self.state = 2975
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,455,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2972
                        self.match(KotlinParser.NL) 
                    self.state = 2977
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,455,self._ctx)

                self.state = 2978
                self.variableDeclaration()
                self.state = 2982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2979
                    self.match(KotlinParser.NL)
                    self.state = 2984
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2985
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 2989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2986
                    self.match(KotlinParser.NL)
                    self.state = 2991
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2994
            self.expression()
            self.state = 2995
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(KotlinParser.WHEN, 0)

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def whenSubject(self):
            return self.getTypedRuleContext(KotlinParser.WhenSubjectContext,0)


        def whenEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.WhenEntryContext)
            else:
                return self.getTypedRuleContext(KotlinParser.WhenEntryContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_whenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpression" ):
                listener.enterWhenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpression" ):
                listener.exitWhenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenExpression" ):
                return visitor.visitWhenExpression(self)
            else:
                return visitor.visitChildren(self)




    def whenExpression(self):

        localctx = KotlinParser.WhenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_whenExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2997
            self.match(KotlinParser.WHEN)
            self.state = 3001
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,459,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2998
                    self.match(KotlinParser.NL) 
                self.state = 3003
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,459,self._ctx)

            self.state = 3005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.LPAREN:
                self.state = 3004
                self.whenSubject()


            self.state = 3010
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 3007
                self.match(KotlinParser.NL)
                self.state = 3012
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3013
            self.match(KotlinParser.LCURL)
            self.state = 3017
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,462,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3014
                    self.match(KotlinParser.NL) 
                self.state = 3019
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,462,self._ctx)

            self.state = 3029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL_WS) | (1 << KotlinParser.EXCL_NO_WS) | (1 << KotlinParser.COLONCOLON) | (1 << KotlinParser.AT_NO_WS) | (1 << KotlinParser.AT_PRE_WS) | (1 << KotlinParser.RETURN_AT) | (1 << KotlinParser.CONTINUE_AT) | (1 << KotlinParser.BREAK_AT) | (1 << KotlinParser.THIS_AT) | (1 << KotlinParser.SUPER_AT) | (1 << KotlinParser.FILE) | (1 << KotlinParser.FIELD) | (1 << KotlinParser.PROPERTY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (KotlinParser.GET - 64)) | (1 << (KotlinParser.SET - 64)) | (1 << (KotlinParser.RECEIVER - 64)) | (1 << (KotlinParser.PARAM - 64)) | (1 << (KotlinParser.SETPARAM - 64)) | (1 << (KotlinParser.DELEGATE - 64)) | (1 << (KotlinParser.IMPORT - 64)) | (1 << (KotlinParser.FUN - 64)) | (1 << (KotlinParser.OBJECT - 64)) | (1 << (KotlinParser.CONSTRUCTOR - 64)) | (1 << (KotlinParser.BY - 64)) | (1 << (KotlinParser.COMPANION - 64)) | (1 << (KotlinParser.INIT - 64)) | (1 << (KotlinParser.THIS - 64)) | (1 << (KotlinParser.SUPER - 64)) | (1 << (KotlinParser.WHERE - 64)) | (1 << (KotlinParser.IF - 64)) | (1 << (KotlinParser.ELSE - 64)) | (1 << (KotlinParser.WHEN - 64)) | (1 << (KotlinParser.TRY - 64)) | (1 << (KotlinParser.CATCH - 64)) | (1 << (KotlinParser.FINALLY - 64)) | (1 << (KotlinParser.THROW - 64)) | (1 << (KotlinParser.RETURN - 64)) | (1 << (KotlinParser.CONTINUE - 64)) | (1 << (KotlinParser.BREAK - 64)) | (1 << (KotlinParser.IS - 64)) | (1 << (KotlinParser.IN - 64)) | (1 << (KotlinParser.NOT_IS - 64)) | (1 << (KotlinParser.NOT_IN - 64)) | (1 << (KotlinParser.OUT - 64)) | (1 << (KotlinParser.DYNAMIC - 64)) | (1 << (KotlinParser.PUBLIC - 64)) | (1 << (KotlinParser.PRIVATE - 64)) | (1 << (KotlinParser.PROTECTED - 64)) | (1 << (KotlinParser.INTERNAL - 64)) | (1 << (KotlinParser.ENUM - 64)) | (1 << (KotlinParser.SEALED - 64)) | (1 << (KotlinParser.ANNOTATION - 64)) | (1 << (KotlinParser.DATA - 64)) | (1 << (KotlinParser.INNER - 64)) | (1 << (KotlinParser.VALUE - 64)) | (1 << (KotlinParser.TAILREC - 64)) | (1 << (KotlinParser.OPERATOR - 64)) | (1 << (KotlinParser.INLINE - 64)) | (1 << (KotlinParser.INFIX - 64)) | (1 << (KotlinParser.EXTERNAL - 64)) | (1 << (KotlinParser.SUSPEND - 64)) | (1 << (KotlinParser.OVERRIDE - 64)) | (1 << (KotlinParser.ABSTRACT - 64)) | (1 << (KotlinParser.FINAL - 64)) | (1 << (KotlinParser.OPEN - 64)) | (1 << (KotlinParser.CONST - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (KotlinParser.LATEINIT - 128)) | (1 << (KotlinParser.VARARG - 128)) | (1 << (KotlinParser.NOINLINE - 128)) | (1 << (KotlinParser.CROSSINLINE - 128)) | (1 << (KotlinParser.REIFIED - 128)) | (1 << (KotlinParser.EXPECT - 128)) | (1 << (KotlinParser.ACTUAL - 128)) | (1 << (KotlinParser.RealLiteral - 128)) | (1 << (KotlinParser.IntegerLiteral - 128)) | (1 << (KotlinParser.HexLiteral - 128)) | (1 << (KotlinParser.BinLiteral - 128)) | (1 << (KotlinParser.UnsignedLiteral - 128)) | (1 << (KotlinParser.LongLiteral - 128)) | (1 << (KotlinParser.BooleanLiteral - 128)) | (1 << (KotlinParser.NullLiteral - 128)) | (1 << (KotlinParser.CharacterLiteral - 128)) | (1 << (KotlinParser.Identifier - 128)) | (1 << (KotlinParser.QUOTE_OPEN - 128)) | (1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 128)))) != 0):
                self.state = 3020
                self.whenEntry()
                self.state = 3024
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,463,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3021
                        self.match(KotlinParser.NL) 
                    self.state = 3026
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,463,self._ctx)

                self.state = 3031
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 3032
                self.match(KotlinParser.NL)
                self.state = 3037
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3038
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whenCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.WhenConditionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.WhenConditionContext,i)


        def ARROW(self):
            return self.getToken(KotlinParser.ARROW, 0)

        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def ELSE(self):
            return self.getToken(KotlinParser.ELSE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_whenEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenEntry" ):
                listener.enterWhenEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenEntry" ):
                listener.exitWhenEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenEntry" ):
                return visitor.visitWhenEntry(self)
            else:
                return visitor.visitChildren(self)




    def whenEntry(self):

        localctx = KotlinParser.WhenEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_whenEntry)
        self._la = 0 # Token type
        try:
            self.state = 3104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LPAREN, KotlinParser.LSQUARE, KotlinParser.LCURL, KotlinParser.ADD, KotlinParser.SUB, KotlinParser.INCR, KotlinParser.DECR, KotlinParser.EXCL_WS, KotlinParser.EXCL_NO_WS, KotlinParser.COLONCOLON, KotlinParser.AT_NO_WS, KotlinParser.AT_PRE_WS, KotlinParser.RETURN_AT, KotlinParser.CONTINUE_AT, KotlinParser.BREAK_AT, KotlinParser.THIS_AT, KotlinParser.SUPER_AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.IMPORT, KotlinParser.FUN, KotlinParser.OBJECT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.THIS, KotlinParser.SUPER, KotlinParser.WHERE, KotlinParser.IF, KotlinParser.WHEN, KotlinParser.TRY, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.THROW, KotlinParser.RETURN, KotlinParser.CONTINUE, KotlinParser.BREAK, KotlinParser.IS, KotlinParser.IN, KotlinParser.NOT_IS, KotlinParser.NOT_IN, KotlinParser.OUT, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.VALUE, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.EXPECT, KotlinParser.ACTUAL, KotlinParser.RealLiteral, KotlinParser.IntegerLiteral, KotlinParser.HexLiteral, KotlinParser.BinLiteral, KotlinParser.UnsignedLiteral, KotlinParser.LongLiteral, KotlinParser.BooleanLiteral, KotlinParser.NullLiteral, KotlinParser.CharacterLiteral, KotlinParser.Identifier, KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3040
                self.whenCondition()
                self.state = 3057
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,468,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3044
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 3041
                            self.match(KotlinParser.NL)
                            self.state = 3046
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 3047
                        self.match(KotlinParser.COMMA)
                        self.state = 3051
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 3048
                            self.match(KotlinParser.NL)
                            self.state = 3053
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 3054
                        self.whenCondition() 
                    self.state = 3059
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,468,self._ctx)

                self.state = 3067
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
                if la_ == 1:
                    self.state = 3063
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 3060
                        self.match(KotlinParser.NL)
                        self.state = 3065
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3066
                    self.match(KotlinParser.COMMA)


                self.state = 3072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 3069
                    self.match(KotlinParser.NL)
                    self.state = 3074
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3075
                self.match(KotlinParser.ARROW)
                self.state = 3079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 3076
                    self.match(KotlinParser.NL)
                    self.state = 3081
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3082
                self.controlStructureBody()
                self.state = 3084
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
                if la_ == 1:
                    self.state = 3083
                    self.semi()


                pass
            elif token in [KotlinParser.ELSE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3086
                self.match(KotlinParser.ELSE)
                self.state = 3090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 3087
                    self.match(KotlinParser.NL)
                    self.state = 3092
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3093
                self.match(KotlinParser.ARROW)
                self.state = 3097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 3094
                    self.match(KotlinParser.NL)
                    self.state = 3099
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3100
                self.controlStructureBody()
                self.state = 3102
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
                if la_ == 1:
                    self.state = 3101
                    self.semi()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def rangeTest(self):
            return self.getTypedRuleContext(KotlinParser.RangeTestContext,0)


        def typeTest(self):
            return self.getTypedRuleContext(KotlinParser.TypeTestContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_whenCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenCondition" ):
                listener.enterWhenCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenCondition" ):
                listener.exitWhenCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenCondition" ):
                return visitor.visitWhenCondition(self)
            else:
                return visitor.visitChildren(self)




    def whenCondition(self):

        localctx = KotlinParser.WhenConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_whenCondition)
        try:
            self.state = 3109
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LPAREN, KotlinParser.LSQUARE, KotlinParser.LCURL, KotlinParser.ADD, KotlinParser.SUB, KotlinParser.INCR, KotlinParser.DECR, KotlinParser.EXCL_WS, KotlinParser.EXCL_NO_WS, KotlinParser.COLONCOLON, KotlinParser.AT_NO_WS, KotlinParser.AT_PRE_WS, KotlinParser.RETURN_AT, KotlinParser.CONTINUE_AT, KotlinParser.BREAK_AT, KotlinParser.THIS_AT, KotlinParser.SUPER_AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.IMPORT, KotlinParser.FUN, KotlinParser.OBJECT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.THIS, KotlinParser.SUPER, KotlinParser.WHERE, KotlinParser.IF, KotlinParser.WHEN, KotlinParser.TRY, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.THROW, KotlinParser.RETURN, KotlinParser.CONTINUE, KotlinParser.BREAK, KotlinParser.OUT, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.VALUE, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.EXPECT, KotlinParser.ACTUAL, KotlinParser.RealLiteral, KotlinParser.IntegerLiteral, KotlinParser.HexLiteral, KotlinParser.BinLiteral, KotlinParser.UnsignedLiteral, KotlinParser.LongLiteral, KotlinParser.BooleanLiteral, KotlinParser.NullLiteral, KotlinParser.CharacterLiteral, KotlinParser.Identifier, KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3106
                self.expression()
                pass
            elif token in [KotlinParser.IN, KotlinParser.NOT_IN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3107
                self.rangeTest()
                pass
            elif token in [KotlinParser.IS, KotlinParser.NOT_IS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3108
                self.typeTest()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeTestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inOperator(self):
            return self.getTypedRuleContext(KotlinParser.InOperatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_rangeTest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeTest" ):
                listener.enterRangeTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeTest" ):
                listener.exitRangeTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeTest" ):
                return visitor.visitRangeTest(self)
            else:
                return visitor.visitChildren(self)




    def rangeTest(self):

        localctx = KotlinParser.RangeTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_rangeTest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3111
            self.inOperator()
            self.state = 3115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 3112
                self.match(KotlinParser.NL)
                self.state = 3117
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3118
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isOperator(self):
            return self.getTypedRuleContext(KotlinParser.IsOperatorContext,0)


        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeTest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTest" ):
                listener.enterTypeTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTest" ):
                listener.exitTypeTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeTest" ):
                return visitor.visitTypeTest(self)
            else:
                return visitor.visitChildren(self)




    def typeTest(self):

        localctx = KotlinParser.TypeTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_typeTest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3120
            self.isOperator()
            self.state = 3124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 3121
                self.match(KotlinParser.NL)
                self.state = 3126
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3127
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(KotlinParser.TRY, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def finallyBlock(self):
            return self.getTypedRuleContext(KotlinParser.FinallyBlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def catchBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.CatchBlockContext)
            else:
                return self.getTypedRuleContext(KotlinParser.CatchBlockContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_tryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExpression" ):
                listener.enterTryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExpression" ):
                listener.exitTryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryExpression" ):
                return visitor.visitTryExpression(self)
            else:
                return visitor.visitChildren(self)




    def tryExpression(self):

        localctx = KotlinParser.TryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_tryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3129
            self.match(KotlinParser.TRY)
            self.state = 3133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 3130
                self.match(KotlinParser.NL)
                self.state = 3135
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3136
            self.block()
            self.state = 3164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
            if la_ == 1:
                self.state = 3144 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3140
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 3137
                            self.match(KotlinParser.NL)
                            self.state = 3142
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 3143
                        self.catchBlock()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3146 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,483,self._ctx)

                self.state = 3155
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,485,self._ctx)
                if la_ == 1:
                    self.state = 3151
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 3148
                        self.match(KotlinParser.NL)
                        self.state = 3153
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3154
                    self.finallyBlock()


                pass

            elif la_ == 2:
                self.state = 3160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 3157
                    self.match(KotlinParser.NL)
                    self.state = 3162
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3163
                self.finallyBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(KotlinParser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def COMMA(self):
            return self.getToken(KotlinParser.COMMA, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_catchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchBlock" ):
                listener.enterCatchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchBlock" ):
                listener.exitCatchBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchBlock" ):
                return visitor.visitCatchBlock(self)
            else:
                return visitor.visitChildren(self)




    def catchBlock(self):

        localctx = KotlinParser.CatchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_catchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3166
            self.match(KotlinParser.CATCH)
            self.state = 3170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 3167
                self.match(KotlinParser.NL)
                self.state = 3172
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3173
            self.match(KotlinParser.LPAREN)
            self.state = 3177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS:
                self.state = 3174
                self.annotation()
                self.state = 3179
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3180
            self.simpleIdentifier()
            self.state = 3181
            self.match(KotlinParser.COLON)
            self.state = 3182
            self.type_()
            self.state = 3190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.NL or _la==KotlinParser.COMMA:
                self.state = 3186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 3183
                    self.match(KotlinParser.NL)
                    self.state = 3188
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3189
                self.match(KotlinParser.COMMA)


            self.state = 3192
            self.match(KotlinParser.RPAREN)
            self.state = 3196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 3193
                self.match(KotlinParser.NL)
                self.state = 3198
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3199
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(KotlinParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinallyBlock" ):
                return visitor.visitFinallyBlock(self)
            else:
                return visitor.visitChildren(self)




    def finallyBlock(self):

        localctx = KotlinParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_finallyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3201
            self.match(KotlinParser.FINALLY)
            self.state = 3205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 3202
                self.match(KotlinParser.NL)
                self.state = 3207
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3208
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(KotlinParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def RETURN(self):
            return self.getToken(KotlinParser.RETURN, 0)

        def RETURN_AT(self):
            return self.getToken(KotlinParser.RETURN_AT, 0)

        def CONTINUE(self):
            return self.getToken(KotlinParser.CONTINUE, 0)

        def CONTINUE_AT(self):
            return self.getToken(KotlinParser.CONTINUE_AT, 0)

        def BREAK(self):
            return self.getToken(KotlinParser.BREAK, 0)

        def BREAK_AT(self):
            return self.getToken(KotlinParser.BREAK_AT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_jumpExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpExpression" ):
                listener.enterJumpExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpExpression" ):
                listener.exitJumpExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpExpression" ):
                return visitor.visitJumpExpression(self)
            else:
                return visitor.visitChildren(self)




    def jumpExpression(self):

        localctx = KotlinParser.JumpExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_jumpExpression)
        self._la = 0 # Token type
        try:
            self.state = 3226
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.THROW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3210
                self.match(KotlinParser.THROW)
                self.state = 3214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 3211
                    self.match(KotlinParser.NL)
                    self.state = 3216
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3217
                self.expression()
                pass
            elif token in [KotlinParser.RETURN_AT, KotlinParser.RETURN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3218
                _la = self._input.LA(1)
                if not(_la==KotlinParser.RETURN_AT or _la==KotlinParser.RETURN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3220
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
                if la_ == 1:
                    self.state = 3219
                    self.expression()


                pass
            elif token in [KotlinParser.CONTINUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3222
                self.match(KotlinParser.CONTINUE)
                pass
            elif token in [KotlinParser.CONTINUE_AT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3223
                self.match(KotlinParser.CONTINUE_AT)
                pass
            elif token in [KotlinParser.BREAK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3224
                self.match(KotlinParser.BREAK)
                pass
            elif token in [KotlinParser.BREAK_AT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3225
                self.match(KotlinParser.BREAK_AT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallableReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLONCOLON(self):
            return self.getToken(KotlinParser.COLONCOLON, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def CLASS(self):
            return self.getToken(KotlinParser.CLASS, 0)

        def receiverType(self):
            return self.getTypedRuleContext(KotlinParser.ReceiverTypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_callableReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallableReference" ):
                listener.enterCallableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallableReference" ):
                listener.exitCallableReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallableReference" ):
                return visitor.visitCallableReference(self)
            else:
                return visitor.visitChildren(self)




    def callableReference(self):

        localctx = KotlinParser.CallableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_callableReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.LPAREN) | (1 << KotlinParser.AT_NO_WS) | (1 << KotlinParser.AT_PRE_WS) | (1 << KotlinParser.FILE) | (1 << KotlinParser.FIELD) | (1 << KotlinParser.PROPERTY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (KotlinParser.GET - 64)) | (1 << (KotlinParser.SET - 64)) | (1 << (KotlinParser.RECEIVER - 64)) | (1 << (KotlinParser.PARAM - 64)) | (1 << (KotlinParser.SETPARAM - 64)) | (1 << (KotlinParser.DELEGATE - 64)) | (1 << (KotlinParser.IMPORT - 64)) | (1 << (KotlinParser.CONSTRUCTOR - 64)) | (1 << (KotlinParser.BY - 64)) | (1 << (KotlinParser.COMPANION - 64)) | (1 << (KotlinParser.INIT - 64)) | (1 << (KotlinParser.WHERE - 64)) | (1 << (KotlinParser.CATCH - 64)) | (1 << (KotlinParser.FINALLY - 64)) | (1 << (KotlinParser.OUT - 64)) | (1 << (KotlinParser.DYNAMIC - 64)) | (1 << (KotlinParser.PUBLIC - 64)) | (1 << (KotlinParser.PRIVATE - 64)) | (1 << (KotlinParser.PROTECTED - 64)) | (1 << (KotlinParser.INTERNAL - 64)) | (1 << (KotlinParser.ENUM - 64)) | (1 << (KotlinParser.SEALED - 64)) | (1 << (KotlinParser.ANNOTATION - 64)) | (1 << (KotlinParser.DATA - 64)) | (1 << (KotlinParser.INNER - 64)) | (1 << (KotlinParser.VALUE - 64)) | (1 << (KotlinParser.TAILREC - 64)) | (1 << (KotlinParser.OPERATOR - 64)) | (1 << (KotlinParser.INLINE - 64)) | (1 << (KotlinParser.INFIX - 64)) | (1 << (KotlinParser.EXTERNAL - 64)) | (1 << (KotlinParser.SUSPEND - 64)) | (1 << (KotlinParser.OVERRIDE - 64)) | (1 << (KotlinParser.ABSTRACT - 64)) | (1 << (KotlinParser.FINAL - 64)) | (1 << (KotlinParser.OPEN - 64)) | (1 << (KotlinParser.CONST - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (KotlinParser.LATEINIT - 128)) | (1 << (KotlinParser.VARARG - 128)) | (1 << (KotlinParser.NOINLINE - 128)) | (1 << (KotlinParser.CROSSINLINE - 128)) | (1 << (KotlinParser.REIFIED - 128)) | (1 << (KotlinParser.EXPECT - 128)) | (1 << (KotlinParser.ACTUAL - 128)) | (1 << (KotlinParser.Identifier - 128)))) != 0):
                self.state = 3228
                self.receiverType()


            self.state = 3231
            self.match(KotlinParser.COLONCOLON)
            self.state = 3235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 3232
                self.match(KotlinParser.NL)
                self.state = 3237
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.VALUE, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.EXPECT, KotlinParser.ACTUAL, KotlinParser.Identifier]:
                self.state = 3238
                self.simpleIdentifier()
                pass
            elif token in [KotlinParser.CLASS]:
                self.state = 3239
                self.match(KotlinParser.CLASS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentAndOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGNMENT(self):
            return self.getToken(KotlinParser.ADD_ASSIGNMENT, 0)

        def SUB_ASSIGNMENT(self):
            return self.getToken(KotlinParser.SUB_ASSIGNMENT, 0)

        def MULT_ASSIGNMENT(self):
            return self.getToken(KotlinParser.MULT_ASSIGNMENT, 0)

        def DIV_ASSIGNMENT(self):
            return self.getToken(KotlinParser.DIV_ASSIGNMENT, 0)

        def MOD_ASSIGNMENT(self):
            return self.getToken(KotlinParser.MOD_ASSIGNMENT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_assignmentAndOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentAndOperator" ):
                listener.enterAssignmentAndOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentAndOperator" ):
                listener.exitAssignmentAndOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentAndOperator" ):
                return visitor.visitAssignmentAndOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentAndOperator(self):

        localctx = KotlinParser.AssignmentAndOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_assignmentAndOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3242
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.ADD_ASSIGNMENT) | (1 << KotlinParser.SUB_ASSIGNMENT) | (1 << KotlinParser.MULT_ASSIGNMENT) | (1 << KotlinParser.DIV_ASSIGNMENT) | (1 << KotlinParser.MOD_ASSIGNMENT))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL_EQ(self):
            return self.getToken(KotlinParser.EXCL_EQ, 0)

        def EXCL_EQEQ(self):
            return self.getToken(KotlinParser.EXCL_EQEQ, 0)

        def EQEQ(self):
            return self.getToken(KotlinParser.EQEQ, 0)

        def EQEQEQ(self):
            return self.getToken(KotlinParser.EQEQEQ, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_equalityOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityOperator" ):
                listener.enterEqualityOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityOperator" ):
                listener.exitEqualityOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityOperator" ):
                return visitor.visitEqualityOperator(self)
            else:
                return visitor.visitChildren(self)




    def equalityOperator(self):

        localctx = KotlinParser.EqualityOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_equalityOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3244
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.EXCL_EQ) | (1 << KotlinParser.EXCL_EQEQ) | (1 << KotlinParser.EQEQ) | (1 << KotlinParser.EQEQEQ))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def LE(self):
            return self.getToken(KotlinParser.LE, 0)

        def GE(self):
            return self.getToken(KotlinParser.GE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = KotlinParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3246
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.LANGLE) | (1 << KotlinParser.RANGLE) | (1 << KotlinParser.LE) | (1 << KotlinParser.GE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(KotlinParser.IN, 0)

        def NOT_IN(self):
            return self.getToken(KotlinParser.NOT_IN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_inOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInOperator" ):
                listener.enterInOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInOperator" ):
                listener.exitInOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInOperator" ):
                return visitor.visitInOperator(self)
            else:
                return visitor.visitChildren(self)




    def inOperator(self):

        localctx = KotlinParser.InOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_inOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3248
            _la = self._input.LA(1)
            if not(_la==KotlinParser.IN or _la==KotlinParser.NOT_IN):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(KotlinParser.IS, 0)

        def NOT_IS(self):
            return self.getToken(KotlinParser.NOT_IS, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_isOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsOperator" ):
                listener.enterIsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsOperator" ):
                listener.exitIsOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsOperator" ):
                return visitor.visitIsOperator(self)
            else:
                return visitor.visitChildren(self)




    def isOperator(self):

        localctx = KotlinParser.IsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_isOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3250
            _la = self._input.LA(1)
            if not(_la==KotlinParser.IS or _la==KotlinParser.NOT_IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(KotlinParser.ADD, 0)

        def SUB(self):
            return self.getToken(KotlinParser.SUB, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_additiveOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveOperator" ):
                listener.enterAdditiveOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveOperator" ):
                listener.exitAdditiveOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveOperator" ):
                return visitor.visitAdditiveOperator(self)
            else:
                return visitor.visitChildren(self)




    def additiveOperator(self):

        localctx = KotlinParser.AdditiveOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_additiveOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3252
            _la = self._input.LA(1)
            if not(_la==KotlinParser.ADD or _la==KotlinParser.SUB):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def DIV(self):
            return self.getToken(KotlinParser.DIV, 0)

        def MOD(self):
            return self.getToken(KotlinParser.MOD, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiplicativeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeOperator" ):
                listener.enterMultiplicativeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeOperator" ):
                listener.exitMultiplicativeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeOperator" ):
                return visitor.visitMultiplicativeOperator(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeOperator(self):

        localctx = KotlinParser.MultiplicativeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_multiplicativeOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3254
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.MULT) | (1 << KotlinParser.MOD) | (1 << KotlinParser.DIV))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(KotlinParser.AS, 0)

        def AS_SAFE(self):
            return self.getToken(KotlinParser.AS_SAFE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_asOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsOperator" ):
                listener.enterAsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsOperator" ):
                listener.exitAsOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsOperator" ):
                return visitor.visitAsOperator(self)
            else:
                return visitor.visitChildren(self)




    def asOperator(self):

        localctx = KotlinParser.AsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_asOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3256
            _la = self._input.LA(1)
            if not(_la==KotlinParser.AS_SAFE or _la==KotlinParser.AS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixUnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(KotlinParser.INCR, 0)

        def DECR(self):
            return self.getToken(KotlinParser.DECR, 0)

        def SUB(self):
            return self.getToken(KotlinParser.SUB, 0)

        def ADD(self):
            return self.getToken(KotlinParser.ADD, 0)

        def excl(self):
            return self.getTypedRuleContext(KotlinParser.ExclContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_prefixUnaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixUnaryOperator" ):
                listener.enterPrefixUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixUnaryOperator" ):
                listener.exitPrefixUnaryOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixUnaryOperator" ):
                return visitor.visitPrefixUnaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def prefixUnaryOperator(self):

        localctx = KotlinParser.PrefixUnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_prefixUnaryOperator)
        try:
            self.state = 3263
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.INCR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3258
                self.match(KotlinParser.INCR)
                pass
            elif token in [KotlinParser.DECR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3259
                self.match(KotlinParser.DECR)
                pass
            elif token in [KotlinParser.SUB]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3260
                self.match(KotlinParser.SUB)
                pass
            elif token in [KotlinParser.ADD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3261
                self.match(KotlinParser.ADD)
                pass
            elif token in [KotlinParser.EXCL_WS, KotlinParser.EXCL_NO_WS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3262
                self.excl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixUnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(KotlinParser.INCR, 0)

        def DECR(self):
            return self.getToken(KotlinParser.DECR, 0)

        def EXCL_NO_WS(self):
            return self.getToken(KotlinParser.EXCL_NO_WS, 0)

        def excl(self):
            return self.getTypedRuleContext(KotlinParser.ExclContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_postfixUnaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixUnaryOperator" ):
                listener.enterPostfixUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixUnaryOperator" ):
                listener.exitPostfixUnaryOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixUnaryOperator" ):
                return visitor.visitPostfixUnaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def postfixUnaryOperator(self):

        localctx = KotlinParser.PostfixUnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_postfixUnaryOperator)
        try:
            self.state = 3269
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.INCR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3265
                self.match(KotlinParser.INCR)
                pass
            elif token in [KotlinParser.DECR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3266
                self.match(KotlinParser.DECR)
                pass
            elif token in [KotlinParser.EXCL_NO_WS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3267
                self.match(KotlinParser.EXCL_NO_WS)
                self.state = 3268
                self.excl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL_NO_WS(self):
            return self.getToken(KotlinParser.EXCL_NO_WS, 0)

        def EXCL_WS(self):
            return self.getToken(KotlinParser.EXCL_WS, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_excl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcl" ):
                listener.enterExcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcl" ):
                listener.exitExcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcl" ):
                return visitor.visitExcl(self)
            else:
                return visitor.visitChildren(self)




    def excl(self):

        localctx = KotlinParser.ExclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_excl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3271
            _la = self._input.LA(1)
            if not(_la==KotlinParser.EXCL_WS or _la==KotlinParser.EXCL_NO_WS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberAccessOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def safeNav(self):
            return self.getTypedRuleContext(KotlinParser.SafeNavContext,0)


        def COLONCOLON(self):
            return self.getToken(KotlinParser.COLONCOLON, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_memberAccessOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessOperator" ):
                listener.enterMemberAccessOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessOperator" ):
                listener.exitMemberAccessOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccessOperator" ):
                return visitor.visitMemberAccessOperator(self)
            else:
                return visitor.visitChildren(self)




    def memberAccessOperator(self):

        localctx = KotlinParser.MemberAccessOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_memberAccessOperator)
        self._la = 0 # Token type
        try:
            self.state = 3288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,504,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 3273
                    self.match(KotlinParser.NL)
                    self.state = 3278
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3279
                self.match(KotlinParser.DOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 3280
                    self.match(KotlinParser.NL)
                    self.state = 3285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3286
                self.safeNav()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3287
                self.match(KotlinParser.COLONCOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SafeNavContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUEST_NO_WS(self):
            return self.getToken(KotlinParser.QUEST_NO_WS, 0)

        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_safeNav

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSafeNav" ):
                listener.enterSafeNav(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSafeNav" ):
                listener.exitSafeNav(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSafeNav" ):
                return visitor.visitSafeNav(self)
            else:
                return visitor.visitChildren(self)




    def safeNav(self):

        localctx = KotlinParser.SafeNavContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_safeNav)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3290
            self.match(KotlinParser.QUEST_NO_WS)
            self.state = 3291
            self.match(KotlinParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ModifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ModifierContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifiers" ):
                listener.enterModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifiers" ):
                listener.exitModifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifiers" ):
                return visitor.visitModifiers(self)
            else:
                return visitor.visitChildren(self)




    def modifiers(self):

        localctx = KotlinParser.ModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3295 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3295
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [KotlinParser.AT_NO_WS, KotlinParser.AT_PRE_WS]:
                        self.state = 3293
                        self.annotation()
                        pass
                    elif token in [KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.VALUE, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.EXPECT, KotlinParser.ACTUAL]:
                        self.state = 3294
                        self.modifier()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 3297 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,506,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterModifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationContext,i)


        def parameterModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ParameterModifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ParameterModifierContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_parameterModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterModifiers" ):
                listener.enterParameterModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterModifiers" ):
                listener.exitParameterModifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterModifiers" ):
                return visitor.visitParameterModifiers(self)
            else:
                return visitor.visitChildren(self)




    def parameterModifiers(self):

        localctx = KotlinParser.ParameterModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_parameterModifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3301 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3301
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [KotlinParser.AT_NO_WS, KotlinParser.AT_PRE_WS]:
                        self.state = 3299
                        self.annotation()
                        pass
                    elif token in [KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE]:
                        self.state = 3300
                        self.parameterModifier()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 3303 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,508,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModifier(self):
            return self.getTypedRuleContext(KotlinParser.ClassModifierContext,0)


        def memberModifier(self):
            return self.getTypedRuleContext(KotlinParser.MemberModifierContext,0)


        def visibilityModifier(self):
            return self.getTypedRuleContext(KotlinParser.VisibilityModifierContext,0)


        def functionModifier(self):
            return self.getTypedRuleContext(KotlinParser.FunctionModifierContext,0)


        def propertyModifier(self):
            return self.getTypedRuleContext(KotlinParser.PropertyModifierContext,0)


        def inheritanceModifier(self):
            return self.getTypedRuleContext(KotlinParser.InheritanceModifierContext,0)


        def parameterModifier(self):
            return self.getTypedRuleContext(KotlinParser.ParameterModifierContext,0)


        def platformModifier(self):
            return self.getTypedRuleContext(KotlinParser.PlatformModifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier" ):
                return visitor.visitModifier(self)
            else:
                return visitor.visitChildren(self)




    def modifier(self):

        localctx = KotlinParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_modifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.VALUE]:
                self.state = 3305
                self.classModifier()
                pass
            elif token in [KotlinParser.OVERRIDE, KotlinParser.LATEINIT]:
                self.state = 3306
                self.memberModifier()
                pass
            elif token in [KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL]:
                self.state = 3307
                self.visibilityModifier()
                pass
            elif token in [KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND]:
                self.state = 3308
                self.functionModifier()
                pass
            elif token in [KotlinParser.CONST]:
                self.state = 3309
                self.propertyModifier()
                pass
            elif token in [KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN]:
                self.state = 3310
                self.inheritanceModifier()
                pass
            elif token in [KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE]:
                self.state = 3311
                self.parameterModifier()
                pass
            elif token in [KotlinParser.EXPECT, KotlinParser.ACTUAL]:
                self.state = 3312
                self.platformModifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3318
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,510,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3315
                    self.match(KotlinParser.NL) 
                self.state = 3320
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,510,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeModifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeModifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeModifierContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeModifiers" ):
                listener.enterTypeModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeModifiers" ):
                listener.exitTypeModifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeModifiers" ):
                return visitor.visitTypeModifiers(self)
            else:
                return visitor.visitChildren(self)




    def typeModifiers(self):

        localctx = KotlinParser.TypeModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_typeModifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3322 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3321
                    self.typeModifier()

                else:
                    raise NoViableAltException(self)
                self.state = 3324 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,511,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationContext,0)


        def SUSPEND(self):
            return self.getToken(KotlinParser.SUSPEND, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeModifier" ):
                listener.enterTypeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeModifier" ):
                listener.exitTypeModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeModifier" ):
                return visitor.visitTypeModifier(self)
            else:
                return visitor.visitChildren(self)




    def typeModifier(self):

        localctx = KotlinParser.TypeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_typeModifier)
        self._la = 0 # Token type
        try:
            self.state = 3334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.AT_NO_WS, KotlinParser.AT_PRE_WS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3326
                self.annotation()
                pass
            elif token in [KotlinParser.SUSPEND]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3327
                self.match(KotlinParser.SUSPEND)
                self.state = 3331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 3328
                    self.match(KotlinParser.NL)
                    self.state = 3333
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(KotlinParser.ENUM, 0)

        def SEALED(self):
            return self.getToken(KotlinParser.SEALED, 0)

        def ANNOTATION(self):
            return self.getToken(KotlinParser.ANNOTATION, 0)

        def DATA(self):
            return self.getToken(KotlinParser.DATA, 0)

        def INNER(self):
            return self.getToken(KotlinParser.INNER, 0)

        def VALUE(self):
            return self.getToken(KotlinParser.VALUE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_classModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModifier" ):
                listener.enterClassModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModifier" ):
                listener.exitClassModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModifier" ):
                return visitor.visitClassModifier(self)
            else:
                return visitor.visitChildren(self)




    def classModifier(self):

        localctx = KotlinParser.ClassModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_classModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3336
            _la = self._input.LA(1)
            if not(((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (KotlinParser.ENUM - 111)) | (1 << (KotlinParser.SEALED - 111)) | (1 << (KotlinParser.ANNOTATION - 111)) | (1 << (KotlinParser.DATA - 111)) | (1 << (KotlinParser.INNER - 111)) | (1 << (KotlinParser.VALUE - 111)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVERRIDE(self):
            return self.getToken(KotlinParser.OVERRIDE, 0)

        def LATEINIT(self):
            return self.getToken(KotlinParser.LATEINIT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_memberModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberModifier" ):
                listener.enterMemberModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberModifier" ):
                listener.exitMemberModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberModifier" ):
                return visitor.visitMemberModifier(self)
            else:
                return visitor.visitChildren(self)




    def memberModifier(self):

        localctx = KotlinParser.MemberModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_memberModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3338
            _la = self._input.LA(1)
            if not(_la==KotlinParser.OVERRIDE or _la==KotlinParser.LATEINIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(KotlinParser.PUBLIC, 0)

        def PRIVATE(self):
            return self.getToken(KotlinParser.PRIVATE, 0)

        def INTERNAL(self):
            return self.getToken(KotlinParser.INTERNAL, 0)

        def PROTECTED(self):
            return self.getToken(KotlinParser.PROTECTED, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_visibilityModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibilityModifier" ):
                listener.enterVisibilityModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibilityModifier" ):
                listener.exitVisibilityModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibilityModifier" ):
                return visitor.visitVisibilityModifier(self)
            else:
                return visitor.visitChildren(self)




    def visibilityModifier(self):

        localctx = KotlinParser.VisibilityModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_visibilityModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3340
            _la = self._input.LA(1)
            if not(((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (KotlinParser.PUBLIC - 107)) | (1 << (KotlinParser.PRIVATE - 107)) | (1 << (KotlinParser.PROTECTED - 107)) | (1 << (KotlinParser.INTERNAL - 107)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarianceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(KotlinParser.IN, 0)

        def OUT(self):
            return self.getToken(KotlinParser.OUT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_varianceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarianceModifier" ):
                listener.enterVarianceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarianceModifier" ):
                listener.exitVarianceModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarianceModifier" ):
                return visitor.visitVarianceModifier(self)
            else:
                return visitor.visitChildren(self)




    def varianceModifier(self):

        localctx = KotlinParser.VarianceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_varianceModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3342
            _la = self._input.LA(1)
            if not(_la==KotlinParser.IN or _la==KotlinParser.OUT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterModifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameterModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeParameterModifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeParameterModifierContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameterModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterModifiers" ):
                listener.enterTypeParameterModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterModifiers" ):
                listener.exitTypeParameterModifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameterModifiers" ):
                return visitor.visitTypeParameterModifiers(self)
            else:
                return visitor.visitChildren(self)




    def typeParameterModifiers(self):

        localctx = KotlinParser.TypeParameterModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_typeParameterModifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3345 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3344
                    self.typeParameterModifier()

                else:
                    raise NoViableAltException(self)
                self.state = 3347 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,514,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reificationModifier(self):
            return self.getTypedRuleContext(KotlinParser.ReificationModifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def varianceModifier(self):
            return self.getTypedRuleContext(KotlinParser.VarianceModifierContext,0)


        def annotation(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameterModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterModifier" ):
                listener.enterTypeParameterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterModifier" ):
                listener.exitTypeParameterModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameterModifier" ):
                return visitor.visitTypeParameterModifier(self)
            else:
                return visitor.visitChildren(self)




    def typeParameterModifier(self):

        localctx = KotlinParser.TypeParameterModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_typeParameterModifier)
        try:
            self.state = 3364
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.REIFIED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3349
                self.reificationModifier()
                self.state = 3353
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,515,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3350
                        self.match(KotlinParser.NL) 
                    self.state = 3355
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,515,self._ctx)

                pass
            elif token in [KotlinParser.IN, KotlinParser.OUT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3356
                self.varianceModifier()
                self.state = 3360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,516,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3357
                        self.match(KotlinParser.NL) 
                    self.state = 3362
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,516,self._ctx)

                pass
            elif token in [KotlinParser.AT_NO_WS, KotlinParser.AT_PRE_WS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3363
                self.annotation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAILREC(self):
            return self.getToken(KotlinParser.TAILREC, 0)

        def OPERATOR(self):
            return self.getToken(KotlinParser.OPERATOR, 0)

        def INFIX(self):
            return self.getToken(KotlinParser.INFIX, 0)

        def INLINE(self):
            return self.getToken(KotlinParser.INLINE, 0)

        def EXTERNAL(self):
            return self.getToken(KotlinParser.EXTERNAL, 0)

        def SUSPEND(self):
            return self.getToken(KotlinParser.SUSPEND, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionModifier" ):
                listener.enterFunctionModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionModifier" ):
                listener.exitFunctionModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionModifier" ):
                return visitor.visitFunctionModifier(self)
            else:
                return visitor.visitChildren(self)




    def functionModifier(self):

        localctx = KotlinParser.FunctionModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_functionModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3366
            _la = self._input.LA(1)
            if not(((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (KotlinParser.TAILREC - 117)) | (1 << (KotlinParser.OPERATOR - 117)) | (1 << (KotlinParser.INLINE - 117)) | (1 << (KotlinParser.INFIX - 117)) | (1 << (KotlinParser.EXTERNAL - 117)) | (1 << (KotlinParser.SUSPEND - 117)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(KotlinParser.CONST, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_propertyModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyModifier" ):
                listener.enterPropertyModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyModifier" ):
                listener.exitPropertyModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyModifier" ):
                return visitor.visitPropertyModifier(self)
            else:
                return visitor.visitChildren(self)




    def propertyModifier(self):

        localctx = KotlinParser.PropertyModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_propertyModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3368
            self.match(KotlinParser.CONST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(KotlinParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(KotlinParser.FINAL, 0)

        def OPEN(self):
            return self.getToken(KotlinParser.OPEN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_inheritanceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceModifier" ):
                listener.enterInheritanceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceModifier" ):
                listener.exitInheritanceModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInheritanceModifier" ):
                return visitor.visitInheritanceModifier(self)
            else:
                return visitor.visitChildren(self)




    def inheritanceModifier(self):

        localctx = KotlinParser.InheritanceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_inheritanceModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3370
            _la = self._input.LA(1)
            if not(((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (KotlinParser.ABSTRACT - 124)) | (1 << (KotlinParser.FINAL - 124)) | (1 << (KotlinParser.OPEN - 124)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARARG(self):
            return self.getToken(KotlinParser.VARARG, 0)

        def NOINLINE(self):
            return self.getToken(KotlinParser.NOINLINE, 0)

        def CROSSINLINE(self):
            return self.getToken(KotlinParser.CROSSINLINE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_parameterModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterModifier" ):
                listener.enterParameterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterModifier" ):
                listener.exitParameterModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterModifier" ):
                return visitor.visitParameterModifier(self)
            else:
                return visitor.visitChildren(self)




    def parameterModifier(self):

        localctx = KotlinParser.ParameterModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_parameterModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3372
            _la = self._input.LA(1)
            if not(((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (KotlinParser.VARARG - 129)) | (1 << (KotlinParser.NOINLINE - 129)) | (1 << (KotlinParser.CROSSINLINE - 129)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReificationModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REIFIED(self):
            return self.getToken(KotlinParser.REIFIED, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_reificationModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReificationModifier" ):
                listener.enterReificationModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReificationModifier" ):
                listener.exitReificationModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReificationModifier" ):
                return visitor.visitReificationModifier(self)
            else:
                return visitor.visitChildren(self)




    def reificationModifier(self):

        localctx = KotlinParser.ReificationModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_reificationModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3374
            self.match(KotlinParser.REIFIED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlatformModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPECT(self):
            return self.getToken(KotlinParser.EXPECT, 0)

        def ACTUAL(self):
            return self.getToken(KotlinParser.ACTUAL, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_platformModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlatformModifier" ):
                listener.enterPlatformModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlatformModifier" ):
                listener.exitPlatformModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlatformModifier" ):
                return visitor.visitPlatformModifier(self)
            else:
                return visitor.visitChildren(self)




    def platformModifier(self):

        localctx = KotlinParser.PlatformModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_platformModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3376
            _la = self._input.LA(1)
            if not(_la==KotlinParser.EXPECT or _la==KotlinParser.ACTUAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleAnnotation(self):
            return self.getTypedRuleContext(KotlinParser.SingleAnnotationContext,0)


        def multiAnnotation(self):
            return self.getTypedRuleContext(KotlinParser.MultiAnnotationContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation" ):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def annotation(self):

        localctx = KotlinParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,518,self._ctx)
            if la_ == 1:
                self.state = 3378
                self.singleAnnotation()
                pass

            elif la_ == 2:
                self.state = 3379
                self.multiAnnotation()
                pass


            self.state = 3385
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,519,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3382
                    self.match(KotlinParser.NL) 
                self.state = 3387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,519,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unescapedAnnotation(self):
            return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,0)


        def annotationUseSiteTarget(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationUseSiteTargetContext,0)


        def AT_NO_WS(self):
            return self.getToken(KotlinParser.AT_NO_WS, 0)

        def AT_PRE_WS(self):
            return self.getToken(KotlinParser.AT_PRE_WS, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_singleAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleAnnotation" ):
                listener.enterSingleAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleAnnotation" ):
                listener.exitSingleAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleAnnotation" ):
                return visitor.visitSingleAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def singleAnnotation(self):

        localctx = KotlinParser.SingleAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_singleAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
            if la_ == 1:
                self.state = 3388
                self.annotationUseSiteTarget()
                self.state = 3392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 3389
                    self.match(KotlinParser.NL)
                    self.state = 3394
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 3395
                self.match(KotlinParser.AT_NO_WS)
                pass

            elif la_ == 3:
                self.state = 3396
                self.match(KotlinParser.AT_PRE_WS)
                pass


            self.state = 3399
            self.unescapedAnnotation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def annotationUseSiteTarget(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationUseSiteTargetContext,0)


        def AT_NO_WS(self):
            return self.getToken(KotlinParser.AT_NO_WS, 0)

        def AT_PRE_WS(self):
            return self.getToken(KotlinParser.AT_PRE_WS, 0)

        def unescapedAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UnescapedAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiAnnotation" ):
                listener.enterMultiAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiAnnotation" ):
                listener.exitMultiAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiAnnotation" ):
                return visitor.visitMultiAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def multiAnnotation(self):

        localctx = KotlinParser.MultiAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_multiAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,523,self._ctx)
            if la_ == 1:
                self.state = 3401
                self.annotationUseSiteTarget()
                self.state = 3405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 3402
                    self.match(KotlinParser.NL)
                    self.state = 3407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 3408
                self.match(KotlinParser.AT_NO_WS)
                pass

            elif la_ == 3:
                self.state = 3409
                self.match(KotlinParser.AT_PRE_WS)
                pass


            self.state = 3412
            self.match(KotlinParser.LSQUARE)
            self.state = 3414 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3413
                self.unescapedAnnotation()
                self.state = 3416 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (KotlinParser.FILE - 61)) | (1 << (KotlinParser.FIELD - 61)) | (1 << (KotlinParser.PROPERTY - 61)) | (1 << (KotlinParser.GET - 61)) | (1 << (KotlinParser.SET - 61)) | (1 << (KotlinParser.RECEIVER - 61)) | (1 << (KotlinParser.PARAM - 61)) | (1 << (KotlinParser.SETPARAM - 61)) | (1 << (KotlinParser.DELEGATE - 61)) | (1 << (KotlinParser.IMPORT - 61)) | (1 << (KotlinParser.CONSTRUCTOR - 61)) | (1 << (KotlinParser.BY - 61)) | (1 << (KotlinParser.COMPANION - 61)) | (1 << (KotlinParser.INIT - 61)) | (1 << (KotlinParser.WHERE - 61)) | (1 << (KotlinParser.CATCH - 61)) | (1 << (KotlinParser.FINALLY - 61)) | (1 << (KotlinParser.OUT - 61)) | (1 << (KotlinParser.DYNAMIC - 61)) | (1 << (KotlinParser.PUBLIC - 61)) | (1 << (KotlinParser.PRIVATE - 61)) | (1 << (KotlinParser.PROTECTED - 61)) | (1 << (KotlinParser.INTERNAL - 61)) | (1 << (KotlinParser.ENUM - 61)) | (1 << (KotlinParser.SEALED - 61)) | (1 << (KotlinParser.ANNOTATION - 61)) | (1 << (KotlinParser.DATA - 61)) | (1 << (KotlinParser.INNER - 61)) | (1 << (KotlinParser.VALUE - 61)) | (1 << (KotlinParser.TAILREC - 61)) | (1 << (KotlinParser.OPERATOR - 61)) | (1 << (KotlinParser.INLINE - 61)) | (1 << (KotlinParser.INFIX - 61)) | (1 << (KotlinParser.EXTERNAL - 61)) | (1 << (KotlinParser.SUSPEND - 61)) | (1 << (KotlinParser.OVERRIDE - 61)) | (1 << (KotlinParser.ABSTRACT - 61)))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (KotlinParser.FINAL - 125)) | (1 << (KotlinParser.OPEN - 125)) | (1 << (KotlinParser.CONST - 125)) | (1 << (KotlinParser.LATEINIT - 125)) | (1 << (KotlinParser.VARARG - 125)) | (1 << (KotlinParser.NOINLINE - 125)) | (1 << (KotlinParser.CROSSINLINE - 125)) | (1 << (KotlinParser.REIFIED - 125)) | (1 << (KotlinParser.EXPECT - 125)) | (1 << (KotlinParser.ACTUAL - 125)) | (1 << (KotlinParser.Identifier - 125)))) != 0)):
                    break

            self.state = 3418
            self.match(KotlinParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationUseSiteTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def AT_NO_WS(self):
            return self.getToken(KotlinParser.AT_NO_WS, 0)

        def AT_PRE_WS(self):
            return self.getToken(KotlinParser.AT_PRE_WS, 0)

        def FIELD(self):
            return self.getToken(KotlinParser.FIELD, 0)

        def PROPERTY(self):
            return self.getToken(KotlinParser.PROPERTY, 0)

        def GET(self):
            return self.getToken(KotlinParser.GET, 0)

        def SET(self):
            return self.getToken(KotlinParser.SET, 0)

        def RECEIVER(self):
            return self.getToken(KotlinParser.RECEIVER, 0)

        def PARAM(self):
            return self.getToken(KotlinParser.PARAM, 0)

        def SETPARAM(self):
            return self.getToken(KotlinParser.SETPARAM, 0)

        def DELEGATE(self):
            return self.getToken(KotlinParser.DELEGATE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotationUseSiteTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationUseSiteTarget" ):
                listener.enterAnnotationUseSiteTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationUseSiteTarget" ):
                listener.exitAnnotationUseSiteTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationUseSiteTarget" ):
                return visitor.visitAnnotationUseSiteTarget(self)
            else:
                return visitor.visitChildren(self)




    def annotationUseSiteTarget(self):

        localctx = KotlinParser.AnnotationUseSiteTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_annotationUseSiteTarget)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3420
            _la = self._input.LA(1)
            if not(_la==KotlinParser.AT_NO_WS or _la==KotlinParser.AT_PRE_WS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3421
            _la = self._input.LA(1)
            if not(((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (KotlinParser.FIELD - 62)) | (1 << (KotlinParser.PROPERTY - 62)) | (1 << (KotlinParser.GET - 62)) | (1 << (KotlinParser.SET - 62)) | (1 << (KotlinParser.RECEIVER - 62)) | (1 << (KotlinParser.PARAM - 62)) | (1 << (KotlinParser.SETPARAM - 62)) | (1 << (KotlinParser.DELEGATE - 62)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 3422
                self.match(KotlinParser.NL)
                self.state = 3427
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3428
            self.match(KotlinParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnescapedAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorInvocation(self):
            return self.getTypedRuleContext(KotlinParser.ConstructorInvocationContext,0)


        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_unescapedAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnescapedAnnotation" ):
                listener.enterUnescapedAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnescapedAnnotation" ):
                listener.exitUnescapedAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnescapedAnnotation" ):
                return visitor.visitUnescapedAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def unescapedAnnotation(self):

        localctx = KotlinParser.UnescapedAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_unescapedAnnotation)
        try:
            self.state = 3432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,526,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3430
                self.constructorInvocation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3431
                self.userType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(KotlinParser.Identifier, 0)

        def ABSTRACT(self):
            return self.getToken(KotlinParser.ABSTRACT, 0)

        def ANNOTATION(self):
            return self.getToken(KotlinParser.ANNOTATION, 0)

        def BY(self):
            return self.getToken(KotlinParser.BY, 0)

        def CATCH(self):
            return self.getToken(KotlinParser.CATCH, 0)

        def COMPANION(self):
            return self.getToken(KotlinParser.COMPANION, 0)

        def CONSTRUCTOR(self):
            return self.getToken(KotlinParser.CONSTRUCTOR, 0)

        def CROSSINLINE(self):
            return self.getToken(KotlinParser.CROSSINLINE, 0)

        def DATA(self):
            return self.getToken(KotlinParser.DATA, 0)

        def DYNAMIC(self):
            return self.getToken(KotlinParser.DYNAMIC, 0)

        def ENUM(self):
            return self.getToken(KotlinParser.ENUM, 0)

        def EXTERNAL(self):
            return self.getToken(KotlinParser.EXTERNAL, 0)

        def FINAL(self):
            return self.getToken(KotlinParser.FINAL, 0)

        def FINALLY(self):
            return self.getToken(KotlinParser.FINALLY, 0)

        def GET(self):
            return self.getToken(KotlinParser.GET, 0)

        def IMPORT(self):
            return self.getToken(KotlinParser.IMPORT, 0)

        def INFIX(self):
            return self.getToken(KotlinParser.INFIX, 0)

        def INIT(self):
            return self.getToken(KotlinParser.INIT, 0)

        def INLINE(self):
            return self.getToken(KotlinParser.INLINE, 0)

        def INNER(self):
            return self.getToken(KotlinParser.INNER, 0)

        def INTERNAL(self):
            return self.getToken(KotlinParser.INTERNAL, 0)

        def LATEINIT(self):
            return self.getToken(KotlinParser.LATEINIT, 0)

        def NOINLINE(self):
            return self.getToken(KotlinParser.NOINLINE, 0)

        def OPEN(self):
            return self.getToken(KotlinParser.OPEN, 0)

        def OPERATOR(self):
            return self.getToken(KotlinParser.OPERATOR, 0)

        def OUT(self):
            return self.getToken(KotlinParser.OUT, 0)

        def OVERRIDE(self):
            return self.getToken(KotlinParser.OVERRIDE, 0)

        def PRIVATE(self):
            return self.getToken(KotlinParser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(KotlinParser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(KotlinParser.PUBLIC, 0)

        def REIFIED(self):
            return self.getToken(KotlinParser.REIFIED, 0)

        def SEALED(self):
            return self.getToken(KotlinParser.SEALED, 0)

        def TAILREC(self):
            return self.getToken(KotlinParser.TAILREC, 0)

        def SET(self):
            return self.getToken(KotlinParser.SET, 0)

        def VARARG(self):
            return self.getToken(KotlinParser.VARARG, 0)

        def WHERE(self):
            return self.getToken(KotlinParser.WHERE, 0)

        def FIELD(self):
            return self.getToken(KotlinParser.FIELD, 0)

        def PROPERTY(self):
            return self.getToken(KotlinParser.PROPERTY, 0)

        def RECEIVER(self):
            return self.getToken(KotlinParser.RECEIVER, 0)

        def PARAM(self):
            return self.getToken(KotlinParser.PARAM, 0)

        def SETPARAM(self):
            return self.getToken(KotlinParser.SETPARAM, 0)

        def DELEGATE(self):
            return self.getToken(KotlinParser.DELEGATE, 0)

        def FILE(self):
            return self.getToken(KotlinParser.FILE, 0)

        def EXPECT(self):
            return self.getToken(KotlinParser.EXPECT, 0)

        def ACTUAL(self):
            return self.getToken(KotlinParser.ACTUAL, 0)

        def CONST(self):
            return self.getToken(KotlinParser.CONST, 0)

        def SUSPEND(self):
            return self.getToken(KotlinParser.SUSPEND, 0)

        def VALUE(self):
            return self.getToken(KotlinParser.VALUE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleIdentifier" ):
                return visitor.visitSimpleIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def simpleIdentifier(self):

        localctx = KotlinParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3434
            _la = self._input.LA(1)
            if not(((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (KotlinParser.FILE - 61)) | (1 << (KotlinParser.FIELD - 61)) | (1 << (KotlinParser.PROPERTY - 61)) | (1 << (KotlinParser.GET - 61)) | (1 << (KotlinParser.SET - 61)) | (1 << (KotlinParser.RECEIVER - 61)) | (1 << (KotlinParser.PARAM - 61)) | (1 << (KotlinParser.SETPARAM - 61)) | (1 << (KotlinParser.DELEGATE - 61)) | (1 << (KotlinParser.IMPORT - 61)) | (1 << (KotlinParser.CONSTRUCTOR - 61)) | (1 << (KotlinParser.BY - 61)) | (1 << (KotlinParser.COMPANION - 61)) | (1 << (KotlinParser.INIT - 61)) | (1 << (KotlinParser.WHERE - 61)) | (1 << (KotlinParser.CATCH - 61)) | (1 << (KotlinParser.FINALLY - 61)) | (1 << (KotlinParser.OUT - 61)) | (1 << (KotlinParser.DYNAMIC - 61)) | (1 << (KotlinParser.PUBLIC - 61)) | (1 << (KotlinParser.PRIVATE - 61)) | (1 << (KotlinParser.PROTECTED - 61)) | (1 << (KotlinParser.INTERNAL - 61)) | (1 << (KotlinParser.ENUM - 61)) | (1 << (KotlinParser.SEALED - 61)) | (1 << (KotlinParser.ANNOTATION - 61)) | (1 << (KotlinParser.DATA - 61)) | (1 << (KotlinParser.INNER - 61)) | (1 << (KotlinParser.VALUE - 61)) | (1 << (KotlinParser.TAILREC - 61)) | (1 << (KotlinParser.OPERATOR - 61)) | (1 << (KotlinParser.INLINE - 61)) | (1 << (KotlinParser.INFIX - 61)) | (1 << (KotlinParser.EXTERNAL - 61)) | (1 << (KotlinParser.SUSPEND - 61)) | (1 << (KotlinParser.OVERRIDE - 61)) | (1 << (KotlinParser.ABSTRACT - 61)))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (KotlinParser.FINAL - 125)) | (1 << (KotlinParser.OPEN - 125)) | (1 << (KotlinParser.CONST - 125)) | (1 << (KotlinParser.LATEINIT - 125)) | (1 << (KotlinParser.VARARG - 125)) | (1 << (KotlinParser.NOINLINE - 125)) | (1 << (KotlinParser.CROSSINLINE - 125)) | (1 << (KotlinParser.REIFIED - 125)) | (1 << (KotlinParser.EXPECT - 125)) | (1 << (KotlinParser.ACTUAL - 125)) | (1 << (KotlinParser.Identifier - 125)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DOT)
            else:
                return self.getToken(KotlinParser.DOT, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = KotlinParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3436
            self.simpleIdentifier()
            self.state = 3447
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,528,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 3437
                        self.match(KotlinParser.NL)
                        self.state = 3442
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3443
                    self.match(KotlinParser.DOT)
                    self.state = 3444
                    self.simpleIdentifier() 
                self.state = 3449
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,528,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





